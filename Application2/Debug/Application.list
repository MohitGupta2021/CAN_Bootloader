
Application.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08004400  08004400  00000400  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002550  0800450c  0800450c  0000050c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08006a5c  08006a5c  00002a5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ad8  08006ad8  0000306c  2**0
                  CONTENTS
  4 .ARM          00000000  08006ad8  08006ad8  0000306c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006ad8  08006ad8  0000306c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ad8  08006ad8  00002ad8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006adc  08006adc  00002adc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08006ae0  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b4  2000006c  08006b4c  0000306c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000220  08006b4c  00003220  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000306c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005230  00000000  00000000  00003095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000147d  00000000  00000000  000082c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006b8  00000000  00000000  00009748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000511  00000000  00000000  00009e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000177eb  00000000  00000000  0000a311  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007522  00000000  00000000  00021afc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008392f  00000000  00000000  0002901e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ac94d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000215c  00000000  00000000  000ac990  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000aeaec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800450c <__do_global_dtors_aux>:
 800450c:	b510      	push	{r4, lr}
 800450e:	4c05      	ldr	r4, [pc, #20]	@ (8004524 <__do_global_dtors_aux+0x18>)
 8004510:	7823      	ldrb	r3, [r4, #0]
 8004512:	b933      	cbnz	r3, 8004522 <__do_global_dtors_aux+0x16>
 8004514:	4b04      	ldr	r3, [pc, #16]	@ (8004528 <__do_global_dtors_aux+0x1c>)
 8004516:	b113      	cbz	r3, 800451e <__do_global_dtors_aux+0x12>
 8004518:	4804      	ldr	r0, [pc, #16]	@ (800452c <__do_global_dtors_aux+0x20>)
 800451a:	f3af 8000 	nop.w
 800451e:	2301      	movs	r3, #1
 8004520:	7023      	strb	r3, [r4, #0]
 8004522:	bd10      	pop	{r4, pc}
 8004524:	2000006c 	.word	0x2000006c
 8004528:	00000000 	.word	0x00000000
 800452c:	08006a44 	.word	0x08006a44

08004530 <frame_dummy>:
 8004530:	b508      	push	{r3, lr}
 8004532:	4b03      	ldr	r3, [pc, #12]	@ (8004540 <frame_dummy+0x10>)
 8004534:	b11b      	cbz	r3, 800453e <frame_dummy+0xe>
 8004536:	4903      	ldr	r1, [pc, #12]	@ (8004544 <frame_dummy+0x14>)
 8004538:	4803      	ldr	r0, [pc, #12]	@ (8004548 <frame_dummy+0x18>)
 800453a:	f3af 8000 	nop.w
 800453e:	bd08      	pop	{r3, pc}
 8004540:	00000000 	.word	0x00000000
 8004544:	20000070 	.word	0x20000070
 8004548:	08006a44 	.word	0x08006a44

0800454c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004550:	f000 fa4c 	bl	80049ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004554:	f000 f81e 	bl	8004594 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004558:	f000 f882 	bl	8004660 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800455c:	f000 f856 	bl	800460c <MX_USART1_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  printf("Application v%d:%d Started!!!\n", APP_Version[0], APP_Version[1]);
 8004560:	4b09      	ldr	r3, [pc, #36]	@ (8004588 <main+0x3c>)
 8004562:	781b      	ldrb	r3, [r3, #0]
 8004564:	4619      	mov	r1, r3
 8004566:	4b08      	ldr	r3, [pc, #32]	@ (8004588 <main+0x3c>)
 8004568:	785b      	ldrb	r3, [r3, #1]
 800456a:	461a      	mov	r2, r3
 800456c:	4807      	ldr	r0, [pc, #28]	@ (800458c <main+0x40>)
 800456e:	f001 fbf1 	bl	8005d54 <iprintf>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8004572:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004576:	4806      	ldr	r0, [pc, #24]	@ (8004590 <main+0x44>)
 8004578:	f000 fd3e 	bl	8004ff8 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);							//1sec delay
 800457c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004580:	f000 fa96 	bl	8004ab0 <HAL_Delay>
	  printf("Application v%d:%d Started!!!\n", APP_Version[0], APP_Version[1]);
 8004584:	bf00      	nop
 8004586:	e7eb      	b.n	8004560 <main+0x14>
 8004588:	20000000 	.word	0x20000000
 800458c:	08006a5c 	.word	0x08006a5c
 8004590:	40011000 	.word	0x40011000

08004594 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b090      	sub	sp, #64	@ 0x40
 8004598:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800459a:	f107 0318 	add.w	r3, r7, #24
 800459e:	2228      	movs	r2, #40	@ 0x28
 80045a0:	2100      	movs	r1, #0
 80045a2:	4618      	mov	r0, r3
 80045a4:	f001 fc2b 	bl	8005dfe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80045a8:	1d3b      	adds	r3, r7, #4
 80045aa:	2200      	movs	r2, #0
 80045ac:	601a      	str	r2, [r3, #0]
 80045ae:	605a      	str	r2, [r3, #4]
 80045b0:	609a      	str	r2, [r3, #8]
 80045b2:	60da      	str	r2, [r3, #12]
 80045b4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80045b6:	2302      	movs	r3, #2
 80045b8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80045ba:	2301      	movs	r3, #1
 80045bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80045be:	2310      	movs	r3, #16
 80045c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80045c2:	2300      	movs	r3, #0
 80045c4:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80045c6:	f107 0318 	add.w	r3, r7, #24
 80045ca:	4618      	mov	r0, r3
 80045cc:	f000 fd2e 	bl	800502c <HAL_RCC_OscConfig>
 80045d0:	4603      	mov	r3, r0
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d001      	beq.n	80045da <SystemClock_Config+0x46>
  {
    Error_Handler();
 80045d6:	f000 f895 	bl	8004704 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80045da:	230f      	movs	r3, #15
 80045dc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80045de:	2300      	movs	r3, #0
 80045e0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80045e2:	2300      	movs	r3, #0
 80045e4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80045e6:	2300      	movs	r3, #0
 80045e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80045ea:	2300      	movs	r3, #0
 80045ec:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80045ee:	1d3b      	adds	r3, r7, #4
 80045f0:	2100      	movs	r1, #0
 80045f2:	4618      	mov	r0, r3
 80045f4:	f000 ff9c 	bl	8005530 <HAL_RCC_ClockConfig>
 80045f8:	4603      	mov	r3, r0
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d001      	beq.n	8004602 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80045fe:	f000 f881 	bl	8004704 <Error_Handler>
  }
}
 8004602:	bf00      	nop
 8004604:	3740      	adds	r7, #64	@ 0x40
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}
	...

0800460c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004610:	4b11      	ldr	r3, [pc, #68]	@ (8004658 <MX_USART1_UART_Init+0x4c>)
 8004612:	4a12      	ldr	r2, [pc, #72]	@ (800465c <MX_USART1_UART_Init+0x50>)
 8004614:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004616:	4b10      	ldr	r3, [pc, #64]	@ (8004658 <MX_USART1_UART_Init+0x4c>)
 8004618:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800461c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800461e:	4b0e      	ldr	r3, [pc, #56]	@ (8004658 <MX_USART1_UART_Init+0x4c>)
 8004620:	2200      	movs	r2, #0
 8004622:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004624:	4b0c      	ldr	r3, [pc, #48]	@ (8004658 <MX_USART1_UART_Init+0x4c>)
 8004626:	2200      	movs	r2, #0
 8004628:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800462a:	4b0b      	ldr	r3, [pc, #44]	@ (8004658 <MX_USART1_UART_Init+0x4c>)
 800462c:	2200      	movs	r2, #0
 800462e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004630:	4b09      	ldr	r3, [pc, #36]	@ (8004658 <MX_USART1_UART_Init+0x4c>)
 8004632:	220c      	movs	r2, #12
 8004634:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004636:	4b08      	ldr	r3, [pc, #32]	@ (8004658 <MX_USART1_UART_Init+0x4c>)
 8004638:	2200      	movs	r2, #0
 800463a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800463c:	4b06      	ldr	r3, [pc, #24]	@ (8004658 <MX_USART1_UART_Init+0x4c>)
 800463e:	2200      	movs	r2, #0
 8004640:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004642:	4805      	ldr	r0, [pc, #20]	@ (8004658 <MX_USART1_UART_Init+0x4c>)
 8004644:	f001 f90c 	bl	8005860 <HAL_UART_Init>
 8004648:	4603      	mov	r3, r0
 800464a:	2b00      	cmp	r3, #0
 800464c:	d001      	beq.n	8004652 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800464e:	f000 f859 	bl	8004704 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004652:	bf00      	nop
 8004654:	bd80      	pop	{r7, pc}
 8004656:	bf00      	nop
 8004658:	20000088 	.word	0x20000088
 800465c:	40013800 	.word	0x40013800

08004660 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b086      	sub	sp, #24
 8004664:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004666:	f107 0308 	add.w	r3, r7, #8
 800466a:	2200      	movs	r2, #0
 800466c:	601a      	str	r2, [r3, #0]
 800466e:	605a      	str	r2, [r3, #4]
 8004670:	609a      	str	r2, [r3, #8]
 8004672:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004674:	4b18      	ldr	r3, [pc, #96]	@ (80046d8 <MX_GPIO_Init+0x78>)
 8004676:	699b      	ldr	r3, [r3, #24]
 8004678:	4a17      	ldr	r2, [pc, #92]	@ (80046d8 <MX_GPIO_Init+0x78>)
 800467a:	f043 0310 	orr.w	r3, r3, #16
 800467e:	6193      	str	r3, [r2, #24]
 8004680:	4b15      	ldr	r3, [pc, #84]	@ (80046d8 <MX_GPIO_Init+0x78>)
 8004682:	699b      	ldr	r3, [r3, #24]
 8004684:	f003 0310 	and.w	r3, r3, #16
 8004688:	607b      	str	r3, [r7, #4]
 800468a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800468c:	4b12      	ldr	r3, [pc, #72]	@ (80046d8 <MX_GPIO_Init+0x78>)
 800468e:	699b      	ldr	r3, [r3, #24]
 8004690:	4a11      	ldr	r2, [pc, #68]	@ (80046d8 <MX_GPIO_Init+0x78>)
 8004692:	f043 0304 	orr.w	r3, r3, #4
 8004696:	6193      	str	r3, [r2, #24]
 8004698:	4b0f      	ldr	r3, [pc, #60]	@ (80046d8 <MX_GPIO_Init+0x78>)
 800469a:	699b      	ldr	r3, [r3, #24]
 800469c:	f003 0304 	and.w	r3, r3, #4
 80046a0:	603b      	str	r3, [r7, #0]
 80046a2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80046a4:	2200      	movs	r2, #0
 80046a6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80046aa:	480c      	ldr	r0, [pc, #48]	@ (80046dc <MX_GPIO_Init+0x7c>)
 80046ac:	f000 fc8c 	bl	8004fc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80046b0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80046b4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80046b6:	2301      	movs	r3, #1
 80046b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046ba:	2300      	movs	r3, #0
 80046bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046be:	2302      	movs	r3, #2
 80046c0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80046c2:	f107 0308 	add.w	r3, r7, #8
 80046c6:	4619      	mov	r1, r3
 80046c8:	4804      	ldr	r0, [pc, #16]	@ (80046dc <MX_GPIO_Init+0x7c>)
 80046ca:	f000 faf9 	bl	8004cc0 <HAL_GPIO_Init>

}
 80046ce:	bf00      	nop
 80046d0:	3718      	adds	r7, #24
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}
 80046d6:	bf00      	nop
 80046d8:	40021000 	.word	0x40021000
 80046dc:	40011000 	.word	0x40011000

080046e0 <__io_putchar>:
     set to 'Yes') calls __io_putchar() */
int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b082      	sub	sp, #8
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the UART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80046e8:	1d39      	adds	r1, r7, #4
 80046ea:	f04f 33ff 	mov.w	r3, #4294967295
 80046ee:	2201      	movs	r2, #1
 80046f0:	4803      	ldr	r0, [pc, #12]	@ (8004700 <__io_putchar+0x20>)
 80046f2:	f001 f902 	bl	80058fa <HAL_UART_Transmit>

  return ch;
 80046f6:	687b      	ldr	r3, [r7, #4]
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	3708      	adds	r7, #8
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}
 8004700:	20000088 	.word	0x20000088

08004704 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004704:	b480      	push	{r7}
 8004706:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004708:	b672      	cpsid	i
}
 800470a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800470c:	bf00      	nop
 800470e:	e7fd      	b.n	800470c <Error_Handler+0x8>

08004710 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004710:	b480      	push	{r7}
 8004712:	b083      	sub	sp, #12
 8004714:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8004716:	4b0e      	ldr	r3, [pc, #56]	@ (8004750 <HAL_MspInit+0x40>)
 8004718:	699b      	ldr	r3, [r3, #24]
 800471a:	4a0d      	ldr	r2, [pc, #52]	@ (8004750 <HAL_MspInit+0x40>)
 800471c:	f043 0301 	orr.w	r3, r3, #1
 8004720:	6193      	str	r3, [r2, #24]
 8004722:	4b0b      	ldr	r3, [pc, #44]	@ (8004750 <HAL_MspInit+0x40>)
 8004724:	699b      	ldr	r3, [r3, #24]
 8004726:	f003 0301 	and.w	r3, r3, #1
 800472a:	607b      	str	r3, [r7, #4]
 800472c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800472e:	4b08      	ldr	r3, [pc, #32]	@ (8004750 <HAL_MspInit+0x40>)
 8004730:	69db      	ldr	r3, [r3, #28]
 8004732:	4a07      	ldr	r2, [pc, #28]	@ (8004750 <HAL_MspInit+0x40>)
 8004734:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004738:	61d3      	str	r3, [r2, #28]
 800473a:	4b05      	ldr	r3, [pc, #20]	@ (8004750 <HAL_MspInit+0x40>)
 800473c:	69db      	ldr	r3, [r3, #28]
 800473e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004742:	603b      	str	r3, [r7, #0]
 8004744:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004746:	bf00      	nop
 8004748:	370c      	adds	r7, #12
 800474a:	46bd      	mov	sp, r7
 800474c:	bc80      	pop	{r7}
 800474e:	4770      	bx	lr
 8004750:	40021000 	.word	0x40021000

08004754 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b088      	sub	sp, #32
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800475c:	f107 0310 	add.w	r3, r7, #16
 8004760:	2200      	movs	r2, #0
 8004762:	601a      	str	r2, [r3, #0]
 8004764:	605a      	str	r2, [r3, #4]
 8004766:	609a      	str	r2, [r3, #8]
 8004768:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a1c      	ldr	r2, [pc, #112]	@ (80047e0 <HAL_UART_MspInit+0x8c>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d131      	bne.n	80047d8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004774:	4b1b      	ldr	r3, [pc, #108]	@ (80047e4 <HAL_UART_MspInit+0x90>)
 8004776:	699b      	ldr	r3, [r3, #24]
 8004778:	4a1a      	ldr	r2, [pc, #104]	@ (80047e4 <HAL_UART_MspInit+0x90>)
 800477a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800477e:	6193      	str	r3, [r2, #24]
 8004780:	4b18      	ldr	r3, [pc, #96]	@ (80047e4 <HAL_UART_MspInit+0x90>)
 8004782:	699b      	ldr	r3, [r3, #24]
 8004784:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004788:	60fb      	str	r3, [r7, #12]
 800478a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800478c:	4b15      	ldr	r3, [pc, #84]	@ (80047e4 <HAL_UART_MspInit+0x90>)
 800478e:	699b      	ldr	r3, [r3, #24]
 8004790:	4a14      	ldr	r2, [pc, #80]	@ (80047e4 <HAL_UART_MspInit+0x90>)
 8004792:	f043 0304 	orr.w	r3, r3, #4
 8004796:	6193      	str	r3, [r2, #24]
 8004798:	4b12      	ldr	r3, [pc, #72]	@ (80047e4 <HAL_UART_MspInit+0x90>)
 800479a:	699b      	ldr	r3, [r3, #24]
 800479c:	f003 0304 	and.w	r3, r3, #4
 80047a0:	60bb      	str	r3, [r7, #8]
 80047a2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80047a4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80047a8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047aa:	2302      	movs	r3, #2
 80047ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80047ae:	2303      	movs	r3, #3
 80047b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047b2:	f107 0310 	add.w	r3, r7, #16
 80047b6:	4619      	mov	r1, r3
 80047b8:	480b      	ldr	r0, [pc, #44]	@ (80047e8 <HAL_UART_MspInit+0x94>)
 80047ba:	f000 fa81 	bl	8004cc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80047be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80047c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80047c4:	2300      	movs	r3, #0
 80047c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047c8:	2300      	movs	r3, #0
 80047ca:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047cc:	f107 0310 	add.w	r3, r7, #16
 80047d0:	4619      	mov	r1, r3
 80047d2:	4805      	ldr	r0, [pc, #20]	@ (80047e8 <HAL_UART_MspInit+0x94>)
 80047d4:	f000 fa74 	bl	8004cc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80047d8:	bf00      	nop
 80047da:	3720      	adds	r7, #32
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}
 80047e0:	40013800 	.word	0x40013800
 80047e4:	40021000 	.word	0x40021000
 80047e8:	40010800 	.word	0x40010800

080047ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80047ec:	b480      	push	{r7}
 80047ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80047f0:	bf00      	nop
 80047f2:	e7fd      	b.n	80047f0 <NMI_Handler+0x4>

080047f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80047f4:	b480      	push	{r7}
 80047f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80047f8:	bf00      	nop
 80047fa:	e7fd      	b.n	80047f8 <HardFault_Handler+0x4>

080047fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80047fc:	b480      	push	{r7}
 80047fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004800:	bf00      	nop
 8004802:	e7fd      	b.n	8004800 <MemManage_Handler+0x4>

08004804 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004804:	b480      	push	{r7}
 8004806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004808:	bf00      	nop
 800480a:	e7fd      	b.n	8004808 <BusFault_Handler+0x4>

0800480c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800480c:	b480      	push	{r7}
 800480e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004810:	bf00      	nop
 8004812:	e7fd      	b.n	8004810 <UsageFault_Handler+0x4>

08004814 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004814:	b480      	push	{r7}
 8004816:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004818:	bf00      	nop
 800481a:	46bd      	mov	sp, r7
 800481c:	bc80      	pop	{r7}
 800481e:	4770      	bx	lr

08004820 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004820:	b480      	push	{r7}
 8004822:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004824:	bf00      	nop
 8004826:	46bd      	mov	sp, r7
 8004828:	bc80      	pop	{r7}
 800482a:	4770      	bx	lr

0800482c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800482c:	b480      	push	{r7}
 800482e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004830:	bf00      	nop
 8004832:	46bd      	mov	sp, r7
 8004834:	bc80      	pop	{r7}
 8004836:	4770      	bx	lr

08004838 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800483c:	f000 f91c 	bl	8004a78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004840:	bf00      	nop
 8004842:	bd80      	pop	{r7, pc}

08004844 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b086      	sub	sp, #24
 8004848:	af00      	add	r7, sp, #0
 800484a:	60f8      	str	r0, [r7, #12]
 800484c:	60b9      	str	r1, [r7, #8]
 800484e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004850:	2300      	movs	r3, #0
 8004852:	617b      	str	r3, [r7, #20]
 8004854:	e00a      	b.n	800486c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004856:	f3af 8000 	nop.w
 800485a:	4601      	mov	r1, r0
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	1c5a      	adds	r2, r3, #1
 8004860:	60ba      	str	r2, [r7, #8]
 8004862:	b2ca      	uxtb	r2, r1
 8004864:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	3301      	adds	r3, #1
 800486a:	617b      	str	r3, [r7, #20]
 800486c:	697a      	ldr	r2, [r7, #20]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	429a      	cmp	r2, r3
 8004872:	dbf0      	blt.n	8004856 <_read+0x12>
	}

return len;
 8004874:	687b      	ldr	r3, [r7, #4]
}
 8004876:	4618      	mov	r0, r3
 8004878:	3718      	adds	r7, #24
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}

0800487e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800487e:	b580      	push	{r7, lr}
 8004880:	b086      	sub	sp, #24
 8004882:	af00      	add	r7, sp, #0
 8004884:	60f8      	str	r0, [r7, #12]
 8004886:	60b9      	str	r1, [r7, #8]
 8004888:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800488a:	2300      	movs	r3, #0
 800488c:	617b      	str	r3, [r7, #20]
 800488e:	e009      	b.n	80048a4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	1c5a      	adds	r2, r3, #1
 8004894:	60ba      	str	r2, [r7, #8]
 8004896:	781b      	ldrb	r3, [r3, #0]
 8004898:	4618      	mov	r0, r3
 800489a:	f7ff ff21 	bl	80046e0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	3301      	adds	r3, #1
 80048a2:	617b      	str	r3, [r7, #20]
 80048a4:	697a      	ldr	r2, [r7, #20]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	429a      	cmp	r2, r3
 80048aa:	dbf1      	blt.n	8004890 <_write+0x12>
	}
	return len;
 80048ac:	687b      	ldr	r3, [r7, #4]
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	3718      	adds	r7, #24
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}

080048b6 <_close>:

int _close(int file)
{
 80048b6:	b480      	push	{r7}
 80048b8:	b083      	sub	sp, #12
 80048ba:	af00      	add	r7, sp, #0
 80048bc:	6078      	str	r0, [r7, #4]
	return -1;
 80048be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	370c      	adds	r7, #12
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bc80      	pop	{r7}
 80048ca:	4770      	bx	lr

080048cc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b083      	sub	sp, #12
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
 80048d4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80048dc:	605a      	str	r2, [r3, #4]
	return 0;
 80048de:	2300      	movs	r3, #0
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	370c      	adds	r7, #12
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bc80      	pop	{r7}
 80048e8:	4770      	bx	lr

080048ea <_isatty>:

int _isatty(int file)
{
 80048ea:	b480      	push	{r7}
 80048ec:	b083      	sub	sp, #12
 80048ee:	af00      	add	r7, sp, #0
 80048f0:	6078      	str	r0, [r7, #4]
	return 1;
 80048f2:	2301      	movs	r3, #1
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	370c      	adds	r7, #12
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bc80      	pop	{r7}
 80048fc:	4770      	bx	lr

080048fe <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80048fe:	b480      	push	{r7}
 8004900:	b085      	sub	sp, #20
 8004902:	af00      	add	r7, sp, #0
 8004904:	60f8      	str	r0, [r7, #12]
 8004906:	60b9      	str	r1, [r7, #8]
 8004908:	607a      	str	r2, [r7, #4]
	return 0;
 800490a:	2300      	movs	r3, #0
}
 800490c:	4618      	mov	r0, r3
 800490e:	3714      	adds	r7, #20
 8004910:	46bd      	mov	sp, r7
 8004912:	bc80      	pop	{r7}
 8004914:	4770      	bx	lr
	...

08004918 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b086      	sub	sp, #24
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004920:	4a14      	ldr	r2, [pc, #80]	@ (8004974 <_sbrk+0x5c>)
 8004922:	4b15      	ldr	r3, [pc, #84]	@ (8004978 <_sbrk+0x60>)
 8004924:	1ad3      	subs	r3, r2, r3
 8004926:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800492c:	4b13      	ldr	r3, [pc, #76]	@ (800497c <_sbrk+0x64>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d102      	bne.n	800493a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004934:	4b11      	ldr	r3, [pc, #68]	@ (800497c <_sbrk+0x64>)
 8004936:	4a12      	ldr	r2, [pc, #72]	@ (8004980 <_sbrk+0x68>)
 8004938:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800493a:	4b10      	ldr	r3, [pc, #64]	@ (800497c <_sbrk+0x64>)
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	4413      	add	r3, r2
 8004942:	693a      	ldr	r2, [r7, #16]
 8004944:	429a      	cmp	r2, r3
 8004946:	d207      	bcs.n	8004958 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004948:	f001 faa8 	bl	8005e9c <__errno>
 800494c:	4603      	mov	r3, r0
 800494e:	220c      	movs	r2, #12
 8004950:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004952:	f04f 33ff 	mov.w	r3, #4294967295
 8004956:	e009      	b.n	800496c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004958:	4b08      	ldr	r3, [pc, #32]	@ (800497c <_sbrk+0x64>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800495e:	4b07      	ldr	r3, [pc, #28]	@ (800497c <_sbrk+0x64>)
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	4413      	add	r3, r2
 8004966:	4a05      	ldr	r2, [pc, #20]	@ (800497c <_sbrk+0x64>)
 8004968:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800496a:	68fb      	ldr	r3, [r7, #12]
}
 800496c:	4618      	mov	r0, r3
 800496e:	3718      	adds	r7, #24
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}
 8004974:	20005000 	.word	0x20005000
 8004978:	00000400 	.word	0x00000400
 800497c:	200000cc 	.word	0x200000cc
 8004980:	20000220 	.word	0x20000220

08004984 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004984:	b480      	push	{r7}
 8004986:	af00      	add	r7, sp, #0
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
 8004988:	4b03      	ldr	r3, [pc, #12]	@ (8004998 <SystemInit+0x14>)
 800498a:	4a04      	ldr	r2, [pc, #16]	@ (800499c <SystemInit+0x18>)
 800498c:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 800498e:	bf00      	nop
 8004990:	46bd      	mov	sp, r7
 8004992:	bc80      	pop	{r7}
 8004994:	4770      	bx	lr
 8004996:	bf00      	nop
 8004998:	e000ed00 	.word	0xe000ed00
 800499c:	08004400 	.word	0x08004400

080049a0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80049a0:	480c      	ldr	r0, [pc, #48]	@ (80049d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80049a2:	490d      	ldr	r1, [pc, #52]	@ (80049d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80049a4:	4a0d      	ldr	r2, [pc, #52]	@ (80049dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80049a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80049a8:	e002      	b.n	80049b0 <LoopCopyDataInit>

080049aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80049aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80049ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80049ae:	3304      	adds	r3, #4

080049b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80049b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80049b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80049b4:	d3f9      	bcc.n	80049aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80049b6:	4a0a      	ldr	r2, [pc, #40]	@ (80049e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80049b8:	4c0a      	ldr	r4, [pc, #40]	@ (80049e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80049ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80049bc:	e001      	b.n	80049c2 <LoopFillZerobss>

080049be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80049be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80049c0:	3204      	adds	r2, #4

080049c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80049c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80049c4:	d3fb      	bcc.n	80049be <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80049c6:	f7ff ffdd 	bl	8004984 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80049ca:	f001 fa6d 	bl	8005ea8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80049ce:	f7ff fdbd 	bl	800454c <main>
  bx lr
 80049d2:	4770      	bx	lr
  ldr r0, =_sdata
 80049d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80049d8:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80049dc:	08006ae0 	.word	0x08006ae0
  ldr r2, =_sbss
 80049e0:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80049e4:	20000220 	.word	0x20000220

080049e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80049e8:	e7fe      	b.n	80049e8 <ADC1_2_IRQHandler>
	...

080049ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80049f0:	4b08      	ldr	r3, [pc, #32]	@ (8004a14 <HAL_Init+0x28>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a07      	ldr	r2, [pc, #28]	@ (8004a14 <HAL_Init+0x28>)
 80049f6:	f043 0310 	orr.w	r3, r3, #16
 80049fa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80049fc:	2003      	movs	r0, #3
 80049fe:	f000 f92b 	bl	8004c58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004a02:	200f      	movs	r0, #15
 8004a04:	f000 f808 	bl	8004a18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004a08:	f7ff fe82 	bl	8004710 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004a0c:	2300      	movs	r3, #0
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	bd80      	pop	{r7, pc}
 8004a12:	bf00      	nop
 8004a14:	40022000 	.word	0x40022000

08004a18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b082      	sub	sp, #8
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004a20:	4b12      	ldr	r3, [pc, #72]	@ (8004a6c <HAL_InitTick+0x54>)
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	4b12      	ldr	r3, [pc, #72]	@ (8004a70 <HAL_InitTick+0x58>)
 8004a26:	781b      	ldrb	r3, [r3, #0]
 8004a28:	4619      	mov	r1, r3
 8004a2a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004a2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004a32:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a36:	4618      	mov	r0, r3
 8004a38:	f000 f935 	bl	8004ca6 <HAL_SYSTICK_Config>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d001      	beq.n	8004a46 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	e00e      	b.n	8004a64 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2b0f      	cmp	r3, #15
 8004a4a:	d80a      	bhi.n	8004a62 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	6879      	ldr	r1, [r7, #4]
 8004a50:	f04f 30ff 	mov.w	r0, #4294967295
 8004a54:	f000 f90b 	bl	8004c6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004a58:	4a06      	ldr	r2, [pc, #24]	@ (8004a74 <HAL_InitTick+0x5c>)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	e000      	b.n	8004a64 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	3708      	adds	r7, #8
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd80      	pop	{r7, pc}
 8004a6c:	20000004 	.word	0x20000004
 8004a70:	2000000c 	.word	0x2000000c
 8004a74:	20000008 	.word	0x20000008

08004a78 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004a7c:	4b05      	ldr	r3, [pc, #20]	@ (8004a94 <HAL_IncTick+0x1c>)
 8004a7e:	781b      	ldrb	r3, [r3, #0]
 8004a80:	461a      	mov	r2, r3
 8004a82:	4b05      	ldr	r3, [pc, #20]	@ (8004a98 <HAL_IncTick+0x20>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4413      	add	r3, r2
 8004a88:	4a03      	ldr	r2, [pc, #12]	@ (8004a98 <HAL_IncTick+0x20>)
 8004a8a:	6013      	str	r3, [r2, #0]
}
 8004a8c:	bf00      	nop
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bc80      	pop	{r7}
 8004a92:	4770      	bx	lr
 8004a94:	2000000c 	.word	0x2000000c
 8004a98:	200000d0 	.word	0x200000d0

08004a9c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	af00      	add	r7, sp, #0
  return uwTick;
 8004aa0:	4b02      	ldr	r3, [pc, #8]	@ (8004aac <HAL_GetTick+0x10>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bc80      	pop	{r7}
 8004aaa:	4770      	bx	lr
 8004aac:	200000d0 	.word	0x200000d0

08004ab0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b084      	sub	sp, #16
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004ab8:	f7ff fff0 	bl	8004a9c <HAL_GetTick>
 8004abc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ac8:	d005      	beq.n	8004ad6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004aca:	4b0a      	ldr	r3, [pc, #40]	@ (8004af4 <HAL_Delay+0x44>)
 8004acc:	781b      	ldrb	r3, [r3, #0]
 8004ace:	461a      	mov	r2, r3
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	4413      	add	r3, r2
 8004ad4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004ad6:	bf00      	nop
 8004ad8:	f7ff ffe0 	bl	8004a9c <HAL_GetTick>
 8004adc:	4602      	mov	r2, r0
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	1ad3      	subs	r3, r2, r3
 8004ae2:	68fa      	ldr	r2, [r7, #12]
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d8f7      	bhi.n	8004ad8 <HAL_Delay+0x28>
  {
  }
}
 8004ae8:	bf00      	nop
 8004aea:	bf00      	nop
 8004aec:	3710      	adds	r7, #16
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}
 8004af2:	bf00      	nop
 8004af4:	2000000c 	.word	0x2000000c

08004af8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b085      	sub	sp, #20
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	f003 0307 	and.w	r3, r3, #7
 8004b06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b08:	4b0c      	ldr	r3, [pc, #48]	@ (8004b3c <__NVIC_SetPriorityGrouping+0x44>)
 8004b0a:	68db      	ldr	r3, [r3, #12]
 8004b0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b0e:	68ba      	ldr	r2, [r7, #8]
 8004b10:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004b14:	4013      	ands	r3, r2
 8004b16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004b20:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004b24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004b2a:	4a04      	ldr	r2, [pc, #16]	@ (8004b3c <__NVIC_SetPriorityGrouping+0x44>)
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	60d3      	str	r3, [r2, #12]
}
 8004b30:	bf00      	nop
 8004b32:	3714      	adds	r7, #20
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bc80      	pop	{r7}
 8004b38:	4770      	bx	lr
 8004b3a:	bf00      	nop
 8004b3c:	e000ed00 	.word	0xe000ed00

08004b40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004b40:	b480      	push	{r7}
 8004b42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004b44:	4b04      	ldr	r3, [pc, #16]	@ (8004b58 <__NVIC_GetPriorityGrouping+0x18>)
 8004b46:	68db      	ldr	r3, [r3, #12]
 8004b48:	0a1b      	lsrs	r3, r3, #8
 8004b4a:	f003 0307 	and.w	r3, r3, #7
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bc80      	pop	{r7}
 8004b54:	4770      	bx	lr
 8004b56:	bf00      	nop
 8004b58:	e000ed00 	.word	0xe000ed00

08004b5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b083      	sub	sp, #12
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	4603      	mov	r3, r0
 8004b64:	6039      	str	r1, [r7, #0]
 8004b66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	db0a      	blt.n	8004b86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	b2da      	uxtb	r2, r3
 8004b74:	490c      	ldr	r1, [pc, #48]	@ (8004ba8 <__NVIC_SetPriority+0x4c>)
 8004b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b7a:	0112      	lsls	r2, r2, #4
 8004b7c:	b2d2      	uxtb	r2, r2
 8004b7e:	440b      	add	r3, r1
 8004b80:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004b84:	e00a      	b.n	8004b9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	b2da      	uxtb	r2, r3
 8004b8a:	4908      	ldr	r1, [pc, #32]	@ (8004bac <__NVIC_SetPriority+0x50>)
 8004b8c:	79fb      	ldrb	r3, [r7, #7]
 8004b8e:	f003 030f 	and.w	r3, r3, #15
 8004b92:	3b04      	subs	r3, #4
 8004b94:	0112      	lsls	r2, r2, #4
 8004b96:	b2d2      	uxtb	r2, r2
 8004b98:	440b      	add	r3, r1
 8004b9a:	761a      	strb	r2, [r3, #24]
}
 8004b9c:	bf00      	nop
 8004b9e:	370c      	adds	r7, #12
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bc80      	pop	{r7}
 8004ba4:	4770      	bx	lr
 8004ba6:	bf00      	nop
 8004ba8:	e000e100 	.word	0xe000e100
 8004bac:	e000ed00 	.word	0xe000ed00

08004bb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b089      	sub	sp, #36	@ 0x24
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	60f8      	str	r0, [r7, #12]
 8004bb8:	60b9      	str	r1, [r7, #8]
 8004bba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	f003 0307 	and.w	r3, r3, #7
 8004bc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004bc4:	69fb      	ldr	r3, [r7, #28]
 8004bc6:	f1c3 0307 	rsb	r3, r3, #7
 8004bca:	2b04      	cmp	r3, #4
 8004bcc:	bf28      	it	cs
 8004bce:	2304      	movcs	r3, #4
 8004bd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004bd2:	69fb      	ldr	r3, [r7, #28]
 8004bd4:	3304      	adds	r3, #4
 8004bd6:	2b06      	cmp	r3, #6
 8004bd8:	d902      	bls.n	8004be0 <NVIC_EncodePriority+0x30>
 8004bda:	69fb      	ldr	r3, [r7, #28]
 8004bdc:	3b03      	subs	r3, #3
 8004bde:	e000      	b.n	8004be2 <NVIC_EncodePriority+0x32>
 8004be0:	2300      	movs	r3, #0
 8004be2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004be4:	f04f 32ff 	mov.w	r2, #4294967295
 8004be8:	69bb      	ldr	r3, [r7, #24]
 8004bea:	fa02 f303 	lsl.w	r3, r2, r3
 8004bee:	43da      	mvns	r2, r3
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	401a      	ands	r2, r3
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004bf8:	f04f 31ff 	mov.w	r1, #4294967295
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	fa01 f303 	lsl.w	r3, r1, r3
 8004c02:	43d9      	mvns	r1, r3
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c08:	4313      	orrs	r3, r2
         );
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3724      	adds	r7, #36	@ 0x24
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bc80      	pop	{r7}
 8004c12:	4770      	bx	lr

08004c14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b082      	sub	sp, #8
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	3b01      	subs	r3, #1
 8004c20:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004c24:	d301      	bcc.n	8004c2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004c26:	2301      	movs	r3, #1
 8004c28:	e00f      	b.n	8004c4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004c2a:	4a0a      	ldr	r2, [pc, #40]	@ (8004c54 <SysTick_Config+0x40>)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	3b01      	subs	r3, #1
 8004c30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004c32:	210f      	movs	r1, #15
 8004c34:	f04f 30ff 	mov.w	r0, #4294967295
 8004c38:	f7ff ff90 	bl	8004b5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004c3c:	4b05      	ldr	r3, [pc, #20]	@ (8004c54 <SysTick_Config+0x40>)
 8004c3e:	2200      	movs	r2, #0
 8004c40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004c42:	4b04      	ldr	r3, [pc, #16]	@ (8004c54 <SysTick_Config+0x40>)
 8004c44:	2207      	movs	r2, #7
 8004c46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004c48:	2300      	movs	r3, #0
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3708      	adds	r7, #8
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}
 8004c52:	bf00      	nop
 8004c54:	e000e010 	.word	0xe000e010

08004c58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b082      	sub	sp, #8
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004c60:	6878      	ldr	r0, [r7, #4]
 8004c62:	f7ff ff49 	bl	8004af8 <__NVIC_SetPriorityGrouping>
}
 8004c66:	bf00      	nop
 8004c68:	3708      	adds	r7, #8
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}

08004c6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004c6e:	b580      	push	{r7, lr}
 8004c70:	b086      	sub	sp, #24
 8004c72:	af00      	add	r7, sp, #0
 8004c74:	4603      	mov	r3, r0
 8004c76:	60b9      	str	r1, [r7, #8]
 8004c78:	607a      	str	r2, [r7, #4]
 8004c7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004c80:	f7ff ff5e 	bl	8004b40 <__NVIC_GetPriorityGrouping>
 8004c84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004c86:	687a      	ldr	r2, [r7, #4]
 8004c88:	68b9      	ldr	r1, [r7, #8]
 8004c8a:	6978      	ldr	r0, [r7, #20]
 8004c8c:	f7ff ff90 	bl	8004bb0 <NVIC_EncodePriority>
 8004c90:	4602      	mov	r2, r0
 8004c92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c96:	4611      	mov	r1, r2
 8004c98:	4618      	mov	r0, r3
 8004c9a:	f7ff ff5f 	bl	8004b5c <__NVIC_SetPriority>
}
 8004c9e:	bf00      	nop
 8004ca0:	3718      	adds	r7, #24
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}

08004ca6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004ca6:	b580      	push	{r7, lr}
 8004ca8:	b082      	sub	sp, #8
 8004caa:	af00      	add	r7, sp, #0
 8004cac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f7ff ffb0 	bl	8004c14 <SysTick_Config>
 8004cb4:	4603      	mov	r3, r0
}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	3708      	adds	r7, #8
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}
	...

08004cc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b08b      	sub	sp, #44	@ 0x2c
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
 8004cc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004cca:	2300      	movs	r3, #0
 8004ccc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004cd2:	e169      	b.n	8004fa8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004cd4:	2201      	movs	r2, #1
 8004cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8004cdc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	69fa      	ldr	r2, [r7, #28]
 8004ce4:	4013      	ands	r3, r2
 8004ce6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004ce8:	69ba      	ldr	r2, [r7, #24]
 8004cea:	69fb      	ldr	r3, [r7, #28]
 8004cec:	429a      	cmp	r2, r3
 8004cee:	f040 8158 	bne.w	8004fa2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	4a9a      	ldr	r2, [pc, #616]	@ (8004f60 <HAL_GPIO_Init+0x2a0>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d05e      	beq.n	8004dba <HAL_GPIO_Init+0xfa>
 8004cfc:	4a98      	ldr	r2, [pc, #608]	@ (8004f60 <HAL_GPIO_Init+0x2a0>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d875      	bhi.n	8004dee <HAL_GPIO_Init+0x12e>
 8004d02:	4a98      	ldr	r2, [pc, #608]	@ (8004f64 <HAL_GPIO_Init+0x2a4>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d058      	beq.n	8004dba <HAL_GPIO_Init+0xfa>
 8004d08:	4a96      	ldr	r2, [pc, #600]	@ (8004f64 <HAL_GPIO_Init+0x2a4>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d86f      	bhi.n	8004dee <HAL_GPIO_Init+0x12e>
 8004d0e:	4a96      	ldr	r2, [pc, #600]	@ (8004f68 <HAL_GPIO_Init+0x2a8>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d052      	beq.n	8004dba <HAL_GPIO_Init+0xfa>
 8004d14:	4a94      	ldr	r2, [pc, #592]	@ (8004f68 <HAL_GPIO_Init+0x2a8>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d869      	bhi.n	8004dee <HAL_GPIO_Init+0x12e>
 8004d1a:	4a94      	ldr	r2, [pc, #592]	@ (8004f6c <HAL_GPIO_Init+0x2ac>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d04c      	beq.n	8004dba <HAL_GPIO_Init+0xfa>
 8004d20:	4a92      	ldr	r2, [pc, #584]	@ (8004f6c <HAL_GPIO_Init+0x2ac>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d863      	bhi.n	8004dee <HAL_GPIO_Init+0x12e>
 8004d26:	4a92      	ldr	r2, [pc, #584]	@ (8004f70 <HAL_GPIO_Init+0x2b0>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d046      	beq.n	8004dba <HAL_GPIO_Init+0xfa>
 8004d2c:	4a90      	ldr	r2, [pc, #576]	@ (8004f70 <HAL_GPIO_Init+0x2b0>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d85d      	bhi.n	8004dee <HAL_GPIO_Init+0x12e>
 8004d32:	2b12      	cmp	r3, #18
 8004d34:	d82a      	bhi.n	8004d8c <HAL_GPIO_Init+0xcc>
 8004d36:	2b12      	cmp	r3, #18
 8004d38:	d859      	bhi.n	8004dee <HAL_GPIO_Init+0x12e>
 8004d3a:	a201      	add	r2, pc, #4	@ (adr r2, 8004d40 <HAL_GPIO_Init+0x80>)
 8004d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d40:	08004dbb 	.word	0x08004dbb
 8004d44:	08004d95 	.word	0x08004d95
 8004d48:	08004da7 	.word	0x08004da7
 8004d4c:	08004de9 	.word	0x08004de9
 8004d50:	08004def 	.word	0x08004def
 8004d54:	08004def 	.word	0x08004def
 8004d58:	08004def 	.word	0x08004def
 8004d5c:	08004def 	.word	0x08004def
 8004d60:	08004def 	.word	0x08004def
 8004d64:	08004def 	.word	0x08004def
 8004d68:	08004def 	.word	0x08004def
 8004d6c:	08004def 	.word	0x08004def
 8004d70:	08004def 	.word	0x08004def
 8004d74:	08004def 	.word	0x08004def
 8004d78:	08004def 	.word	0x08004def
 8004d7c:	08004def 	.word	0x08004def
 8004d80:	08004def 	.word	0x08004def
 8004d84:	08004d9d 	.word	0x08004d9d
 8004d88:	08004db1 	.word	0x08004db1
 8004d8c:	4a79      	ldr	r2, [pc, #484]	@ (8004f74 <HAL_GPIO_Init+0x2b4>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d013      	beq.n	8004dba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004d92:	e02c      	b.n	8004dee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	68db      	ldr	r3, [r3, #12]
 8004d98:	623b      	str	r3, [r7, #32]
          break;
 8004d9a:	e029      	b.n	8004df0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	68db      	ldr	r3, [r3, #12]
 8004da0:	3304      	adds	r3, #4
 8004da2:	623b      	str	r3, [r7, #32]
          break;
 8004da4:	e024      	b.n	8004df0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	68db      	ldr	r3, [r3, #12]
 8004daa:	3308      	adds	r3, #8
 8004dac:	623b      	str	r3, [r7, #32]
          break;
 8004dae:	e01f      	b.n	8004df0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	68db      	ldr	r3, [r3, #12]
 8004db4:	330c      	adds	r3, #12
 8004db6:	623b      	str	r3, [r7, #32]
          break;
 8004db8:	e01a      	b.n	8004df0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	689b      	ldr	r3, [r3, #8]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d102      	bne.n	8004dc8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004dc2:	2304      	movs	r3, #4
 8004dc4:	623b      	str	r3, [r7, #32]
          break;
 8004dc6:	e013      	b.n	8004df0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	689b      	ldr	r3, [r3, #8]
 8004dcc:	2b01      	cmp	r3, #1
 8004dce:	d105      	bne.n	8004ddc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004dd0:	2308      	movs	r3, #8
 8004dd2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	69fa      	ldr	r2, [r7, #28]
 8004dd8:	611a      	str	r2, [r3, #16]
          break;
 8004dda:	e009      	b.n	8004df0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004ddc:	2308      	movs	r3, #8
 8004dde:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	69fa      	ldr	r2, [r7, #28]
 8004de4:	615a      	str	r2, [r3, #20]
          break;
 8004de6:	e003      	b.n	8004df0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004de8:	2300      	movs	r3, #0
 8004dea:	623b      	str	r3, [r7, #32]
          break;
 8004dec:	e000      	b.n	8004df0 <HAL_GPIO_Init+0x130>
          break;
 8004dee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004df0:	69bb      	ldr	r3, [r7, #24]
 8004df2:	2bff      	cmp	r3, #255	@ 0xff
 8004df4:	d801      	bhi.n	8004dfa <HAL_GPIO_Init+0x13a>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	e001      	b.n	8004dfe <HAL_GPIO_Init+0x13e>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	3304      	adds	r3, #4
 8004dfe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004e00:	69bb      	ldr	r3, [r7, #24]
 8004e02:	2bff      	cmp	r3, #255	@ 0xff
 8004e04:	d802      	bhi.n	8004e0c <HAL_GPIO_Init+0x14c>
 8004e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e08:	009b      	lsls	r3, r3, #2
 8004e0a:	e002      	b.n	8004e12 <HAL_GPIO_Init+0x152>
 8004e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e0e:	3b08      	subs	r3, #8
 8004e10:	009b      	lsls	r3, r3, #2
 8004e12:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	681a      	ldr	r2, [r3, #0]
 8004e18:	210f      	movs	r1, #15
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	fa01 f303 	lsl.w	r3, r1, r3
 8004e20:	43db      	mvns	r3, r3
 8004e22:	401a      	ands	r2, r3
 8004e24:	6a39      	ldr	r1, [r7, #32]
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	fa01 f303 	lsl.w	r3, r1, r3
 8004e2c:	431a      	orrs	r2, r3
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	f000 80b1 	beq.w	8004fa2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004e40:	4b4d      	ldr	r3, [pc, #308]	@ (8004f78 <HAL_GPIO_Init+0x2b8>)
 8004e42:	699b      	ldr	r3, [r3, #24]
 8004e44:	4a4c      	ldr	r2, [pc, #304]	@ (8004f78 <HAL_GPIO_Init+0x2b8>)
 8004e46:	f043 0301 	orr.w	r3, r3, #1
 8004e4a:	6193      	str	r3, [r2, #24]
 8004e4c:	4b4a      	ldr	r3, [pc, #296]	@ (8004f78 <HAL_GPIO_Init+0x2b8>)
 8004e4e:	699b      	ldr	r3, [r3, #24]
 8004e50:	f003 0301 	and.w	r3, r3, #1
 8004e54:	60bb      	str	r3, [r7, #8]
 8004e56:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004e58:	4a48      	ldr	r2, [pc, #288]	@ (8004f7c <HAL_GPIO_Init+0x2bc>)
 8004e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e5c:	089b      	lsrs	r3, r3, #2
 8004e5e:	3302      	adds	r3, #2
 8004e60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e64:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e68:	f003 0303 	and.w	r3, r3, #3
 8004e6c:	009b      	lsls	r3, r3, #2
 8004e6e:	220f      	movs	r2, #15
 8004e70:	fa02 f303 	lsl.w	r3, r2, r3
 8004e74:	43db      	mvns	r3, r3
 8004e76:	68fa      	ldr	r2, [r7, #12]
 8004e78:	4013      	ands	r3, r2
 8004e7a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	4a40      	ldr	r2, [pc, #256]	@ (8004f80 <HAL_GPIO_Init+0x2c0>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d013      	beq.n	8004eac <HAL_GPIO_Init+0x1ec>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	4a3f      	ldr	r2, [pc, #252]	@ (8004f84 <HAL_GPIO_Init+0x2c4>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d00d      	beq.n	8004ea8 <HAL_GPIO_Init+0x1e8>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	4a3e      	ldr	r2, [pc, #248]	@ (8004f88 <HAL_GPIO_Init+0x2c8>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d007      	beq.n	8004ea4 <HAL_GPIO_Init+0x1e4>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	4a3d      	ldr	r2, [pc, #244]	@ (8004f8c <HAL_GPIO_Init+0x2cc>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d101      	bne.n	8004ea0 <HAL_GPIO_Init+0x1e0>
 8004e9c:	2303      	movs	r3, #3
 8004e9e:	e006      	b.n	8004eae <HAL_GPIO_Init+0x1ee>
 8004ea0:	2304      	movs	r3, #4
 8004ea2:	e004      	b.n	8004eae <HAL_GPIO_Init+0x1ee>
 8004ea4:	2302      	movs	r3, #2
 8004ea6:	e002      	b.n	8004eae <HAL_GPIO_Init+0x1ee>
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	e000      	b.n	8004eae <HAL_GPIO_Init+0x1ee>
 8004eac:	2300      	movs	r3, #0
 8004eae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004eb0:	f002 0203 	and.w	r2, r2, #3
 8004eb4:	0092      	lsls	r2, r2, #2
 8004eb6:	4093      	lsls	r3, r2
 8004eb8:	68fa      	ldr	r2, [r7, #12]
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004ebe:	492f      	ldr	r1, [pc, #188]	@ (8004f7c <HAL_GPIO_Init+0x2bc>)
 8004ec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ec2:	089b      	lsrs	r3, r3, #2
 8004ec4:	3302      	adds	r3, #2
 8004ec6:	68fa      	ldr	r2, [r7, #12]
 8004ec8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d006      	beq.n	8004ee6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004ed8:	4b2d      	ldr	r3, [pc, #180]	@ (8004f90 <HAL_GPIO_Init+0x2d0>)
 8004eda:	681a      	ldr	r2, [r3, #0]
 8004edc:	492c      	ldr	r1, [pc, #176]	@ (8004f90 <HAL_GPIO_Init+0x2d0>)
 8004ede:	69bb      	ldr	r3, [r7, #24]
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	600b      	str	r3, [r1, #0]
 8004ee4:	e006      	b.n	8004ef4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004ee6:	4b2a      	ldr	r3, [pc, #168]	@ (8004f90 <HAL_GPIO_Init+0x2d0>)
 8004ee8:	681a      	ldr	r2, [r3, #0]
 8004eea:	69bb      	ldr	r3, [r7, #24]
 8004eec:	43db      	mvns	r3, r3
 8004eee:	4928      	ldr	r1, [pc, #160]	@ (8004f90 <HAL_GPIO_Init+0x2d0>)
 8004ef0:	4013      	ands	r3, r2
 8004ef2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d006      	beq.n	8004f0e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004f00:	4b23      	ldr	r3, [pc, #140]	@ (8004f90 <HAL_GPIO_Init+0x2d0>)
 8004f02:	685a      	ldr	r2, [r3, #4]
 8004f04:	4922      	ldr	r1, [pc, #136]	@ (8004f90 <HAL_GPIO_Init+0x2d0>)
 8004f06:	69bb      	ldr	r3, [r7, #24]
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	604b      	str	r3, [r1, #4]
 8004f0c:	e006      	b.n	8004f1c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004f0e:	4b20      	ldr	r3, [pc, #128]	@ (8004f90 <HAL_GPIO_Init+0x2d0>)
 8004f10:	685a      	ldr	r2, [r3, #4]
 8004f12:	69bb      	ldr	r3, [r7, #24]
 8004f14:	43db      	mvns	r3, r3
 8004f16:	491e      	ldr	r1, [pc, #120]	@ (8004f90 <HAL_GPIO_Init+0x2d0>)
 8004f18:	4013      	ands	r3, r2
 8004f1a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d006      	beq.n	8004f36 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004f28:	4b19      	ldr	r3, [pc, #100]	@ (8004f90 <HAL_GPIO_Init+0x2d0>)
 8004f2a:	689a      	ldr	r2, [r3, #8]
 8004f2c:	4918      	ldr	r1, [pc, #96]	@ (8004f90 <HAL_GPIO_Init+0x2d0>)
 8004f2e:	69bb      	ldr	r3, [r7, #24]
 8004f30:	4313      	orrs	r3, r2
 8004f32:	608b      	str	r3, [r1, #8]
 8004f34:	e006      	b.n	8004f44 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004f36:	4b16      	ldr	r3, [pc, #88]	@ (8004f90 <HAL_GPIO_Init+0x2d0>)
 8004f38:	689a      	ldr	r2, [r3, #8]
 8004f3a:	69bb      	ldr	r3, [r7, #24]
 8004f3c:	43db      	mvns	r3, r3
 8004f3e:	4914      	ldr	r1, [pc, #80]	@ (8004f90 <HAL_GPIO_Init+0x2d0>)
 8004f40:	4013      	ands	r3, r2
 8004f42:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d021      	beq.n	8004f94 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004f50:	4b0f      	ldr	r3, [pc, #60]	@ (8004f90 <HAL_GPIO_Init+0x2d0>)
 8004f52:	68da      	ldr	r2, [r3, #12]
 8004f54:	490e      	ldr	r1, [pc, #56]	@ (8004f90 <HAL_GPIO_Init+0x2d0>)
 8004f56:	69bb      	ldr	r3, [r7, #24]
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	60cb      	str	r3, [r1, #12]
 8004f5c:	e021      	b.n	8004fa2 <HAL_GPIO_Init+0x2e2>
 8004f5e:	bf00      	nop
 8004f60:	10320000 	.word	0x10320000
 8004f64:	10310000 	.word	0x10310000
 8004f68:	10220000 	.word	0x10220000
 8004f6c:	10210000 	.word	0x10210000
 8004f70:	10120000 	.word	0x10120000
 8004f74:	10110000 	.word	0x10110000
 8004f78:	40021000 	.word	0x40021000
 8004f7c:	40010000 	.word	0x40010000
 8004f80:	40010800 	.word	0x40010800
 8004f84:	40010c00 	.word	0x40010c00
 8004f88:	40011000 	.word	0x40011000
 8004f8c:	40011400 	.word	0x40011400
 8004f90:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004f94:	4b0b      	ldr	r3, [pc, #44]	@ (8004fc4 <HAL_GPIO_Init+0x304>)
 8004f96:	68da      	ldr	r2, [r3, #12]
 8004f98:	69bb      	ldr	r3, [r7, #24]
 8004f9a:	43db      	mvns	r3, r3
 8004f9c:	4909      	ldr	r1, [pc, #36]	@ (8004fc4 <HAL_GPIO_Init+0x304>)
 8004f9e:	4013      	ands	r3, r2
 8004fa0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8004fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fa4:	3301      	adds	r3, #1
 8004fa6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	681a      	ldr	r2, [r3, #0]
 8004fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fae:	fa22 f303 	lsr.w	r3, r2, r3
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	f47f ae8e 	bne.w	8004cd4 <HAL_GPIO_Init+0x14>
  }
}
 8004fb8:	bf00      	nop
 8004fba:	bf00      	nop
 8004fbc:	372c      	adds	r7, #44	@ 0x2c
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bc80      	pop	{r7}
 8004fc2:	4770      	bx	lr
 8004fc4:	40010400 	.word	0x40010400

08004fc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b083      	sub	sp, #12
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
 8004fd0:	460b      	mov	r3, r1
 8004fd2:	807b      	strh	r3, [r7, #2]
 8004fd4:	4613      	mov	r3, r2
 8004fd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004fd8:	787b      	ldrb	r3, [r7, #1]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d003      	beq.n	8004fe6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004fde:	887a      	ldrh	r2, [r7, #2]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004fe4:	e003      	b.n	8004fee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004fe6:	887b      	ldrh	r3, [r7, #2]
 8004fe8:	041a      	lsls	r2, r3, #16
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	611a      	str	r2, [r3, #16]
}
 8004fee:	bf00      	nop
 8004ff0:	370c      	adds	r7, #12
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bc80      	pop	{r7}
 8004ff6:	4770      	bx	lr

08004ff8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b085      	sub	sp, #20
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
 8005000:	460b      	mov	r3, r1
 8005002:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	68db      	ldr	r3, [r3, #12]
 8005008:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800500a:	887a      	ldrh	r2, [r7, #2]
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	4013      	ands	r3, r2
 8005010:	041a      	lsls	r2, r3, #16
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	43d9      	mvns	r1, r3
 8005016:	887b      	ldrh	r3, [r7, #2]
 8005018:	400b      	ands	r3, r1
 800501a:	431a      	orrs	r2, r3
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	611a      	str	r2, [r3, #16]
}
 8005020:	bf00      	nop
 8005022:	3714      	adds	r7, #20
 8005024:	46bd      	mov	sp, r7
 8005026:	bc80      	pop	{r7}
 8005028:	4770      	bx	lr
	...

0800502c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b086      	sub	sp, #24
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d101      	bne.n	800503e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800503a:	2301      	movs	r3, #1
 800503c:	e272      	b.n	8005524 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f003 0301 	and.w	r3, r3, #1
 8005046:	2b00      	cmp	r3, #0
 8005048:	f000 8087 	beq.w	800515a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800504c:	4b92      	ldr	r3, [pc, #584]	@ (8005298 <HAL_RCC_OscConfig+0x26c>)
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	f003 030c 	and.w	r3, r3, #12
 8005054:	2b04      	cmp	r3, #4
 8005056:	d00c      	beq.n	8005072 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005058:	4b8f      	ldr	r3, [pc, #572]	@ (8005298 <HAL_RCC_OscConfig+0x26c>)
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	f003 030c 	and.w	r3, r3, #12
 8005060:	2b08      	cmp	r3, #8
 8005062:	d112      	bne.n	800508a <HAL_RCC_OscConfig+0x5e>
 8005064:	4b8c      	ldr	r3, [pc, #560]	@ (8005298 <HAL_RCC_OscConfig+0x26c>)
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800506c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005070:	d10b      	bne.n	800508a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005072:	4b89      	ldr	r3, [pc, #548]	@ (8005298 <HAL_RCC_OscConfig+0x26c>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800507a:	2b00      	cmp	r3, #0
 800507c:	d06c      	beq.n	8005158 <HAL_RCC_OscConfig+0x12c>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d168      	bne.n	8005158 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	e24c      	b.n	8005524 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005092:	d106      	bne.n	80050a2 <HAL_RCC_OscConfig+0x76>
 8005094:	4b80      	ldr	r3, [pc, #512]	@ (8005298 <HAL_RCC_OscConfig+0x26c>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a7f      	ldr	r2, [pc, #508]	@ (8005298 <HAL_RCC_OscConfig+0x26c>)
 800509a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800509e:	6013      	str	r3, [r2, #0]
 80050a0:	e02e      	b.n	8005100 <HAL_RCC_OscConfig+0xd4>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d10c      	bne.n	80050c4 <HAL_RCC_OscConfig+0x98>
 80050aa:	4b7b      	ldr	r3, [pc, #492]	@ (8005298 <HAL_RCC_OscConfig+0x26c>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a7a      	ldr	r2, [pc, #488]	@ (8005298 <HAL_RCC_OscConfig+0x26c>)
 80050b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80050b4:	6013      	str	r3, [r2, #0]
 80050b6:	4b78      	ldr	r3, [pc, #480]	@ (8005298 <HAL_RCC_OscConfig+0x26c>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a77      	ldr	r2, [pc, #476]	@ (8005298 <HAL_RCC_OscConfig+0x26c>)
 80050bc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80050c0:	6013      	str	r3, [r2, #0]
 80050c2:	e01d      	b.n	8005100 <HAL_RCC_OscConfig+0xd4>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80050cc:	d10c      	bne.n	80050e8 <HAL_RCC_OscConfig+0xbc>
 80050ce:	4b72      	ldr	r3, [pc, #456]	@ (8005298 <HAL_RCC_OscConfig+0x26c>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a71      	ldr	r2, [pc, #452]	@ (8005298 <HAL_RCC_OscConfig+0x26c>)
 80050d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80050d8:	6013      	str	r3, [r2, #0]
 80050da:	4b6f      	ldr	r3, [pc, #444]	@ (8005298 <HAL_RCC_OscConfig+0x26c>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a6e      	ldr	r2, [pc, #440]	@ (8005298 <HAL_RCC_OscConfig+0x26c>)
 80050e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050e4:	6013      	str	r3, [r2, #0]
 80050e6:	e00b      	b.n	8005100 <HAL_RCC_OscConfig+0xd4>
 80050e8:	4b6b      	ldr	r3, [pc, #428]	@ (8005298 <HAL_RCC_OscConfig+0x26c>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a6a      	ldr	r2, [pc, #424]	@ (8005298 <HAL_RCC_OscConfig+0x26c>)
 80050ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80050f2:	6013      	str	r3, [r2, #0]
 80050f4:	4b68      	ldr	r3, [pc, #416]	@ (8005298 <HAL_RCC_OscConfig+0x26c>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a67      	ldr	r2, [pc, #412]	@ (8005298 <HAL_RCC_OscConfig+0x26c>)
 80050fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80050fe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d013      	beq.n	8005130 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005108:	f7ff fcc8 	bl	8004a9c <HAL_GetTick>
 800510c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800510e:	e008      	b.n	8005122 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005110:	f7ff fcc4 	bl	8004a9c <HAL_GetTick>
 8005114:	4602      	mov	r2, r0
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	1ad3      	subs	r3, r2, r3
 800511a:	2b64      	cmp	r3, #100	@ 0x64
 800511c:	d901      	bls.n	8005122 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800511e:	2303      	movs	r3, #3
 8005120:	e200      	b.n	8005524 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005122:	4b5d      	ldr	r3, [pc, #372]	@ (8005298 <HAL_RCC_OscConfig+0x26c>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800512a:	2b00      	cmp	r3, #0
 800512c:	d0f0      	beq.n	8005110 <HAL_RCC_OscConfig+0xe4>
 800512e:	e014      	b.n	800515a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005130:	f7ff fcb4 	bl	8004a9c <HAL_GetTick>
 8005134:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005136:	e008      	b.n	800514a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005138:	f7ff fcb0 	bl	8004a9c <HAL_GetTick>
 800513c:	4602      	mov	r2, r0
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	1ad3      	subs	r3, r2, r3
 8005142:	2b64      	cmp	r3, #100	@ 0x64
 8005144:	d901      	bls.n	800514a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005146:	2303      	movs	r3, #3
 8005148:	e1ec      	b.n	8005524 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800514a:	4b53      	ldr	r3, [pc, #332]	@ (8005298 <HAL_RCC_OscConfig+0x26c>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005152:	2b00      	cmp	r3, #0
 8005154:	d1f0      	bne.n	8005138 <HAL_RCC_OscConfig+0x10c>
 8005156:	e000      	b.n	800515a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005158:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f003 0302 	and.w	r3, r3, #2
 8005162:	2b00      	cmp	r3, #0
 8005164:	d063      	beq.n	800522e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005166:	4b4c      	ldr	r3, [pc, #304]	@ (8005298 <HAL_RCC_OscConfig+0x26c>)
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	f003 030c 	and.w	r3, r3, #12
 800516e:	2b00      	cmp	r3, #0
 8005170:	d00b      	beq.n	800518a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005172:	4b49      	ldr	r3, [pc, #292]	@ (8005298 <HAL_RCC_OscConfig+0x26c>)
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	f003 030c 	and.w	r3, r3, #12
 800517a:	2b08      	cmp	r3, #8
 800517c:	d11c      	bne.n	80051b8 <HAL_RCC_OscConfig+0x18c>
 800517e:	4b46      	ldr	r3, [pc, #280]	@ (8005298 <HAL_RCC_OscConfig+0x26c>)
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005186:	2b00      	cmp	r3, #0
 8005188:	d116      	bne.n	80051b8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800518a:	4b43      	ldr	r3, [pc, #268]	@ (8005298 <HAL_RCC_OscConfig+0x26c>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f003 0302 	and.w	r3, r3, #2
 8005192:	2b00      	cmp	r3, #0
 8005194:	d005      	beq.n	80051a2 <HAL_RCC_OscConfig+0x176>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	691b      	ldr	r3, [r3, #16]
 800519a:	2b01      	cmp	r3, #1
 800519c:	d001      	beq.n	80051a2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800519e:	2301      	movs	r3, #1
 80051a0:	e1c0      	b.n	8005524 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051a2:	4b3d      	ldr	r3, [pc, #244]	@ (8005298 <HAL_RCC_OscConfig+0x26c>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	695b      	ldr	r3, [r3, #20]
 80051ae:	00db      	lsls	r3, r3, #3
 80051b0:	4939      	ldr	r1, [pc, #228]	@ (8005298 <HAL_RCC_OscConfig+0x26c>)
 80051b2:	4313      	orrs	r3, r2
 80051b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051b6:	e03a      	b.n	800522e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	691b      	ldr	r3, [r3, #16]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d020      	beq.n	8005202 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80051c0:	4b36      	ldr	r3, [pc, #216]	@ (800529c <HAL_RCC_OscConfig+0x270>)
 80051c2:	2201      	movs	r2, #1
 80051c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051c6:	f7ff fc69 	bl	8004a9c <HAL_GetTick>
 80051ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051cc:	e008      	b.n	80051e0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051ce:	f7ff fc65 	bl	8004a9c <HAL_GetTick>
 80051d2:	4602      	mov	r2, r0
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	1ad3      	subs	r3, r2, r3
 80051d8:	2b02      	cmp	r3, #2
 80051da:	d901      	bls.n	80051e0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80051dc:	2303      	movs	r3, #3
 80051de:	e1a1      	b.n	8005524 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051e0:	4b2d      	ldr	r3, [pc, #180]	@ (8005298 <HAL_RCC_OscConfig+0x26c>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f003 0302 	and.w	r3, r3, #2
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d0f0      	beq.n	80051ce <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051ec:	4b2a      	ldr	r3, [pc, #168]	@ (8005298 <HAL_RCC_OscConfig+0x26c>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	695b      	ldr	r3, [r3, #20]
 80051f8:	00db      	lsls	r3, r3, #3
 80051fa:	4927      	ldr	r1, [pc, #156]	@ (8005298 <HAL_RCC_OscConfig+0x26c>)
 80051fc:	4313      	orrs	r3, r2
 80051fe:	600b      	str	r3, [r1, #0]
 8005200:	e015      	b.n	800522e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005202:	4b26      	ldr	r3, [pc, #152]	@ (800529c <HAL_RCC_OscConfig+0x270>)
 8005204:	2200      	movs	r2, #0
 8005206:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005208:	f7ff fc48 	bl	8004a9c <HAL_GetTick>
 800520c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800520e:	e008      	b.n	8005222 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005210:	f7ff fc44 	bl	8004a9c <HAL_GetTick>
 8005214:	4602      	mov	r2, r0
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	1ad3      	subs	r3, r2, r3
 800521a:	2b02      	cmp	r3, #2
 800521c:	d901      	bls.n	8005222 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800521e:	2303      	movs	r3, #3
 8005220:	e180      	b.n	8005524 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005222:	4b1d      	ldr	r3, [pc, #116]	@ (8005298 <HAL_RCC_OscConfig+0x26c>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f003 0302 	and.w	r3, r3, #2
 800522a:	2b00      	cmp	r3, #0
 800522c:	d1f0      	bne.n	8005210 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f003 0308 	and.w	r3, r3, #8
 8005236:	2b00      	cmp	r3, #0
 8005238:	d03a      	beq.n	80052b0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	699b      	ldr	r3, [r3, #24]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d019      	beq.n	8005276 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005242:	4b17      	ldr	r3, [pc, #92]	@ (80052a0 <HAL_RCC_OscConfig+0x274>)
 8005244:	2201      	movs	r2, #1
 8005246:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005248:	f7ff fc28 	bl	8004a9c <HAL_GetTick>
 800524c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800524e:	e008      	b.n	8005262 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005250:	f7ff fc24 	bl	8004a9c <HAL_GetTick>
 8005254:	4602      	mov	r2, r0
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	1ad3      	subs	r3, r2, r3
 800525a:	2b02      	cmp	r3, #2
 800525c:	d901      	bls.n	8005262 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800525e:	2303      	movs	r3, #3
 8005260:	e160      	b.n	8005524 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005262:	4b0d      	ldr	r3, [pc, #52]	@ (8005298 <HAL_RCC_OscConfig+0x26c>)
 8005264:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005266:	f003 0302 	and.w	r3, r3, #2
 800526a:	2b00      	cmp	r3, #0
 800526c:	d0f0      	beq.n	8005250 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800526e:	2001      	movs	r0, #1
 8005270:	f000 fad8 	bl	8005824 <RCC_Delay>
 8005274:	e01c      	b.n	80052b0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005276:	4b0a      	ldr	r3, [pc, #40]	@ (80052a0 <HAL_RCC_OscConfig+0x274>)
 8005278:	2200      	movs	r2, #0
 800527a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800527c:	f7ff fc0e 	bl	8004a9c <HAL_GetTick>
 8005280:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005282:	e00f      	b.n	80052a4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005284:	f7ff fc0a 	bl	8004a9c <HAL_GetTick>
 8005288:	4602      	mov	r2, r0
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	1ad3      	subs	r3, r2, r3
 800528e:	2b02      	cmp	r3, #2
 8005290:	d908      	bls.n	80052a4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005292:	2303      	movs	r3, #3
 8005294:	e146      	b.n	8005524 <HAL_RCC_OscConfig+0x4f8>
 8005296:	bf00      	nop
 8005298:	40021000 	.word	0x40021000
 800529c:	42420000 	.word	0x42420000
 80052a0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052a4:	4b92      	ldr	r3, [pc, #584]	@ (80054f0 <HAL_RCC_OscConfig+0x4c4>)
 80052a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052a8:	f003 0302 	and.w	r3, r3, #2
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d1e9      	bne.n	8005284 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f003 0304 	and.w	r3, r3, #4
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	f000 80a6 	beq.w	800540a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80052be:	2300      	movs	r3, #0
 80052c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80052c2:	4b8b      	ldr	r3, [pc, #556]	@ (80054f0 <HAL_RCC_OscConfig+0x4c4>)
 80052c4:	69db      	ldr	r3, [r3, #28]
 80052c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d10d      	bne.n	80052ea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052ce:	4b88      	ldr	r3, [pc, #544]	@ (80054f0 <HAL_RCC_OscConfig+0x4c4>)
 80052d0:	69db      	ldr	r3, [r3, #28]
 80052d2:	4a87      	ldr	r2, [pc, #540]	@ (80054f0 <HAL_RCC_OscConfig+0x4c4>)
 80052d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80052d8:	61d3      	str	r3, [r2, #28]
 80052da:	4b85      	ldr	r3, [pc, #532]	@ (80054f0 <HAL_RCC_OscConfig+0x4c4>)
 80052dc:	69db      	ldr	r3, [r3, #28]
 80052de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80052e2:	60bb      	str	r3, [r7, #8]
 80052e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80052e6:	2301      	movs	r3, #1
 80052e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052ea:	4b82      	ldr	r3, [pc, #520]	@ (80054f4 <HAL_RCC_OscConfig+0x4c8>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d118      	bne.n	8005328 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80052f6:	4b7f      	ldr	r3, [pc, #508]	@ (80054f4 <HAL_RCC_OscConfig+0x4c8>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a7e      	ldr	r2, [pc, #504]	@ (80054f4 <HAL_RCC_OscConfig+0x4c8>)
 80052fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005300:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005302:	f7ff fbcb 	bl	8004a9c <HAL_GetTick>
 8005306:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005308:	e008      	b.n	800531c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800530a:	f7ff fbc7 	bl	8004a9c <HAL_GetTick>
 800530e:	4602      	mov	r2, r0
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	1ad3      	subs	r3, r2, r3
 8005314:	2b64      	cmp	r3, #100	@ 0x64
 8005316:	d901      	bls.n	800531c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005318:	2303      	movs	r3, #3
 800531a:	e103      	b.n	8005524 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800531c:	4b75      	ldr	r3, [pc, #468]	@ (80054f4 <HAL_RCC_OscConfig+0x4c8>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005324:	2b00      	cmp	r3, #0
 8005326:	d0f0      	beq.n	800530a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	68db      	ldr	r3, [r3, #12]
 800532c:	2b01      	cmp	r3, #1
 800532e:	d106      	bne.n	800533e <HAL_RCC_OscConfig+0x312>
 8005330:	4b6f      	ldr	r3, [pc, #444]	@ (80054f0 <HAL_RCC_OscConfig+0x4c4>)
 8005332:	6a1b      	ldr	r3, [r3, #32]
 8005334:	4a6e      	ldr	r2, [pc, #440]	@ (80054f0 <HAL_RCC_OscConfig+0x4c4>)
 8005336:	f043 0301 	orr.w	r3, r3, #1
 800533a:	6213      	str	r3, [r2, #32]
 800533c:	e02d      	b.n	800539a <HAL_RCC_OscConfig+0x36e>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	68db      	ldr	r3, [r3, #12]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d10c      	bne.n	8005360 <HAL_RCC_OscConfig+0x334>
 8005346:	4b6a      	ldr	r3, [pc, #424]	@ (80054f0 <HAL_RCC_OscConfig+0x4c4>)
 8005348:	6a1b      	ldr	r3, [r3, #32]
 800534a:	4a69      	ldr	r2, [pc, #420]	@ (80054f0 <HAL_RCC_OscConfig+0x4c4>)
 800534c:	f023 0301 	bic.w	r3, r3, #1
 8005350:	6213      	str	r3, [r2, #32]
 8005352:	4b67      	ldr	r3, [pc, #412]	@ (80054f0 <HAL_RCC_OscConfig+0x4c4>)
 8005354:	6a1b      	ldr	r3, [r3, #32]
 8005356:	4a66      	ldr	r2, [pc, #408]	@ (80054f0 <HAL_RCC_OscConfig+0x4c4>)
 8005358:	f023 0304 	bic.w	r3, r3, #4
 800535c:	6213      	str	r3, [r2, #32]
 800535e:	e01c      	b.n	800539a <HAL_RCC_OscConfig+0x36e>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	68db      	ldr	r3, [r3, #12]
 8005364:	2b05      	cmp	r3, #5
 8005366:	d10c      	bne.n	8005382 <HAL_RCC_OscConfig+0x356>
 8005368:	4b61      	ldr	r3, [pc, #388]	@ (80054f0 <HAL_RCC_OscConfig+0x4c4>)
 800536a:	6a1b      	ldr	r3, [r3, #32]
 800536c:	4a60      	ldr	r2, [pc, #384]	@ (80054f0 <HAL_RCC_OscConfig+0x4c4>)
 800536e:	f043 0304 	orr.w	r3, r3, #4
 8005372:	6213      	str	r3, [r2, #32]
 8005374:	4b5e      	ldr	r3, [pc, #376]	@ (80054f0 <HAL_RCC_OscConfig+0x4c4>)
 8005376:	6a1b      	ldr	r3, [r3, #32]
 8005378:	4a5d      	ldr	r2, [pc, #372]	@ (80054f0 <HAL_RCC_OscConfig+0x4c4>)
 800537a:	f043 0301 	orr.w	r3, r3, #1
 800537e:	6213      	str	r3, [r2, #32]
 8005380:	e00b      	b.n	800539a <HAL_RCC_OscConfig+0x36e>
 8005382:	4b5b      	ldr	r3, [pc, #364]	@ (80054f0 <HAL_RCC_OscConfig+0x4c4>)
 8005384:	6a1b      	ldr	r3, [r3, #32]
 8005386:	4a5a      	ldr	r2, [pc, #360]	@ (80054f0 <HAL_RCC_OscConfig+0x4c4>)
 8005388:	f023 0301 	bic.w	r3, r3, #1
 800538c:	6213      	str	r3, [r2, #32]
 800538e:	4b58      	ldr	r3, [pc, #352]	@ (80054f0 <HAL_RCC_OscConfig+0x4c4>)
 8005390:	6a1b      	ldr	r3, [r3, #32]
 8005392:	4a57      	ldr	r2, [pc, #348]	@ (80054f0 <HAL_RCC_OscConfig+0x4c4>)
 8005394:	f023 0304 	bic.w	r3, r3, #4
 8005398:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	68db      	ldr	r3, [r3, #12]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d015      	beq.n	80053ce <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053a2:	f7ff fb7b 	bl	8004a9c <HAL_GetTick>
 80053a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053a8:	e00a      	b.n	80053c0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053aa:	f7ff fb77 	bl	8004a9c <HAL_GetTick>
 80053ae:	4602      	mov	r2, r0
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	1ad3      	subs	r3, r2, r3
 80053b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d901      	bls.n	80053c0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80053bc:	2303      	movs	r3, #3
 80053be:	e0b1      	b.n	8005524 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053c0:	4b4b      	ldr	r3, [pc, #300]	@ (80054f0 <HAL_RCC_OscConfig+0x4c4>)
 80053c2:	6a1b      	ldr	r3, [r3, #32]
 80053c4:	f003 0302 	and.w	r3, r3, #2
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d0ee      	beq.n	80053aa <HAL_RCC_OscConfig+0x37e>
 80053cc:	e014      	b.n	80053f8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053ce:	f7ff fb65 	bl	8004a9c <HAL_GetTick>
 80053d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053d4:	e00a      	b.n	80053ec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053d6:	f7ff fb61 	bl	8004a9c <HAL_GetTick>
 80053da:	4602      	mov	r2, r0
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	1ad3      	subs	r3, r2, r3
 80053e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d901      	bls.n	80053ec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80053e8:	2303      	movs	r3, #3
 80053ea:	e09b      	b.n	8005524 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053ec:	4b40      	ldr	r3, [pc, #256]	@ (80054f0 <HAL_RCC_OscConfig+0x4c4>)
 80053ee:	6a1b      	ldr	r3, [r3, #32]
 80053f0:	f003 0302 	and.w	r3, r3, #2
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d1ee      	bne.n	80053d6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80053f8:	7dfb      	ldrb	r3, [r7, #23]
 80053fa:	2b01      	cmp	r3, #1
 80053fc:	d105      	bne.n	800540a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053fe:	4b3c      	ldr	r3, [pc, #240]	@ (80054f0 <HAL_RCC_OscConfig+0x4c4>)
 8005400:	69db      	ldr	r3, [r3, #28]
 8005402:	4a3b      	ldr	r2, [pc, #236]	@ (80054f0 <HAL_RCC_OscConfig+0x4c4>)
 8005404:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005408:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	69db      	ldr	r3, [r3, #28]
 800540e:	2b00      	cmp	r3, #0
 8005410:	f000 8087 	beq.w	8005522 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005414:	4b36      	ldr	r3, [pc, #216]	@ (80054f0 <HAL_RCC_OscConfig+0x4c4>)
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	f003 030c 	and.w	r3, r3, #12
 800541c:	2b08      	cmp	r3, #8
 800541e:	d061      	beq.n	80054e4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	69db      	ldr	r3, [r3, #28]
 8005424:	2b02      	cmp	r3, #2
 8005426:	d146      	bne.n	80054b6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005428:	4b33      	ldr	r3, [pc, #204]	@ (80054f8 <HAL_RCC_OscConfig+0x4cc>)
 800542a:	2200      	movs	r2, #0
 800542c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800542e:	f7ff fb35 	bl	8004a9c <HAL_GetTick>
 8005432:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005434:	e008      	b.n	8005448 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005436:	f7ff fb31 	bl	8004a9c <HAL_GetTick>
 800543a:	4602      	mov	r2, r0
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	1ad3      	subs	r3, r2, r3
 8005440:	2b02      	cmp	r3, #2
 8005442:	d901      	bls.n	8005448 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005444:	2303      	movs	r3, #3
 8005446:	e06d      	b.n	8005524 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005448:	4b29      	ldr	r3, [pc, #164]	@ (80054f0 <HAL_RCC_OscConfig+0x4c4>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005450:	2b00      	cmp	r3, #0
 8005452:	d1f0      	bne.n	8005436 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6a1b      	ldr	r3, [r3, #32]
 8005458:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800545c:	d108      	bne.n	8005470 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800545e:	4b24      	ldr	r3, [pc, #144]	@ (80054f0 <HAL_RCC_OscConfig+0x4c4>)
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	689b      	ldr	r3, [r3, #8]
 800546a:	4921      	ldr	r1, [pc, #132]	@ (80054f0 <HAL_RCC_OscConfig+0x4c4>)
 800546c:	4313      	orrs	r3, r2
 800546e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005470:	4b1f      	ldr	r3, [pc, #124]	@ (80054f0 <HAL_RCC_OscConfig+0x4c4>)
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6a19      	ldr	r1, [r3, #32]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005480:	430b      	orrs	r3, r1
 8005482:	491b      	ldr	r1, [pc, #108]	@ (80054f0 <HAL_RCC_OscConfig+0x4c4>)
 8005484:	4313      	orrs	r3, r2
 8005486:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005488:	4b1b      	ldr	r3, [pc, #108]	@ (80054f8 <HAL_RCC_OscConfig+0x4cc>)
 800548a:	2201      	movs	r2, #1
 800548c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800548e:	f7ff fb05 	bl	8004a9c <HAL_GetTick>
 8005492:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005494:	e008      	b.n	80054a8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005496:	f7ff fb01 	bl	8004a9c <HAL_GetTick>
 800549a:	4602      	mov	r2, r0
 800549c:	693b      	ldr	r3, [r7, #16]
 800549e:	1ad3      	subs	r3, r2, r3
 80054a0:	2b02      	cmp	r3, #2
 80054a2:	d901      	bls.n	80054a8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80054a4:	2303      	movs	r3, #3
 80054a6:	e03d      	b.n	8005524 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80054a8:	4b11      	ldr	r3, [pc, #68]	@ (80054f0 <HAL_RCC_OscConfig+0x4c4>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d0f0      	beq.n	8005496 <HAL_RCC_OscConfig+0x46a>
 80054b4:	e035      	b.n	8005522 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054b6:	4b10      	ldr	r3, [pc, #64]	@ (80054f8 <HAL_RCC_OscConfig+0x4cc>)
 80054b8:	2200      	movs	r2, #0
 80054ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054bc:	f7ff faee 	bl	8004a9c <HAL_GetTick>
 80054c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80054c2:	e008      	b.n	80054d6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054c4:	f7ff faea 	bl	8004a9c <HAL_GetTick>
 80054c8:	4602      	mov	r2, r0
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	1ad3      	subs	r3, r2, r3
 80054ce:	2b02      	cmp	r3, #2
 80054d0:	d901      	bls.n	80054d6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80054d2:	2303      	movs	r3, #3
 80054d4:	e026      	b.n	8005524 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80054d6:	4b06      	ldr	r3, [pc, #24]	@ (80054f0 <HAL_RCC_OscConfig+0x4c4>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d1f0      	bne.n	80054c4 <HAL_RCC_OscConfig+0x498>
 80054e2:	e01e      	b.n	8005522 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	69db      	ldr	r3, [r3, #28]
 80054e8:	2b01      	cmp	r3, #1
 80054ea:	d107      	bne.n	80054fc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80054ec:	2301      	movs	r3, #1
 80054ee:	e019      	b.n	8005524 <HAL_RCC_OscConfig+0x4f8>
 80054f0:	40021000 	.word	0x40021000
 80054f4:	40007000 	.word	0x40007000
 80054f8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80054fc:	4b0b      	ldr	r3, [pc, #44]	@ (800552c <HAL_RCC_OscConfig+0x500>)
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6a1b      	ldr	r3, [r3, #32]
 800550c:	429a      	cmp	r2, r3
 800550e:	d106      	bne.n	800551e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800551a:	429a      	cmp	r2, r3
 800551c:	d001      	beq.n	8005522 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	e000      	b.n	8005524 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005522:	2300      	movs	r3, #0
}
 8005524:	4618      	mov	r0, r3
 8005526:	3718      	adds	r7, #24
 8005528:	46bd      	mov	sp, r7
 800552a:	bd80      	pop	{r7, pc}
 800552c:	40021000 	.word	0x40021000

08005530 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b084      	sub	sp, #16
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
 8005538:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d101      	bne.n	8005544 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005540:	2301      	movs	r3, #1
 8005542:	e0d0      	b.n	80056e6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005544:	4b6a      	ldr	r3, [pc, #424]	@ (80056f0 <HAL_RCC_ClockConfig+0x1c0>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f003 0307 	and.w	r3, r3, #7
 800554c:	683a      	ldr	r2, [r7, #0]
 800554e:	429a      	cmp	r2, r3
 8005550:	d910      	bls.n	8005574 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005552:	4b67      	ldr	r3, [pc, #412]	@ (80056f0 <HAL_RCC_ClockConfig+0x1c0>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f023 0207 	bic.w	r2, r3, #7
 800555a:	4965      	ldr	r1, [pc, #404]	@ (80056f0 <HAL_RCC_ClockConfig+0x1c0>)
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	4313      	orrs	r3, r2
 8005560:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005562:	4b63      	ldr	r3, [pc, #396]	@ (80056f0 <HAL_RCC_ClockConfig+0x1c0>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f003 0307 	and.w	r3, r3, #7
 800556a:	683a      	ldr	r2, [r7, #0]
 800556c:	429a      	cmp	r2, r3
 800556e:	d001      	beq.n	8005574 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005570:	2301      	movs	r3, #1
 8005572:	e0b8      	b.n	80056e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f003 0302 	and.w	r3, r3, #2
 800557c:	2b00      	cmp	r3, #0
 800557e:	d020      	beq.n	80055c2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f003 0304 	and.w	r3, r3, #4
 8005588:	2b00      	cmp	r3, #0
 800558a:	d005      	beq.n	8005598 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800558c:	4b59      	ldr	r3, [pc, #356]	@ (80056f4 <HAL_RCC_ClockConfig+0x1c4>)
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	4a58      	ldr	r2, [pc, #352]	@ (80056f4 <HAL_RCC_ClockConfig+0x1c4>)
 8005592:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005596:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f003 0308 	and.w	r3, r3, #8
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d005      	beq.n	80055b0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80055a4:	4b53      	ldr	r3, [pc, #332]	@ (80056f4 <HAL_RCC_ClockConfig+0x1c4>)
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	4a52      	ldr	r2, [pc, #328]	@ (80056f4 <HAL_RCC_ClockConfig+0x1c4>)
 80055aa:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80055ae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80055b0:	4b50      	ldr	r3, [pc, #320]	@ (80056f4 <HAL_RCC_ClockConfig+0x1c4>)
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	689b      	ldr	r3, [r3, #8]
 80055bc:	494d      	ldr	r1, [pc, #308]	@ (80056f4 <HAL_RCC_ClockConfig+0x1c4>)
 80055be:	4313      	orrs	r3, r2
 80055c0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f003 0301 	and.w	r3, r3, #1
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d040      	beq.n	8005650 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	2b01      	cmp	r3, #1
 80055d4:	d107      	bne.n	80055e6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055d6:	4b47      	ldr	r3, [pc, #284]	@ (80056f4 <HAL_RCC_ClockConfig+0x1c4>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d115      	bne.n	800560e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055e2:	2301      	movs	r3, #1
 80055e4:	e07f      	b.n	80056e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	2b02      	cmp	r3, #2
 80055ec:	d107      	bne.n	80055fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055ee:	4b41      	ldr	r3, [pc, #260]	@ (80056f4 <HAL_RCC_ClockConfig+0x1c4>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d109      	bne.n	800560e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055fa:	2301      	movs	r3, #1
 80055fc:	e073      	b.n	80056e6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055fe:	4b3d      	ldr	r3, [pc, #244]	@ (80056f4 <HAL_RCC_ClockConfig+0x1c4>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f003 0302 	and.w	r3, r3, #2
 8005606:	2b00      	cmp	r3, #0
 8005608:	d101      	bne.n	800560e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800560a:	2301      	movs	r3, #1
 800560c:	e06b      	b.n	80056e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800560e:	4b39      	ldr	r3, [pc, #228]	@ (80056f4 <HAL_RCC_ClockConfig+0x1c4>)
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	f023 0203 	bic.w	r2, r3, #3
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	4936      	ldr	r1, [pc, #216]	@ (80056f4 <HAL_RCC_ClockConfig+0x1c4>)
 800561c:	4313      	orrs	r3, r2
 800561e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005620:	f7ff fa3c 	bl	8004a9c <HAL_GetTick>
 8005624:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005626:	e00a      	b.n	800563e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005628:	f7ff fa38 	bl	8004a9c <HAL_GetTick>
 800562c:	4602      	mov	r2, r0
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	1ad3      	subs	r3, r2, r3
 8005632:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005636:	4293      	cmp	r3, r2
 8005638:	d901      	bls.n	800563e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800563a:	2303      	movs	r3, #3
 800563c:	e053      	b.n	80056e6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800563e:	4b2d      	ldr	r3, [pc, #180]	@ (80056f4 <HAL_RCC_ClockConfig+0x1c4>)
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	f003 020c 	and.w	r2, r3, #12
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	009b      	lsls	r3, r3, #2
 800564c:	429a      	cmp	r2, r3
 800564e:	d1eb      	bne.n	8005628 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005650:	4b27      	ldr	r3, [pc, #156]	@ (80056f0 <HAL_RCC_ClockConfig+0x1c0>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f003 0307 	and.w	r3, r3, #7
 8005658:	683a      	ldr	r2, [r7, #0]
 800565a:	429a      	cmp	r2, r3
 800565c:	d210      	bcs.n	8005680 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800565e:	4b24      	ldr	r3, [pc, #144]	@ (80056f0 <HAL_RCC_ClockConfig+0x1c0>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f023 0207 	bic.w	r2, r3, #7
 8005666:	4922      	ldr	r1, [pc, #136]	@ (80056f0 <HAL_RCC_ClockConfig+0x1c0>)
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	4313      	orrs	r3, r2
 800566c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800566e:	4b20      	ldr	r3, [pc, #128]	@ (80056f0 <HAL_RCC_ClockConfig+0x1c0>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f003 0307 	and.w	r3, r3, #7
 8005676:	683a      	ldr	r2, [r7, #0]
 8005678:	429a      	cmp	r2, r3
 800567a:	d001      	beq.n	8005680 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800567c:	2301      	movs	r3, #1
 800567e:	e032      	b.n	80056e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f003 0304 	and.w	r3, r3, #4
 8005688:	2b00      	cmp	r3, #0
 800568a:	d008      	beq.n	800569e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800568c:	4b19      	ldr	r3, [pc, #100]	@ (80056f4 <HAL_RCC_ClockConfig+0x1c4>)
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	68db      	ldr	r3, [r3, #12]
 8005698:	4916      	ldr	r1, [pc, #88]	@ (80056f4 <HAL_RCC_ClockConfig+0x1c4>)
 800569a:	4313      	orrs	r3, r2
 800569c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f003 0308 	and.w	r3, r3, #8
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d009      	beq.n	80056be <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80056aa:	4b12      	ldr	r3, [pc, #72]	@ (80056f4 <HAL_RCC_ClockConfig+0x1c4>)
 80056ac:	685b      	ldr	r3, [r3, #4]
 80056ae:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	691b      	ldr	r3, [r3, #16]
 80056b6:	00db      	lsls	r3, r3, #3
 80056b8:	490e      	ldr	r1, [pc, #56]	@ (80056f4 <HAL_RCC_ClockConfig+0x1c4>)
 80056ba:	4313      	orrs	r3, r2
 80056bc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80056be:	f000 f821 	bl	8005704 <HAL_RCC_GetSysClockFreq>
 80056c2:	4602      	mov	r2, r0
 80056c4:	4b0b      	ldr	r3, [pc, #44]	@ (80056f4 <HAL_RCC_ClockConfig+0x1c4>)
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	091b      	lsrs	r3, r3, #4
 80056ca:	f003 030f 	and.w	r3, r3, #15
 80056ce:	490a      	ldr	r1, [pc, #40]	@ (80056f8 <HAL_RCC_ClockConfig+0x1c8>)
 80056d0:	5ccb      	ldrb	r3, [r1, r3]
 80056d2:	fa22 f303 	lsr.w	r3, r2, r3
 80056d6:	4a09      	ldr	r2, [pc, #36]	@ (80056fc <HAL_RCC_ClockConfig+0x1cc>)
 80056d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80056da:	4b09      	ldr	r3, [pc, #36]	@ (8005700 <HAL_RCC_ClockConfig+0x1d0>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4618      	mov	r0, r3
 80056e0:	f7ff f99a 	bl	8004a18 <HAL_InitTick>

  return HAL_OK;
 80056e4:	2300      	movs	r3, #0
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	3710      	adds	r7, #16
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}
 80056ee:	bf00      	nop
 80056f0:	40022000 	.word	0x40022000
 80056f4:	40021000 	.word	0x40021000
 80056f8:	08006a8c 	.word	0x08006a8c
 80056fc:	20000004 	.word	0x20000004
 8005700:	20000008 	.word	0x20000008

08005704 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005704:	b490      	push	{r4, r7}
 8005706:	b08a      	sub	sp, #40	@ 0x28
 8005708:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800570a:	4b29      	ldr	r3, [pc, #164]	@ (80057b0 <HAL_RCC_GetSysClockFreq+0xac>)
 800570c:	1d3c      	adds	r4, r7, #4
 800570e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005710:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005714:	f240 2301 	movw	r3, #513	@ 0x201
 8005718:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800571a:	2300      	movs	r3, #0
 800571c:	61fb      	str	r3, [r7, #28]
 800571e:	2300      	movs	r3, #0
 8005720:	61bb      	str	r3, [r7, #24]
 8005722:	2300      	movs	r3, #0
 8005724:	627b      	str	r3, [r7, #36]	@ 0x24
 8005726:	2300      	movs	r3, #0
 8005728:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800572a:	2300      	movs	r3, #0
 800572c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800572e:	4b21      	ldr	r3, [pc, #132]	@ (80057b4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005734:	69fb      	ldr	r3, [r7, #28]
 8005736:	f003 030c 	and.w	r3, r3, #12
 800573a:	2b04      	cmp	r3, #4
 800573c:	d002      	beq.n	8005744 <HAL_RCC_GetSysClockFreq+0x40>
 800573e:	2b08      	cmp	r3, #8
 8005740:	d003      	beq.n	800574a <HAL_RCC_GetSysClockFreq+0x46>
 8005742:	e02b      	b.n	800579c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005744:	4b1c      	ldr	r3, [pc, #112]	@ (80057b8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005746:	623b      	str	r3, [r7, #32]
      break;
 8005748:	e02b      	b.n	80057a2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800574a:	69fb      	ldr	r3, [r7, #28]
 800574c:	0c9b      	lsrs	r3, r3, #18
 800574e:	f003 030f 	and.w	r3, r3, #15
 8005752:	3328      	adds	r3, #40	@ 0x28
 8005754:	443b      	add	r3, r7
 8005756:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800575a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800575c:	69fb      	ldr	r3, [r7, #28]
 800575e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005762:	2b00      	cmp	r3, #0
 8005764:	d012      	beq.n	800578c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005766:	4b13      	ldr	r3, [pc, #76]	@ (80057b4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005768:	685b      	ldr	r3, [r3, #4]
 800576a:	0c5b      	lsrs	r3, r3, #17
 800576c:	f003 0301 	and.w	r3, r3, #1
 8005770:	3328      	adds	r3, #40	@ 0x28
 8005772:	443b      	add	r3, r7
 8005774:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005778:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	4a0e      	ldr	r2, [pc, #56]	@ (80057b8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800577e:	fb03 f202 	mul.w	r2, r3, r2
 8005782:	69bb      	ldr	r3, [r7, #24]
 8005784:	fbb2 f3f3 	udiv	r3, r2, r3
 8005788:	627b      	str	r3, [r7, #36]	@ 0x24
 800578a:	e004      	b.n	8005796 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	4a0b      	ldr	r2, [pc, #44]	@ (80057bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8005790:	fb02 f303 	mul.w	r3, r2, r3
 8005794:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      sysclockfreq = pllclk;
 8005796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005798:	623b      	str	r3, [r7, #32]
      break;
 800579a:	e002      	b.n	80057a2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800579c:	4b06      	ldr	r3, [pc, #24]	@ (80057b8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800579e:	623b      	str	r3, [r7, #32]
      break;
 80057a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80057a2:	6a3b      	ldr	r3, [r7, #32]
}
 80057a4:	4618      	mov	r0, r3
 80057a6:	3728      	adds	r7, #40	@ 0x28
 80057a8:	46bd      	mov	sp, r7
 80057aa:	bc90      	pop	{r4, r7}
 80057ac:	4770      	bx	lr
 80057ae:	bf00      	nop
 80057b0:	08006a7c 	.word	0x08006a7c
 80057b4:	40021000 	.word	0x40021000
 80057b8:	007a1200 	.word	0x007a1200
 80057bc:	003d0900 	.word	0x003d0900

080057c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80057c0:	b480      	push	{r7}
 80057c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80057c4:	4b02      	ldr	r3, [pc, #8]	@ (80057d0 <HAL_RCC_GetHCLKFreq+0x10>)
 80057c6:	681b      	ldr	r3, [r3, #0]
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bc80      	pop	{r7}
 80057ce:	4770      	bx	lr
 80057d0:	20000004 	.word	0x20000004

080057d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80057d8:	f7ff fff2 	bl	80057c0 <HAL_RCC_GetHCLKFreq>
 80057dc:	4602      	mov	r2, r0
 80057de:	4b05      	ldr	r3, [pc, #20]	@ (80057f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80057e0:	685b      	ldr	r3, [r3, #4]
 80057e2:	0a1b      	lsrs	r3, r3, #8
 80057e4:	f003 0307 	and.w	r3, r3, #7
 80057e8:	4903      	ldr	r1, [pc, #12]	@ (80057f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80057ea:	5ccb      	ldrb	r3, [r1, r3]
 80057ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	bd80      	pop	{r7, pc}
 80057f4:	40021000 	.word	0x40021000
 80057f8:	08006a9c 	.word	0x08006a9c

080057fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005800:	f7ff ffde 	bl	80057c0 <HAL_RCC_GetHCLKFreq>
 8005804:	4602      	mov	r2, r0
 8005806:	4b05      	ldr	r3, [pc, #20]	@ (800581c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005808:	685b      	ldr	r3, [r3, #4]
 800580a:	0adb      	lsrs	r3, r3, #11
 800580c:	f003 0307 	and.w	r3, r3, #7
 8005810:	4903      	ldr	r1, [pc, #12]	@ (8005820 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005812:	5ccb      	ldrb	r3, [r1, r3]
 8005814:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005818:	4618      	mov	r0, r3
 800581a:	bd80      	pop	{r7, pc}
 800581c:	40021000 	.word	0x40021000
 8005820:	08006a9c 	.word	0x08006a9c

08005824 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005824:	b480      	push	{r7}
 8005826:	b085      	sub	sp, #20
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800582c:	4b0a      	ldr	r3, [pc, #40]	@ (8005858 <RCC_Delay+0x34>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a0a      	ldr	r2, [pc, #40]	@ (800585c <RCC_Delay+0x38>)
 8005832:	fba2 2303 	umull	r2, r3, r2, r3
 8005836:	0a5b      	lsrs	r3, r3, #9
 8005838:	687a      	ldr	r2, [r7, #4]
 800583a:	fb02 f303 	mul.w	r3, r2, r3
 800583e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005840:	bf00      	nop
  }
  while (Delay --);
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	1e5a      	subs	r2, r3, #1
 8005846:	60fa      	str	r2, [r7, #12]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d1f9      	bne.n	8005840 <RCC_Delay+0x1c>
}
 800584c:	bf00      	nop
 800584e:	bf00      	nop
 8005850:	3714      	adds	r7, #20
 8005852:	46bd      	mov	sp, r7
 8005854:	bc80      	pop	{r7}
 8005856:	4770      	bx	lr
 8005858:	20000004 	.word	0x20000004
 800585c:	10624dd3 	.word	0x10624dd3

08005860 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b082      	sub	sp, #8
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d101      	bne.n	8005872 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800586e:	2301      	movs	r3, #1
 8005870:	e03f      	b.n	80058f2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005878:	b2db      	uxtb	r3, r3
 800587a:	2b00      	cmp	r3, #0
 800587c:	d106      	bne.n	800588c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2200      	movs	r2, #0
 8005882:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	f7fe ff64 	bl	8004754 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2224      	movs	r2, #36	@ 0x24
 8005890:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	68da      	ldr	r2, [r3, #12]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80058a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80058a4:	6878      	ldr	r0, [r7, #4]
 80058a6:	f000 f905 	bl	8005ab4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	691a      	ldr	r2, [r3, #16]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80058b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	695a      	ldr	r2, [r3, #20]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80058c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	68da      	ldr	r2, [r3, #12]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80058d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2200      	movs	r2, #0
 80058de:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2220      	movs	r2, #32
 80058e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2220      	movs	r2, #32
 80058ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80058f0:	2300      	movs	r3, #0
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	3708      	adds	r7, #8
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}

080058fa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058fa:	b580      	push	{r7, lr}
 80058fc:	b08a      	sub	sp, #40	@ 0x28
 80058fe:	af02      	add	r7, sp, #8
 8005900:	60f8      	str	r0, [r7, #12]
 8005902:	60b9      	str	r1, [r7, #8]
 8005904:	603b      	str	r3, [r7, #0]
 8005906:	4613      	mov	r3, r2
 8005908:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800590a:	2300      	movs	r3, #0
 800590c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005914:	b2db      	uxtb	r3, r3
 8005916:	2b20      	cmp	r3, #32
 8005918:	d17c      	bne.n	8005a14 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d002      	beq.n	8005926 <HAL_UART_Transmit+0x2c>
 8005920:	88fb      	ldrh	r3, [r7, #6]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d101      	bne.n	800592a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005926:	2301      	movs	r3, #1
 8005928:	e075      	b.n	8005a16 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005930:	2b01      	cmp	r3, #1
 8005932:	d101      	bne.n	8005938 <HAL_UART_Transmit+0x3e>
 8005934:	2302      	movs	r3, #2
 8005936:	e06e      	b.n	8005a16 <HAL_UART_Transmit+0x11c>
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2201      	movs	r2, #1
 800593c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2200      	movs	r2, #0
 8005944:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	2221      	movs	r2, #33	@ 0x21
 800594a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800594e:	f7ff f8a5 	bl	8004a9c <HAL_GetTick>
 8005952:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	88fa      	ldrh	r2, [r7, #6]
 8005958:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	88fa      	ldrh	r2, [r7, #6]
 800595e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	689b      	ldr	r3, [r3, #8]
 8005964:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005968:	d108      	bne.n	800597c <HAL_UART_Transmit+0x82>
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	691b      	ldr	r3, [r3, #16]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d104      	bne.n	800597c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005972:	2300      	movs	r3, #0
 8005974:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	61bb      	str	r3, [r7, #24]
 800597a:	e003      	b.n	8005984 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005980:	2300      	movs	r3, #0
 8005982:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	2200      	movs	r2, #0
 8005988:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 800598c:	e02a      	b.n	80059e4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	9300      	str	r3, [sp, #0]
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	2200      	movs	r2, #0
 8005996:	2180      	movs	r1, #128	@ 0x80
 8005998:	68f8      	ldr	r0, [r7, #12]
 800599a:	f000 f840 	bl	8005a1e <UART_WaitOnFlagUntilTimeout>
 800599e:	4603      	mov	r3, r0
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d001      	beq.n	80059a8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80059a4:	2303      	movs	r3, #3
 80059a6:	e036      	b.n	8005a16 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80059a8:	69fb      	ldr	r3, [r7, #28]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d10b      	bne.n	80059c6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80059ae:	69bb      	ldr	r3, [r7, #24]
 80059b0:	881b      	ldrh	r3, [r3, #0]
 80059b2:	461a      	mov	r2, r3
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80059bc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80059be:	69bb      	ldr	r3, [r7, #24]
 80059c0:	3302      	adds	r3, #2
 80059c2:	61bb      	str	r3, [r7, #24]
 80059c4:	e007      	b.n	80059d6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80059c6:	69fb      	ldr	r3, [r7, #28]
 80059c8:	781a      	ldrb	r2, [r3, #0]
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80059d0:	69fb      	ldr	r3, [r7, #28]
 80059d2:	3301      	adds	r3, #1
 80059d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80059da:	b29b      	uxth	r3, r3
 80059dc:	3b01      	subs	r3, #1
 80059de:	b29a      	uxth	r2, r3
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80059e8:	b29b      	uxth	r3, r3
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d1cf      	bne.n	800598e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	9300      	str	r3, [sp, #0]
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	2200      	movs	r2, #0
 80059f6:	2140      	movs	r1, #64	@ 0x40
 80059f8:	68f8      	ldr	r0, [r7, #12]
 80059fa:	f000 f810 	bl	8005a1e <UART_WaitOnFlagUntilTimeout>
 80059fe:	4603      	mov	r3, r0
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d001      	beq.n	8005a08 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005a04:	2303      	movs	r3, #3
 8005a06:	e006      	b.n	8005a16 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	2220      	movs	r2, #32
 8005a0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8005a10:	2300      	movs	r3, #0
 8005a12:	e000      	b.n	8005a16 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005a14:	2302      	movs	r3, #2
  }
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	3720      	adds	r7, #32
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}

08005a1e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005a1e:	b580      	push	{r7, lr}
 8005a20:	b084      	sub	sp, #16
 8005a22:	af00      	add	r7, sp, #0
 8005a24:	60f8      	str	r0, [r7, #12]
 8005a26:	60b9      	str	r1, [r7, #8]
 8005a28:	603b      	str	r3, [r7, #0]
 8005a2a:	4613      	mov	r3, r2
 8005a2c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a2e:	e02c      	b.n	8005a8a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a30:	69bb      	ldr	r3, [r7, #24]
 8005a32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a36:	d028      	beq.n	8005a8a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005a38:	69bb      	ldr	r3, [r7, #24]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d007      	beq.n	8005a4e <UART_WaitOnFlagUntilTimeout+0x30>
 8005a3e:	f7ff f82d 	bl	8004a9c <HAL_GetTick>
 8005a42:	4602      	mov	r2, r0
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	1ad3      	subs	r3, r2, r3
 8005a48:	69ba      	ldr	r2, [r7, #24]
 8005a4a:	429a      	cmp	r2, r3
 8005a4c:	d21d      	bcs.n	8005a8a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	68da      	ldr	r2, [r3, #12]
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
 8005a5c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	695a      	ldr	r2, [r3, #20]
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f022 0201 	bic.w	r2, r2, #1
 8005a6c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2220      	movs	r2, #32
 8005a72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2220      	movs	r2, #32
 8005a7a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	2200      	movs	r2, #0
 8005a82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 8005a86:	2303      	movs	r3, #3
 8005a88:	e00f      	b.n	8005aaa <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	681a      	ldr	r2, [r3, #0]
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	4013      	ands	r3, r2
 8005a94:	68ba      	ldr	r2, [r7, #8]
 8005a96:	429a      	cmp	r2, r3
 8005a98:	bf0c      	ite	eq
 8005a9a:	2301      	moveq	r3, #1
 8005a9c:	2300      	movne	r3, #0
 8005a9e:	b2db      	uxtb	r3, r3
 8005aa0:	461a      	mov	r2, r3
 8005aa2:	79fb      	ldrb	r3, [r7, #7]
 8005aa4:	429a      	cmp	r2, r3
 8005aa6:	d0c3      	beq.n	8005a30 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005aa8:	2300      	movs	r3, #0
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	3710      	adds	r7, #16
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}
	...

08005ab4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b084      	sub	sp, #16
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	691b      	ldr	r3, [r3, #16]
 8005ac2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	68da      	ldr	r2, [r3, #12]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	430a      	orrs	r2, r1
 8005ad0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	689a      	ldr	r2, [r3, #8]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	691b      	ldr	r3, [r3, #16]
 8005ada:	431a      	orrs	r2, r3
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	695b      	ldr	r3, [r3, #20]
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	68db      	ldr	r3, [r3, #12]
 8005aea:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8005aee:	f023 030c 	bic.w	r3, r3, #12
 8005af2:	687a      	ldr	r2, [r7, #4]
 8005af4:	6812      	ldr	r2, [r2, #0]
 8005af6:	68b9      	ldr	r1, [r7, #8]
 8005af8:	430b      	orrs	r3, r1
 8005afa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	695b      	ldr	r3, [r3, #20]
 8005b02:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	699a      	ldr	r2, [r3, #24]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	430a      	orrs	r2, r1
 8005b10:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4a2c      	ldr	r2, [pc, #176]	@ (8005bc8 <UART_SetConfig+0x114>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d103      	bne.n	8005b24 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005b1c:	f7ff fe6e 	bl	80057fc <HAL_RCC_GetPCLK2Freq>
 8005b20:	60f8      	str	r0, [r7, #12]
 8005b22:	e002      	b.n	8005b2a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005b24:	f7ff fe56 	bl	80057d4 <HAL_RCC_GetPCLK1Freq>
 8005b28:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005b2a:	68fa      	ldr	r2, [r7, #12]
 8005b2c:	4613      	mov	r3, r2
 8005b2e:	009b      	lsls	r3, r3, #2
 8005b30:	4413      	add	r3, r2
 8005b32:	009a      	lsls	r2, r3, #2
 8005b34:	441a      	add	r2, r3
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	685b      	ldr	r3, [r3, #4]
 8005b3a:	009b      	lsls	r3, r3, #2
 8005b3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b40:	4a22      	ldr	r2, [pc, #136]	@ (8005bcc <UART_SetConfig+0x118>)
 8005b42:	fba2 2303 	umull	r2, r3, r2, r3
 8005b46:	095b      	lsrs	r3, r3, #5
 8005b48:	0119      	lsls	r1, r3, #4
 8005b4a:	68fa      	ldr	r2, [r7, #12]
 8005b4c:	4613      	mov	r3, r2
 8005b4e:	009b      	lsls	r3, r3, #2
 8005b50:	4413      	add	r3, r2
 8005b52:	009a      	lsls	r2, r3, #2
 8005b54:	441a      	add	r2, r3
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	009b      	lsls	r3, r3, #2
 8005b5c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005b60:	4b1a      	ldr	r3, [pc, #104]	@ (8005bcc <UART_SetConfig+0x118>)
 8005b62:	fba3 0302 	umull	r0, r3, r3, r2
 8005b66:	095b      	lsrs	r3, r3, #5
 8005b68:	2064      	movs	r0, #100	@ 0x64
 8005b6a:	fb00 f303 	mul.w	r3, r0, r3
 8005b6e:	1ad3      	subs	r3, r2, r3
 8005b70:	011b      	lsls	r3, r3, #4
 8005b72:	3332      	adds	r3, #50	@ 0x32
 8005b74:	4a15      	ldr	r2, [pc, #84]	@ (8005bcc <UART_SetConfig+0x118>)
 8005b76:	fba2 2303 	umull	r2, r3, r2, r3
 8005b7a:	095b      	lsrs	r3, r3, #5
 8005b7c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005b80:	4419      	add	r1, r3
 8005b82:	68fa      	ldr	r2, [r7, #12]
 8005b84:	4613      	mov	r3, r2
 8005b86:	009b      	lsls	r3, r3, #2
 8005b88:	4413      	add	r3, r2
 8005b8a:	009a      	lsls	r2, r3, #2
 8005b8c:	441a      	add	r2, r3
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	009b      	lsls	r3, r3, #2
 8005b94:	fbb2 f2f3 	udiv	r2, r2, r3
 8005b98:	4b0c      	ldr	r3, [pc, #48]	@ (8005bcc <UART_SetConfig+0x118>)
 8005b9a:	fba3 0302 	umull	r0, r3, r3, r2
 8005b9e:	095b      	lsrs	r3, r3, #5
 8005ba0:	2064      	movs	r0, #100	@ 0x64
 8005ba2:	fb00 f303 	mul.w	r3, r0, r3
 8005ba6:	1ad3      	subs	r3, r2, r3
 8005ba8:	011b      	lsls	r3, r3, #4
 8005baa:	3332      	adds	r3, #50	@ 0x32
 8005bac:	4a07      	ldr	r2, [pc, #28]	@ (8005bcc <UART_SetConfig+0x118>)
 8005bae:	fba2 2303 	umull	r2, r3, r2, r3
 8005bb2:	095b      	lsrs	r3, r3, #5
 8005bb4:	f003 020f 	and.w	r2, r3, #15
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	440a      	add	r2, r1
 8005bbe:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005bc0:	bf00      	nop
 8005bc2:	3710      	adds	r7, #16
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	bd80      	pop	{r7, pc}
 8005bc8:	40013800 	.word	0x40013800
 8005bcc:	51eb851f 	.word	0x51eb851f

08005bd0 <std>:
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	b510      	push	{r4, lr}
 8005bd4:	4604      	mov	r4, r0
 8005bd6:	e9c0 3300 	strd	r3, r3, [r0]
 8005bda:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005bde:	6083      	str	r3, [r0, #8]
 8005be0:	8181      	strh	r1, [r0, #12]
 8005be2:	6643      	str	r3, [r0, #100]	@ 0x64
 8005be4:	81c2      	strh	r2, [r0, #14]
 8005be6:	6183      	str	r3, [r0, #24]
 8005be8:	4619      	mov	r1, r3
 8005bea:	2208      	movs	r2, #8
 8005bec:	305c      	adds	r0, #92	@ 0x5c
 8005bee:	f000 f906 	bl	8005dfe <memset>
 8005bf2:	4b0d      	ldr	r3, [pc, #52]	@ (8005c28 <std+0x58>)
 8005bf4:	6224      	str	r4, [r4, #32]
 8005bf6:	6263      	str	r3, [r4, #36]	@ 0x24
 8005bf8:	4b0c      	ldr	r3, [pc, #48]	@ (8005c2c <std+0x5c>)
 8005bfa:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005bfc:	4b0c      	ldr	r3, [pc, #48]	@ (8005c30 <std+0x60>)
 8005bfe:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005c00:	4b0c      	ldr	r3, [pc, #48]	@ (8005c34 <std+0x64>)
 8005c02:	6323      	str	r3, [r4, #48]	@ 0x30
 8005c04:	4b0c      	ldr	r3, [pc, #48]	@ (8005c38 <std+0x68>)
 8005c06:	429c      	cmp	r4, r3
 8005c08:	d006      	beq.n	8005c18 <std+0x48>
 8005c0a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005c0e:	4294      	cmp	r4, r2
 8005c10:	d002      	beq.n	8005c18 <std+0x48>
 8005c12:	33d0      	adds	r3, #208	@ 0xd0
 8005c14:	429c      	cmp	r4, r3
 8005c16:	d105      	bne.n	8005c24 <std+0x54>
 8005c18:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005c1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c20:	f000 b966 	b.w	8005ef0 <__retarget_lock_init_recursive>
 8005c24:	bd10      	pop	{r4, pc}
 8005c26:	bf00      	nop
 8005c28:	08005d79 	.word	0x08005d79
 8005c2c:	08005d9b 	.word	0x08005d9b
 8005c30:	08005dd3 	.word	0x08005dd3
 8005c34:	08005df7 	.word	0x08005df7
 8005c38:	200000d4 	.word	0x200000d4

08005c3c <stdio_exit_handler>:
 8005c3c:	4a02      	ldr	r2, [pc, #8]	@ (8005c48 <stdio_exit_handler+0xc>)
 8005c3e:	4903      	ldr	r1, [pc, #12]	@ (8005c4c <stdio_exit_handler+0x10>)
 8005c40:	4803      	ldr	r0, [pc, #12]	@ (8005c50 <stdio_exit_handler+0x14>)
 8005c42:	f000 b869 	b.w	8005d18 <_fwalk_sglue>
 8005c46:	bf00      	nop
 8005c48:	20000010 	.word	0x20000010
 8005c4c:	08006789 	.word	0x08006789
 8005c50:	20000020 	.word	0x20000020

08005c54 <cleanup_stdio>:
 8005c54:	6841      	ldr	r1, [r0, #4]
 8005c56:	4b0c      	ldr	r3, [pc, #48]	@ (8005c88 <cleanup_stdio+0x34>)
 8005c58:	b510      	push	{r4, lr}
 8005c5a:	4299      	cmp	r1, r3
 8005c5c:	4604      	mov	r4, r0
 8005c5e:	d001      	beq.n	8005c64 <cleanup_stdio+0x10>
 8005c60:	f000 fd92 	bl	8006788 <_fflush_r>
 8005c64:	68a1      	ldr	r1, [r4, #8]
 8005c66:	4b09      	ldr	r3, [pc, #36]	@ (8005c8c <cleanup_stdio+0x38>)
 8005c68:	4299      	cmp	r1, r3
 8005c6a:	d002      	beq.n	8005c72 <cleanup_stdio+0x1e>
 8005c6c:	4620      	mov	r0, r4
 8005c6e:	f000 fd8b 	bl	8006788 <_fflush_r>
 8005c72:	68e1      	ldr	r1, [r4, #12]
 8005c74:	4b06      	ldr	r3, [pc, #24]	@ (8005c90 <cleanup_stdio+0x3c>)
 8005c76:	4299      	cmp	r1, r3
 8005c78:	d004      	beq.n	8005c84 <cleanup_stdio+0x30>
 8005c7a:	4620      	mov	r0, r4
 8005c7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c80:	f000 bd82 	b.w	8006788 <_fflush_r>
 8005c84:	bd10      	pop	{r4, pc}
 8005c86:	bf00      	nop
 8005c88:	200000d4 	.word	0x200000d4
 8005c8c:	2000013c 	.word	0x2000013c
 8005c90:	200001a4 	.word	0x200001a4

08005c94 <global_stdio_init.part.0>:
 8005c94:	b510      	push	{r4, lr}
 8005c96:	4b0b      	ldr	r3, [pc, #44]	@ (8005cc4 <global_stdio_init.part.0+0x30>)
 8005c98:	4c0b      	ldr	r4, [pc, #44]	@ (8005cc8 <global_stdio_init.part.0+0x34>)
 8005c9a:	4a0c      	ldr	r2, [pc, #48]	@ (8005ccc <global_stdio_init.part.0+0x38>)
 8005c9c:	4620      	mov	r0, r4
 8005c9e:	601a      	str	r2, [r3, #0]
 8005ca0:	2104      	movs	r1, #4
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	f7ff ff94 	bl	8005bd0 <std>
 8005ca8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005cac:	2201      	movs	r2, #1
 8005cae:	2109      	movs	r1, #9
 8005cb0:	f7ff ff8e 	bl	8005bd0 <std>
 8005cb4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005cb8:	2202      	movs	r2, #2
 8005cba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005cbe:	2112      	movs	r1, #18
 8005cc0:	f7ff bf86 	b.w	8005bd0 <std>
 8005cc4:	2000020c 	.word	0x2000020c
 8005cc8:	200000d4 	.word	0x200000d4
 8005ccc:	08005c3d 	.word	0x08005c3d

08005cd0 <__sfp_lock_acquire>:
 8005cd0:	4801      	ldr	r0, [pc, #4]	@ (8005cd8 <__sfp_lock_acquire+0x8>)
 8005cd2:	f000 b90e 	b.w	8005ef2 <__retarget_lock_acquire_recursive>
 8005cd6:	bf00      	nop
 8005cd8:	20000215 	.word	0x20000215

08005cdc <__sfp_lock_release>:
 8005cdc:	4801      	ldr	r0, [pc, #4]	@ (8005ce4 <__sfp_lock_release+0x8>)
 8005cde:	f000 b909 	b.w	8005ef4 <__retarget_lock_release_recursive>
 8005ce2:	bf00      	nop
 8005ce4:	20000215 	.word	0x20000215

08005ce8 <__sinit>:
 8005ce8:	b510      	push	{r4, lr}
 8005cea:	4604      	mov	r4, r0
 8005cec:	f7ff fff0 	bl	8005cd0 <__sfp_lock_acquire>
 8005cf0:	6a23      	ldr	r3, [r4, #32]
 8005cf2:	b11b      	cbz	r3, 8005cfc <__sinit+0x14>
 8005cf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005cf8:	f7ff bff0 	b.w	8005cdc <__sfp_lock_release>
 8005cfc:	4b04      	ldr	r3, [pc, #16]	@ (8005d10 <__sinit+0x28>)
 8005cfe:	6223      	str	r3, [r4, #32]
 8005d00:	4b04      	ldr	r3, [pc, #16]	@ (8005d14 <__sinit+0x2c>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d1f5      	bne.n	8005cf4 <__sinit+0xc>
 8005d08:	f7ff ffc4 	bl	8005c94 <global_stdio_init.part.0>
 8005d0c:	e7f2      	b.n	8005cf4 <__sinit+0xc>
 8005d0e:	bf00      	nop
 8005d10:	08005c55 	.word	0x08005c55
 8005d14:	2000020c 	.word	0x2000020c

08005d18 <_fwalk_sglue>:
 8005d18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d1c:	4607      	mov	r7, r0
 8005d1e:	4688      	mov	r8, r1
 8005d20:	4614      	mov	r4, r2
 8005d22:	2600      	movs	r6, #0
 8005d24:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005d28:	f1b9 0901 	subs.w	r9, r9, #1
 8005d2c:	d505      	bpl.n	8005d3a <_fwalk_sglue+0x22>
 8005d2e:	6824      	ldr	r4, [r4, #0]
 8005d30:	2c00      	cmp	r4, #0
 8005d32:	d1f7      	bne.n	8005d24 <_fwalk_sglue+0xc>
 8005d34:	4630      	mov	r0, r6
 8005d36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d3a:	89ab      	ldrh	r3, [r5, #12]
 8005d3c:	2b01      	cmp	r3, #1
 8005d3e:	d907      	bls.n	8005d50 <_fwalk_sglue+0x38>
 8005d40:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005d44:	3301      	adds	r3, #1
 8005d46:	d003      	beq.n	8005d50 <_fwalk_sglue+0x38>
 8005d48:	4629      	mov	r1, r5
 8005d4a:	4638      	mov	r0, r7
 8005d4c:	47c0      	blx	r8
 8005d4e:	4306      	orrs	r6, r0
 8005d50:	3568      	adds	r5, #104	@ 0x68
 8005d52:	e7e9      	b.n	8005d28 <_fwalk_sglue+0x10>

08005d54 <iprintf>:
 8005d54:	b40f      	push	{r0, r1, r2, r3}
 8005d56:	b507      	push	{r0, r1, r2, lr}
 8005d58:	4906      	ldr	r1, [pc, #24]	@ (8005d74 <iprintf+0x20>)
 8005d5a:	ab04      	add	r3, sp, #16
 8005d5c:	6808      	ldr	r0, [r1, #0]
 8005d5e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d62:	6881      	ldr	r1, [r0, #8]
 8005d64:	9301      	str	r3, [sp, #4]
 8005d66:	f000 f9e5 	bl	8006134 <_vfiprintf_r>
 8005d6a:	b003      	add	sp, #12
 8005d6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005d70:	b004      	add	sp, #16
 8005d72:	4770      	bx	lr
 8005d74:	2000001c 	.word	0x2000001c

08005d78 <__sread>:
 8005d78:	b510      	push	{r4, lr}
 8005d7a:	460c      	mov	r4, r1
 8005d7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d80:	f000 f868 	bl	8005e54 <_read_r>
 8005d84:	2800      	cmp	r0, #0
 8005d86:	bfab      	itete	ge
 8005d88:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005d8a:	89a3      	ldrhlt	r3, [r4, #12]
 8005d8c:	181b      	addge	r3, r3, r0
 8005d8e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005d92:	bfac      	ite	ge
 8005d94:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005d96:	81a3      	strhlt	r3, [r4, #12]
 8005d98:	bd10      	pop	{r4, pc}

08005d9a <__swrite>:
 8005d9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d9e:	461f      	mov	r7, r3
 8005da0:	898b      	ldrh	r3, [r1, #12]
 8005da2:	4605      	mov	r5, r0
 8005da4:	05db      	lsls	r3, r3, #23
 8005da6:	460c      	mov	r4, r1
 8005da8:	4616      	mov	r6, r2
 8005daa:	d505      	bpl.n	8005db8 <__swrite+0x1e>
 8005dac:	2302      	movs	r3, #2
 8005dae:	2200      	movs	r2, #0
 8005db0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005db4:	f000 f83c 	bl	8005e30 <_lseek_r>
 8005db8:	89a3      	ldrh	r3, [r4, #12]
 8005dba:	4632      	mov	r2, r6
 8005dbc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005dc0:	81a3      	strh	r3, [r4, #12]
 8005dc2:	4628      	mov	r0, r5
 8005dc4:	463b      	mov	r3, r7
 8005dc6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005dca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005dce:	f000 b853 	b.w	8005e78 <_write_r>

08005dd2 <__sseek>:
 8005dd2:	b510      	push	{r4, lr}
 8005dd4:	460c      	mov	r4, r1
 8005dd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005dda:	f000 f829 	bl	8005e30 <_lseek_r>
 8005dde:	1c43      	adds	r3, r0, #1
 8005de0:	89a3      	ldrh	r3, [r4, #12]
 8005de2:	bf15      	itete	ne
 8005de4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005de6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005dea:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005dee:	81a3      	strheq	r3, [r4, #12]
 8005df0:	bf18      	it	ne
 8005df2:	81a3      	strhne	r3, [r4, #12]
 8005df4:	bd10      	pop	{r4, pc}

08005df6 <__sclose>:
 8005df6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005dfa:	f000 b809 	b.w	8005e10 <_close_r>

08005dfe <memset>:
 8005dfe:	4603      	mov	r3, r0
 8005e00:	4402      	add	r2, r0
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d100      	bne.n	8005e08 <memset+0xa>
 8005e06:	4770      	bx	lr
 8005e08:	f803 1b01 	strb.w	r1, [r3], #1
 8005e0c:	e7f9      	b.n	8005e02 <memset+0x4>
	...

08005e10 <_close_r>:
 8005e10:	b538      	push	{r3, r4, r5, lr}
 8005e12:	2300      	movs	r3, #0
 8005e14:	4d05      	ldr	r5, [pc, #20]	@ (8005e2c <_close_r+0x1c>)
 8005e16:	4604      	mov	r4, r0
 8005e18:	4608      	mov	r0, r1
 8005e1a:	602b      	str	r3, [r5, #0]
 8005e1c:	f7fe fd4b 	bl	80048b6 <_close>
 8005e20:	1c43      	adds	r3, r0, #1
 8005e22:	d102      	bne.n	8005e2a <_close_r+0x1a>
 8005e24:	682b      	ldr	r3, [r5, #0]
 8005e26:	b103      	cbz	r3, 8005e2a <_close_r+0x1a>
 8005e28:	6023      	str	r3, [r4, #0]
 8005e2a:	bd38      	pop	{r3, r4, r5, pc}
 8005e2c:	20000210 	.word	0x20000210

08005e30 <_lseek_r>:
 8005e30:	b538      	push	{r3, r4, r5, lr}
 8005e32:	4604      	mov	r4, r0
 8005e34:	4608      	mov	r0, r1
 8005e36:	4611      	mov	r1, r2
 8005e38:	2200      	movs	r2, #0
 8005e3a:	4d05      	ldr	r5, [pc, #20]	@ (8005e50 <_lseek_r+0x20>)
 8005e3c:	602a      	str	r2, [r5, #0]
 8005e3e:	461a      	mov	r2, r3
 8005e40:	f7fe fd5d 	bl	80048fe <_lseek>
 8005e44:	1c43      	adds	r3, r0, #1
 8005e46:	d102      	bne.n	8005e4e <_lseek_r+0x1e>
 8005e48:	682b      	ldr	r3, [r5, #0]
 8005e4a:	b103      	cbz	r3, 8005e4e <_lseek_r+0x1e>
 8005e4c:	6023      	str	r3, [r4, #0]
 8005e4e:	bd38      	pop	{r3, r4, r5, pc}
 8005e50:	20000210 	.word	0x20000210

08005e54 <_read_r>:
 8005e54:	b538      	push	{r3, r4, r5, lr}
 8005e56:	4604      	mov	r4, r0
 8005e58:	4608      	mov	r0, r1
 8005e5a:	4611      	mov	r1, r2
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	4d05      	ldr	r5, [pc, #20]	@ (8005e74 <_read_r+0x20>)
 8005e60:	602a      	str	r2, [r5, #0]
 8005e62:	461a      	mov	r2, r3
 8005e64:	f7fe fcee 	bl	8004844 <_read>
 8005e68:	1c43      	adds	r3, r0, #1
 8005e6a:	d102      	bne.n	8005e72 <_read_r+0x1e>
 8005e6c:	682b      	ldr	r3, [r5, #0]
 8005e6e:	b103      	cbz	r3, 8005e72 <_read_r+0x1e>
 8005e70:	6023      	str	r3, [r4, #0]
 8005e72:	bd38      	pop	{r3, r4, r5, pc}
 8005e74:	20000210 	.word	0x20000210

08005e78 <_write_r>:
 8005e78:	b538      	push	{r3, r4, r5, lr}
 8005e7a:	4604      	mov	r4, r0
 8005e7c:	4608      	mov	r0, r1
 8005e7e:	4611      	mov	r1, r2
 8005e80:	2200      	movs	r2, #0
 8005e82:	4d05      	ldr	r5, [pc, #20]	@ (8005e98 <_write_r+0x20>)
 8005e84:	602a      	str	r2, [r5, #0]
 8005e86:	461a      	mov	r2, r3
 8005e88:	f7fe fcf9 	bl	800487e <_write>
 8005e8c:	1c43      	adds	r3, r0, #1
 8005e8e:	d102      	bne.n	8005e96 <_write_r+0x1e>
 8005e90:	682b      	ldr	r3, [r5, #0]
 8005e92:	b103      	cbz	r3, 8005e96 <_write_r+0x1e>
 8005e94:	6023      	str	r3, [r4, #0]
 8005e96:	bd38      	pop	{r3, r4, r5, pc}
 8005e98:	20000210 	.word	0x20000210

08005e9c <__errno>:
 8005e9c:	4b01      	ldr	r3, [pc, #4]	@ (8005ea4 <__errno+0x8>)
 8005e9e:	6818      	ldr	r0, [r3, #0]
 8005ea0:	4770      	bx	lr
 8005ea2:	bf00      	nop
 8005ea4:	2000001c 	.word	0x2000001c

08005ea8 <__libc_init_array>:
 8005ea8:	b570      	push	{r4, r5, r6, lr}
 8005eaa:	2600      	movs	r6, #0
 8005eac:	4d0c      	ldr	r5, [pc, #48]	@ (8005ee0 <__libc_init_array+0x38>)
 8005eae:	4c0d      	ldr	r4, [pc, #52]	@ (8005ee4 <__libc_init_array+0x3c>)
 8005eb0:	1b64      	subs	r4, r4, r5
 8005eb2:	10a4      	asrs	r4, r4, #2
 8005eb4:	42a6      	cmp	r6, r4
 8005eb6:	d109      	bne.n	8005ecc <__libc_init_array+0x24>
 8005eb8:	f000 fdc4 	bl	8006a44 <_init>
 8005ebc:	2600      	movs	r6, #0
 8005ebe:	4d0a      	ldr	r5, [pc, #40]	@ (8005ee8 <__libc_init_array+0x40>)
 8005ec0:	4c0a      	ldr	r4, [pc, #40]	@ (8005eec <__libc_init_array+0x44>)
 8005ec2:	1b64      	subs	r4, r4, r5
 8005ec4:	10a4      	asrs	r4, r4, #2
 8005ec6:	42a6      	cmp	r6, r4
 8005ec8:	d105      	bne.n	8005ed6 <__libc_init_array+0x2e>
 8005eca:	bd70      	pop	{r4, r5, r6, pc}
 8005ecc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ed0:	4798      	blx	r3
 8005ed2:	3601      	adds	r6, #1
 8005ed4:	e7ee      	b.n	8005eb4 <__libc_init_array+0xc>
 8005ed6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005eda:	4798      	blx	r3
 8005edc:	3601      	adds	r6, #1
 8005ede:	e7f2      	b.n	8005ec6 <__libc_init_array+0x1e>
 8005ee0:	08006ad8 	.word	0x08006ad8
 8005ee4:	08006ad8 	.word	0x08006ad8
 8005ee8:	08006ad8 	.word	0x08006ad8
 8005eec:	08006adc 	.word	0x08006adc

08005ef0 <__retarget_lock_init_recursive>:
 8005ef0:	4770      	bx	lr

08005ef2 <__retarget_lock_acquire_recursive>:
 8005ef2:	4770      	bx	lr

08005ef4 <__retarget_lock_release_recursive>:
 8005ef4:	4770      	bx	lr
	...

08005ef8 <_free_r>:
 8005ef8:	b538      	push	{r3, r4, r5, lr}
 8005efa:	4605      	mov	r5, r0
 8005efc:	2900      	cmp	r1, #0
 8005efe:	d040      	beq.n	8005f82 <_free_r+0x8a>
 8005f00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f04:	1f0c      	subs	r4, r1, #4
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	bfb8      	it	lt
 8005f0a:	18e4      	addlt	r4, r4, r3
 8005f0c:	f000 f8de 	bl	80060cc <__malloc_lock>
 8005f10:	4a1c      	ldr	r2, [pc, #112]	@ (8005f84 <_free_r+0x8c>)
 8005f12:	6813      	ldr	r3, [r2, #0]
 8005f14:	b933      	cbnz	r3, 8005f24 <_free_r+0x2c>
 8005f16:	6063      	str	r3, [r4, #4]
 8005f18:	6014      	str	r4, [r2, #0]
 8005f1a:	4628      	mov	r0, r5
 8005f1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005f20:	f000 b8da 	b.w	80060d8 <__malloc_unlock>
 8005f24:	42a3      	cmp	r3, r4
 8005f26:	d908      	bls.n	8005f3a <_free_r+0x42>
 8005f28:	6820      	ldr	r0, [r4, #0]
 8005f2a:	1821      	adds	r1, r4, r0
 8005f2c:	428b      	cmp	r3, r1
 8005f2e:	bf01      	itttt	eq
 8005f30:	6819      	ldreq	r1, [r3, #0]
 8005f32:	685b      	ldreq	r3, [r3, #4]
 8005f34:	1809      	addeq	r1, r1, r0
 8005f36:	6021      	streq	r1, [r4, #0]
 8005f38:	e7ed      	b.n	8005f16 <_free_r+0x1e>
 8005f3a:	461a      	mov	r2, r3
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	b10b      	cbz	r3, 8005f44 <_free_r+0x4c>
 8005f40:	42a3      	cmp	r3, r4
 8005f42:	d9fa      	bls.n	8005f3a <_free_r+0x42>
 8005f44:	6811      	ldr	r1, [r2, #0]
 8005f46:	1850      	adds	r0, r2, r1
 8005f48:	42a0      	cmp	r0, r4
 8005f4a:	d10b      	bne.n	8005f64 <_free_r+0x6c>
 8005f4c:	6820      	ldr	r0, [r4, #0]
 8005f4e:	4401      	add	r1, r0
 8005f50:	1850      	adds	r0, r2, r1
 8005f52:	4283      	cmp	r3, r0
 8005f54:	6011      	str	r1, [r2, #0]
 8005f56:	d1e0      	bne.n	8005f1a <_free_r+0x22>
 8005f58:	6818      	ldr	r0, [r3, #0]
 8005f5a:	685b      	ldr	r3, [r3, #4]
 8005f5c:	4408      	add	r0, r1
 8005f5e:	6010      	str	r0, [r2, #0]
 8005f60:	6053      	str	r3, [r2, #4]
 8005f62:	e7da      	b.n	8005f1a <_free_r+0x22>
 8005f64:	d902      	bls.n	8005f6c <_free_r+0x74>
 8005f66:	230c      	movs	r3, #12
 8005f68:	602b      	str	r3, [r5, #0]
 8005f6a:	e7d6      	b.n	8005f1a <_free_r+0x22>
 8005f6c:	6820      	ldr	r0, [r4, #0]
 8005f6e:	1821      	adds	r1, r4, r0
 8005f70:	428b      	cmp	r3, r1
 8005f72:	bf01      	itttt	eq
 8005f74:	6819      	ldreq	r1, [r3, #0]
 8005f76:	685b      	ldreq	r3, [r3, #4]
 8005f78:	1809      	addeq	r1, r1, r0
 8005f7a:	6021      	streq	r1, [r4, #0]
 8005f7c:	6063      	str	r3, [r4, #4]
 8005f7e:	6054      	str	r4, [r2, #4]
 8005f80:	e7cb      	b.n	8005f1a <_free_r+0x22>
 8005f82:	bd38      	pop	{r3, r4, r5, pc}
 8005f84:	2000021c 	.word	0x2000021c

08005f88 <sbrk_aligned>:
 8005f88:	b570      	push	{r4, r5, r6, lr}
 8005f8a:	4e0f      	ldr	r6, [pc, #60]	@ (8005fc8 <sbrk_aligned+0x40>)
 8005f8c:	460c      	mov	r4, r1
 8005f8e:	6831      	ldr	r1, [r6, #0]
 8005f90:	4605      	mov	r5, r0
 8005f92:	b911      	cbnz	r1, 8005f9a <sbrk_aligned+0x12>
 8005f94:	f000 fcb4 	bl	8006900 <_sbrk_r>
 8005f98:	6030      	str	r0, [r6, #0]
 8005f9a:	4621      	mov	r1, r4
 8005f9c:	4628      	mov	r0, r5
 8005f9e:	f000 fcaf 	bl	8006900 <_sbrk_r>
 8005fa2:	1c43      	adds	r3, r0, #1
 8005fa4:	d103      	bne.n	8005fae <sbrk_aligned+0x26>
 8005fa6:	f04f 34ff 	mov.w	r4, #4294967295
 8005faa:	4620      	mov	r0, r4
 8005fac:	bd70      	pop	{r4, r5, r6, pc}
 8005fae:	1cc4      	adds	r4, r0, #3
 8005fb0:	f024 0403 	bic.w	r4, r4, #3
 8005fb4:	42a0      	cmp	r0, r4
 8005fb6:	d0f8      	beq.n	8005faa <sbrk_aligned+0x22>
 8005fb8:	1a21      	subs	r1, r4, r0
 8005fba:	4628      	mov	r0, r5
 8005fbc:	f000 fca0 	bl	8006900 <_sbrk_r>
 8005fc0:	3001      	adds	r0, #1
 8005fc2:	d1f2      	bne.n	8005faa <sbrk_aligned+0x22>
 8005fc4:	e7ef      	b.n	8005fa6 <sbrk_aligned+0x1e>
 8005fc6:	bf00      	nop
 8005fc8:	20000218 	.word	0x20000218

08005fcc <_malloc_r>:
 8005fcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005fd0:	1ccd      	adds	r5, r1, #3
 8005fd2:	f025 0503 	bic.w	r5, r5, #3
 8005fd6:	3508      	adds	r5, #8
 8005fd8:	2d0c      	cmp	r5, #12
 8005fda:	bf38      	it	cc
 8005fdc:	250c      	movcc	r5, #12
 8005fde:	2d00      	cmp	r5, #0
 8005fe0:	4606      	mov	r6, r0
 8005fe2:	db01      	blt.n	8005fe8 <_malloc_r+0x1c>
 8005fe4:	42a9      	cmp	r1, r5
 8005fe6:	d904      	bls.n	8005ff2 <_malloc_r+0x26>
 8005fe8:	230c      	movs	r3, #12
 8005fea:	6033      	str	r3, [r6, #0]
 8005fec:	2000      	movs	r0, #0
 8005fee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ff2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80060c8 <_malloc_r+0xfc>
 8005ff6:	f000 f869 	bl	80060cc <__malloc_lock>
 8005ffa:	f8d8 3000 	ldr.w	r3, [r8]
 8005ffe:	461c      	mov	r4, r3
 8006000:	bb44      	cbnz	r4, 8006054 <_malloc_r+0x88>
 8006002:	4629      	mov	r1, r5
 8006004:	4630      	mov	r0, r6
 8006006:	f7ff ffbf 	bl	8005f88 <sbrk_aligned>
 800600a:	1c43      	adds	r3, r0, #1
 800600c:	4604      	mov	r4, r0
 800600e:	d158      	bne.n	80060c2 <_malloc_r+0xf6>
 8006010:	f8d8 4000 	ldr.w	r4, [r8]
 8006014:	4627      	mov	r7, r4
 8006016:	2f00      	cmp	r7, #0
 8006018:	d143      	bne.n	80060a2 <_malloc_r+0xd6>
 800601a:	2c00      	cmp	r4, #0
 800601c:	d04b      	beq.n	80060b6 <_malloc_r+0xea>
 800601e:	6823      	ldr	r3, [r4, #0]
 8006020:	4639      	mov	r1, r7
 8006022:	4630      	mov	r0, r6
 8006024:	eb04 0903 	add.w	r9, r4, r3
 8006028:	f000 fc6a 	bl	8006900 <_sbrk_r>
 800602c:	4581      	cmp	r9, r0
 800602e:	d142      	bne.n	80060b6 <_malloc_r+0xea>
 8006030:	6821      	ldr	r1, [r4, #0]
 8006032:	4630      	mov	r0, r6
 8006034:	1a6d      	subs	r5, r5, r1
 8006036:	4629      	mov	r1, r5
 8006038:	f7ff ffa6 	bl	8005f88 <sbrk_aligned>
 800603c:	3001      	adds	r0, #1
 800603e:	d03a      	beq.n	80060b6 <_malloc_r+0xea>
 8006040:	6823      	ldr	r3, [r4, #0]
 8006042:	442b      	add	r3, r5
 8006044:	6023      	str	r3, [r4, #0]
 8006046:	f8d8 3000 	ldr.w	r3, [r8]
 800604a:	685a      	ldr	r2, [r3, #4]
 800604c:	bb62      	cbnz	r2, 80060a8 <_malloc_r+0xdc>
 800604e:	f8c8 7000 	str.w	r7, [r8]
 8006052:	e00f      	b.n	8006074 <_malloc_r+0xa8>
 8006054:	6822      	ldr	r2, [r4, #0]
 8006056:	1b52      	subs	r2, r2, r5
 8006058:	d420      	bmi.n	800609c <_malloc_r+0xd0>
 800605a:	2a0b      	cmp	r2, #11
 800605c:	d917      	bls.n	800608e <_malloc_r+0xc2>
 800605e:	1961      	adds	r1, r4, r5
 8006060:	42a3      	cmp	r3, r4
 8006062:	6025      	str	r5, [r4, #0]
 8006064:	bf18      	it	ne
 8006066:	6059      	strne	r1, [r3, #4]
 8006068:	6863      	ldr	r3, [r4, #4]
 800606a:	bf08      	it	eq
 800606c:	f8c8 1000 	streq.w	r1, [r8]
 8006070:	5162      	str	r2, [r4, r5]
 8006072:	604b      	str	r3, [r1, #4]
 8006074:	4630      	mov	r0, r6
 8006076:	f000 f82f 	bl	80060d8 <__malloc_unlock>
 800607a:	f104 000b 	add.w	r0, r4, #11
 800607e:	1d23      	adds	r3, r4, #4
 8006080:	f020 0007 	bic.w	r0, r0, #7
 8006084:	1ac2      	subs	r2, r0, r3
 8006086:	bf1c      	itt	ne
 8006088:	1a1b      	subne	r3, r3, r0
 800608a:	50a3      	strne	r3, [r4, r2]
 800608c:	e7af      	b.n	8005fee <_malloc_r+0x22>
 800608e:	6862      	ldr	r2, [r4, #4]
 8006090:	42a3      	cmp	r3, r4
 8006092:	bf0c      	ite	eq
 8006094:	f8c8 2000 	streq.w	r2, [r8]
 8006098:	605a      	strne	r2, [r3, #4]
 800609a:	e7eb      	b.n	8006074 <_malloc_r+0xa8>
 800609c:	4623      	mov	r3, r4
 800609e:	6864      	ldr	r4, [r4, #4]
 80060a0:	e7ae      	b.n	8006000 <_malloc_r+0x34>
 80060a2:	463c      	mov	r4, r7
 80060a4:	687f      	ldr	r7, [r7, #4]
 80060a6:	e7b6      	b.n	8006016 <_malloc_r+0x4a>
 80060a8:	461a      	mov	r2, r3
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	42a3      	cmp	r3, r4
 80060ae:	d1fb      	bne.n	80060a8 <_malloc_r+0xdc>
 80060b0:	2300      	movs	r3, #0
 80060b2:	6053      	str	r3, [r2, #4]
 80060b4:	e7de      	b.n	8006074 <_malloc_r+0xa8>
 80060b6:	230c      	movs	r3, #12
 80060b8:	4630      	mov	r0, r6
 80060ba:	6033      	str	r3, [r6, #0]
 80060bc:	f000 f80c 	bl	80060d8 <__malloc_unlock>
 80060c0:	e794      	b.n	8005fec <_malloc_r+0x20>
 80060c2:	6005      	str	r5, [r0, #0]
 80060c4:	e7d6      	b.n	8006074 <_malloc_r+0xa8>
 80060c6:	bf00      	nop
 80060c8:	2000021c 	.word	0x2000021c

080060cc <__malloc_lock>:
 80060cc:	4801      	ldr	r0, [pc, #4]	@ (80060d4 <__malloc_lock+0x8>)
 80060ce:	f7ff bf10 	b.w	8005ef2 <__retarget_lock_acquire_recursive>
 80060d2:	bf00      	nop
 80060d4:	20000214 	.word	0x20000214

080060d8 <__malloc_unlock>:
 80060d8:	4801      	ldr	r0, [pc, #4]	@ (80060e0 <__malloc_unlock+0x8>)
 80060da:	f7ff bf0b 	b.w	8005ef4 <__retarget_lock_release_recursive>
 80060de:	bf00      	nop
 80060e0:	20000214 	.word	0x20000214

080060e4 <__sfputc_r>:
 80060e4:	6893      	ldr	r3, [r2, #8]
 80060e6:	b410      	push	{r4}
 80060e8:	3b01      	subs	r3, #1
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	6093      	str	r3, [r2, #8]
 80060ee:	da07      	bge.n	8006100 <__sfputc_r+0x1c>
 80060f0:	6994      	ldr	r4, [r2, #24]
 80060f2:	42a3      	cmp	r3, r4
 80060f4:	db01      	blt.n	80060fa <__sfputc_r+0x16>
 80060f6:	290a      	cmp	r1, #10
 80060f8:	d102      	bne.n	8006100 <__sfputc_r+0x1c>
 80060fa:	bc10      	pop	{r4}
 80060fc:	f000 bb6c 	b.w	80067d8 <__swbuf_r>
 8006100:	6813      	ldr	r3, [r2, #0]
 8006102:	1c58      	adds	r0, r3, #1
 8006104:	6010      	str	r0, [r2, #0]
 8006106:	7019      	strb	r1, [r3, #0]
 8006108:	4608      	mov	r0, r1
 800610a:	bc10      	pop	{r4}
 800610c:	4770      	bx	lr

0800610e <__sfputs_r>:
 800610e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006110:	4606      	mov	r6, r0
 8006112:	460f      	mov	r7, r1
 8006114:	4614      	mov	r4, r2
 8006116:	18d5      	adds	r5, r2, r3
 8006118:	42ac      	cmp	r4, r5
 800611a:	d101      	bne.n	8006120 <__sfputs_r+0x12>
 800611c:	2000      	movs	r0, #0
 800611e:	e007      	b.n	8006130 <__sfputs_r+0x22>
 8006120:	463a      	mov	r2, r7
 8006122:	4630      	mov	r0, r6
 8006124:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006128:	f7ff ffdc 	bl	80060e4 <__sfputc_r>
 800612c:	1c43      	adds	r3, r0, #1
 800612e:	d1f3      	bne.n	8006118 <__sfputs_r+0xa>
 8006130:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006134 <_vfiprintf_r>:
 8006134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006138:	460d      	mov	r5, r1
 800613a:	4614      	mov	r4, r2
 800613c:	4698      	mov	r8, r3
 800613e:	4606      	mov	r6, r0
 8006140:	b09d      	sub	sp, #116	@ 0x74
 8006142:	b118      	cbz	r0, 800614c <_vfiprintf_r+0x18>
 8006144:	6a03      	ldr	r3, [r0, #32]
 8006146:	b90b      	cbnz	r3, 800614c <_vfiprintf_r+0x18>
 8006148:	f7ff fdce 	bl	8005ce8 <__sinit>
 800614c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800614e:	07d9      	lsls	r1, r3, #31
 8006150:	d405      	bmi.n	800615e <_vfiprintf_r+0x2a>
 8006152:	89ab      	ldrh	r3, [r5, #12]
 8006154:	059a      	lsls	r2, r3, #22
 8006156:	d402      	bmi.n	800615e <_vfiprintf_r+0x2a>
 8006158:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800615a:	f7ff feca 	bl	8005ef2 <__retarget_lock_acquire_recursive>
 800615e:	89ab      	ldrh	r3, [r5, #12]
 8006160:	071b      	lsls	r3, r3, #28
 8006162:	d501      	bpl.n	8006168 <_vfiprintf_r+0x34>
 8006164:	692b      	ldr	r3, [r5, #16]
 8006166:	b99b      	cbnz	r3, 8006190 <_vfiprintf_r+0x5c>
 8006168:	4629      	mov	r1, r5
 800616a:	4630      	mov	r0, r6
 800616c:	f000 fb72 	bl	8006854 <__swsetup_r>
 8006170:	b170      	cbz	r0, 8006190 <_vfiprintf_r+0x5c>
 8006172:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006174:	07dc      	lsls	r4, r3, #31
 8006176:	d504      	bpl.n	8006182 <_vfiprintf_r+0x4e>
 8006178:	f04f 30ff 	mov.w	r0, #4294967295
 800617c:	b01d      	add	sp, #116	@ 0x74
 800617e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006182:	89ab      	ldrh	r3, [r5, #12]
 8006184:	0598      	lsls	r0, r3, #22
 8006186:	d4f7      	bmi.n	8006178 <_vfiprintf_r+0x44>
 8006188:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800618a:	f7ff feb3 	bl	8005ef4 <__retarget_lock_release_recursive>
 800618e:	e7f3      	b.n	8006178 <_vfiprintf_r+0x44>
 8006190:	2300      	movs	r3, #0
 8006192:	9309      	str	r3, [sp, #36]	@ 0x24
 8006194:	2320      	movs	r3, #32
 8006196:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800619a:	2330      	movs	r3, #48	@ 0x30
 800619c:	f04f 0901 	mov.w	r9, #1
 80061a0:	f8cd 800c 	str.w	r8, [sp, #12]
 80061a4:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8006350 <_vfiprintf_r+0x21c>
 80061a8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80061ac:	4623      	mov	r3, r4
 80061ae:	469a      	mov	sl, r3
 80061b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80061b4:	b10a      	cbz	r2, 80061ba <_vfiprintf_r+0x86>
 80061b6:	2a25      	cmp	r2, #37	@ 0x25
 80061b8:	d1f9      	bne.n	80061ae <_vfiprintf_r+0x7a>
 80061ba:	ebba 0b04 	subs.w	fp, sl, r4
 80061be:	d00b      	beq.n	80061d8 <_vfiprintf_r+0xa4>
 80061c0:	465b      	mov	r3, fp
 80061c2:	4622      	mov	r2, r4
 80061c4:	4629      	mov	r1, r5
 80061c6:	4630      	mov	r0, r6
 80061c8:	f7ff ffa1 	bl	800610e <__sfputs_r>
 80061cc:	3001      	adds	r0, #1
 80061ce:	f000 80a7 	beq.w	8006320 <_vfiprintf_r+0x1ec>
 80061d2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80061d4:	445a      	add	r2, fp
 80061d6:	9209      	str	r2, [sp, #36]	@ 0x24
 80061d8:	f89a 3000 	ldrb.w	r3, [sl]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	f000 809f 	beq.w	8006320 <_vfiprintf_r+0x1ec>
 80061e2:	2300      	movs	r3, #0
 80061e4:	f04f 32ff 	mov.w	r2, #4294967295
 80061e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80061ec:	f10a 0a01 	add.w	sl, sl, #1
 80061f0:	9304      	str	r3, [sp, #16]
 80061f2:	9307      	str	r3, [sp, #28]
 80061f4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80061f8:	931a      	str	r3, [sp, #104]	@ 0x68
 80061fa:	4654      	mov	r4, sl
 80061fc:	2205      	movs	r2, #5
 80061fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006202:	4853      	ldr	r0, [pc, #332]	@ (8006350 <_vfiprintf_r+0x21c>)
 8006204:	f000 fb8c 	bl	8006920 <memchr>
 8006208:	9a04      	ldr	r2, [sp, #16]
 800620a:	b9d8      	cbnz	r0, 8006244 <_vfiprintf_r+0x110>
 800620c:	06d1      	lsls	r1, r2, #27
 800620e:	bf44      	itt	mi
 8006210:	2320      	movmi	r3, #32
 8006212:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006216:	0713      	lsls	r3, r2, #28
 8006218:	bf44      	itt	mi
 800621a:	232b      	movmi	r3, #43	@ 0x2b
 800621c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006220:	f89a 3000 	ldrb.w	r3, [sl]
 8006224:	2b2a      	cmp	r3, #42	@ 0x2a
 8006226:	d015      	beq.n	8006254 <_vfiprintf_r+0x120>
 8006228:	4654      	mov	r4, sl
 800622a:	2000      	movs	r0, #0
 800622c:	f04f 0c0a 	mov.w	ip, #10
 8006230:	9a07      	ldr	r2, [sp, #28]
 8006232:	4621      	mov	r1, r4
 8006234:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006238:	3b30      	subs	r3, #48	@ 0x30
 800623a:	2b09      	cmp	r3, #9
 800623c:	d94b      	bls.n	80062d6 <_vfiprintf_r+0x1a2>
 800623e:	b1b0      	cbz	r0, 800626e <_vfiprintf_r+0x13a>
 8006240:	9207      	str	r2, [sp, #28]
 8006242:	e014      	b.n	800626e <_vfiprintf_r+0x13a>
 8006244:	eba0 0308 	sub.w	r3, r0, r8
 8006248:	fa09 f303 	lsl.w	r3, r9, r3
 800624c:	4313      	orrs	r3, r2
 800624e:	46a2      	mov	sl, r4
 8006250:	9304      	str	r3, [sp, #16]
 8006252:	e7d2      	b.n	80061fa <_vfiprintf_r+0xc6>
 8006254:	9b03      	ldr	r3, [sp, #12]
 8006256:	1d19      	adds	r1, r3, #4
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	9103      	str	r1, [sp, #12]
 800625c:	2b00      	cmp	r3, #0
 800625e:	bfbb      	ittet	lt
 8006260:	425b      	neglt	r3, r3
 8006262:	f042 0202 	orrlt.w	r2, r2, #2
 8006266:	9307      	strge	r3, [sp, #28]
 8006268:	9307      	strlt	r3, [sp, #28]
 800626a:	bfb8      	it	lt
 800626c:	9204      	strlt	r2, [sp, #16]
 800626e:	7823      	ldrb	r3, [r4, #0]
 8006270:	2b2e      	cmp	r3, #46	@ 0x2e
 8006272:	d10a      	bne.n	800628a <_vfiprintf_r+0x156>
 8006274:	7863      	ldrb	r3, [r4, #1]
 8006276:	2b2a      	cmp	r3, #42	@ 0x2a
 8006278:	d132      	bne.n	80062e0 <_vfiprintf_r+0x1ac>
 800627a:	9b03      	ldr	r3, [sp, #12]
 800627c:	3402      	adds	r4, #2
 800627e:	1d1a      	adds	r2, r3, #4
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	9203      	str	r2, [sp, #12]
 8006284:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006288:	9305      	str	r3, [sp, #20]
 800628a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8006354 <_vfiprintf_r+0x220>
 800628e:	2203      	movs	r2, #3
 8006290:	4650      	mov	r0, sl
 8006292:	7821      	ldrb	r1, [r4, #0]
 8006294:	f000 fb44 	bl	8006920 <memchr>
 8006298:	b138      	cbz	r0, 80062aa <_vfiprintf_r+0x176>
 800629a:	2240      	movs	r2, #64	@ 0x40
 800629c:	9b04      	ldr	r3, [sp, #16]
 800629e:	eba0 000a 	sub.w	r0, r0, sl
 80062a2:	4082      	lsls	r2, r0
 80062a4:	4313      	orrs	r3, r2
 80062a6:	3401      	adds	r4, #1
 80062a8:	9304      	str	r3, [sp, #16]
 80062aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062ae:	2206      	movs	r2, #6
 80062b0:	4829      	ldr	r0, [pc, #164]	@ (8006358 <_vfiprintf_r+0x224>)
 80062b2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80062b6:	f000 fb33 	bl	8006920 <memchr>
 80062ba:	2800      	cmp	r0, #0
 80062bc:	d03f      	beq.n	800633e <_vfiprintf_r+0x20a>
 80062be:	4b27      	ldr	r3, [pc, #156]	@ (800635c <_vfiprintf_r+0x228>)
 80062c0:	bb1b      	cbnz	r3, 800630a <_vfiprintf_r+0x1d6>
 80062c2:	9b03      	ldr	r3, [sp, #12]
 80062c4:	3307      	adds	r3, #7
 80062c6:	f023 0307 	bic.w	r3, r3, #7
 80062ca:	3308      	adds	r3, #8
 80062cc:	9303      	str	r3, [sp, #12]
 80062ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80062d0:	443b      	add	r3, r7
 80062d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80062d4:	e76a      	b.n	80061ac <_vfiprintf_r+0x78>
 80062d6:	460c      	mov	r4, r1
 80062d8:	2001      	movs	r0, #1
 80062da:	fb0c 3202 	mla	r2, ip, r2, r3
 80062de:	e7a8      	b.n	8006232 <_vfiprintf_r+0xfe>
 80062e0:	2300      	movs	r3, #0
 80062e2:	f04f 0c0a 	mov.w	ip, #10
 80062e6:	4619      	mov	r1, r3
 80062e8:	3401      	adds	r4, #1
 80062ea:	9305      	str	r3, [sp, #20]
 80062ec:	4620      	mov	r0, r4
 80062ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80062f2:	3a30      	subs	r2, #48	@ 0x30
 80062f4:	2a09      	cmp	r2, #9
 80062f6:	d903      	bls.n	8006300 <_vfiprintf_r+0x1cc>
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d0c6      	beq.n	800628a <_vfiprintf_r+0x156>
 80062fc:	9105      	str	r1, [sp, #20]
 80062fe:	e7c4      	b.n	800628a <_vfiprintf_r+0x156>
 8006300:	4604      	mov	r4, r0
 8006302:	2301      	movs	r3, #1
 8006304:	fb0c 2101 	mla	r1, ip, r1, r2
 8006308:	e7f0      	b.n	80062ec <_vfiprintf_r+0x1b8>
 800630a:	ab03      	add	r3, sp, #12
 800630c:	9300      	str	r3, [sp, #0]
 800630e:	462a      	mov	r2, r5
 8006310:	4630      	mov	r0, r6
 8006312:	4b13      	ldr	r3, [pc, #76]	@ (8006360 <_vfiprintf_r+0x22c>)
 8006314:	a904      	add	r1, sp, #16
 8006316:	f3af 8000 	nop.w
 800631a:	4607      	mov	r7, r0
 800631c:	1c78      	adds	r0, r7, #1
 800631e:	d1d6      	bne.n	80062ce <_vfiprintf_r+0x19a>
 8006320:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006322:	07d9      	lsls	r1, r3, #31
 8006324:	d405      	bmi.n	8006332 <_vfiprintf_r+0x1fe>
 8006326:	89ab      	ldrh	r3, [r5, #12]
 8006328:	059a      	lsls	r2, r3, #22
 800632a:	d402      	bmi.n	8006332 <_vfiprintf_r+0x1fe>
 800632c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800632e:	f7ff fde1 	bl	8005ef4 <__retarget_lock_release_recursive>
 8006332:	89ab      	ldrh	r3, [r5, #12]
 8006334:	065b      	lsls	r3, r3, #25
 8006336:	f53f af1f 	bmi.w	8006178 <_vfiprintf_r+0x44>
 800633a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800633c:	e71e      	b.n	800617c <_vfiprintf_r+0x48>
 800633e:	ab03      	add	r3, sp, #12
 8006340:	9300      	str	r3, [sp, #0]
 8006342:	462a      	mov	r2, r5
 8006344:	4630      	mov	r0, r6
 8006346:	4b06      	ldr	r3, [pc, #24]	@ (8006360 <_vfiprintf_r+0x22c>)
 8006348:	a904      	add	r1, sp, #16
 800634a:	f000 f87d 	bl	8006448 <_printf_i>
 800634e:	e7e4      	b.n	800631a <_vfiprintf_r+0x1e6>
 8006350:	08006aa4 	.word	0x08006aa4
 8006354:	08006aaa 	.word	0x08006aaa
 8006358:	08006aae 	.word	0x08006aae
 800635c:	00000000 	.word	0x00000000
 8006360:	0800610f 	.word	0x0800610f

08006364 <_printf_common>:
 8006364:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006368:	4616      	mov	r6, r2
 800636a:	4698      	mov	r8, r3
 800636c:	688a      	ldr	r2, [r1, #8]
 800636e:	690b      	ldr	r3, [r1, #16]
 8006370:	4607      	mov	r7, r0
 8006372:	4293      	cmp	r3, r2
 8006374:	bfb8      	it	lt
 8006376:	4613      	movlt	r3, r2
 8006378:	6033      	str	r3, [r6, #0]
 800637a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800637e:	460c      	mov	r4, r1
 8006380:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006384:	b10a      	cbz	r2, 800638a <_printf_common+0x26>
 8006386:	3301      	adds	r3, #1
 8006388:	6033      	str	r3, [r6, #0]
 800638a:	6823      	ldr	r3, [r4, #0]
 800638c:	0699      	lsls	r1, r3, #26
 800638e:	bf42      	ittt	mi
 8006390:	6833      	ldrmi	r3, [r6, #0]
 8006392:	3302      	addmi	r3, #2
 8006394:	6033      	strmi	r3, [r6, #0]
 8006396:	6825      	ldr	r5, [r4, #0]
 8006398:	f015 0506 	ands.w	r5, r5, #6
 800639c:	d106      	bne.n	80063ac <_printf_common+0x48>
 800639e:	f104 0a19 	add.w	sl, r4, #25
 80063a2:	68e3      	ldr	r3, [r4, #12]
 80063a4:	6832      	ldr	r2, [r6, #0]
 80063a6:	1a9b      	subs	r3, r3, r2
 80063a8:	42ab      	cmp	r3, r5
 80063aa:	dc2b      	bgt.n	8006404 <_printf_common+0xa0>
 80063ac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80063b0:	6822      	ldr	r2, [r4, #0]
 80063b2:	3b00      	subs	r3, #0
 80063b4:	bf18      	it	ne
 80063b6:	2301      	movne	r3, #1
 80063b8:	0692      	lsls	r2, r2, #26
 80063ba:	d430      	bmi.n	800641e <_printf_common+0xba>
 80063bc:	4641      	mov	r1, r8
 80063be:	4638      	mov	r0, r7
 80063c0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80063c4:	47c8      	blx	r9
 80063c6:	3001      	adds	r0, #1
 80063c8:	d023      	beq.n	8006412 <_printf_common+0xae>
 80063ca:	6823      	ldr	r3, [r4, #0]
 80063cc:	6922      	ldr	r2, [r4, #16]
 80063ce:	f003 0306 	and.w	r3, r3, #6
 80063d2:	2b04      	cmp	r3, #4
 80063d4:	bf14      	ite	ne
 80063d6:	2500      	movne	r5, #0
 80063d8:	6833      	ldreq	r3, [r6, #0]
 80063da:	f04f 0600 	mov.w	r6, #0
 80063de:	bf08      	it	eq
 80063e0:	68e5      	ldreq	r5, [r4, #12]
 80063e2:	f104 041a 	add.w	r4, r4, #26
 80063e6:	bf08      	it	eq
 80063e8:	1aed      	subeq	r5, r5, r3
 80063ea:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80063ee:	bf08      	it	eq
 80063f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80063f4:	4293      	cmp	r3, r2
 80063f6:	bfc4      	itt	gt
 80063f8:	1a9b      	subgt	r3, r3, r2
 80063fa:	18ed      	addgt	r5, r5, r3
 80063fc:	42b5      	cmp	r5, r6
 80063fe:	d11a      	bne.n	8006436 <_printf_common+0xd2>
 8006400:	2000      	movs	r0, #0
 8006402:	e008      	b.n	8006416 <_printf_common+0xb2>
 8006404:	2301      	movs	r3, #1
 8006406:	4652      	mov	r2, sl
 8006408:	4641      	mov	r1, r8
 800640a:	4638      	mov	r0, r7
 800640c:	47c8      	blx	r9
 800640e:	3001      	adds	r0, #1
 8006410:	d103      	bne.n	800641a <_printf_common+0xb6>
 8006412:	f04f 30ff 	mov.w	r0, #4294967295
 8006416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800641a:	3501      	adds	r5, #1
 800641c:	e7c1      	b.n	80063a2 <_printf_common+0x3e>
 800641e:	2030      	movs	r0, #48	@ 0x30
 8006420:	18e1      	adds	r1, r4, r3
 8006422:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006426:	1c5a      	adds	r2, r3, #1
 8006428:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800642c:	4422      	add	r2, r4
 800642e:	3302      	adds	r3, #2
 8006430:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006434:	e7c2      	b.n	80063bc <_printf_common+0x58>
 8006436:	2301      	movs	r3, #1
 8006438:	4622      	mov	r2, r4
 800643a:	4641      	mov	r1, r8
 800643c:	4638      	mov	r0, r7
 800643e:	47c8      	blx	r9
 8006440:	3001      	adds	r0, #1
 8006442:	d0e6      	beq.n	8006412 <_printf_common+0xae>
 8006444:	3601      	adds	r6, #1
 8006446:	e7d9      	b.n	80063fc <_printf_common+0x98>

08006448 <_printf_i>:
 8006448:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800644c:	7e0f      	ldrb	r7, [r1, #24]
 800644e:	4691      	mov	r9, r2
 8006450:	2f78      	cmp	r7, #120	@ 0x78
 8006452:	4680      	mov	r8, r0
 8006454:	460c      	mov	r4, r1
 8006456:	469a      	mov	sl, r3
 8006458:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800645a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800645e:	d807      	bhi.n	8006470 <_printf_i+0x28>
 8006460:	2f62      	cmp	r7, #98	@ 0x62
 8006462:	d80a      	bhi.n	800647a <_printf_i+0x32>
 8006464:	2f00      	cmp	r7, #0
 8006466:	f000 80d3 	beq.w	8006610 <_printf_i+0x1c8>
 800646a:	2f58      	cmp	r7, #88	@ 0x58
 800646c:	f000 80ba 	beq.w	80065e4 <_printf_i+0x19c>
 8006470:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006474:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006478:	e03a      	b.n	80064f0 <_printf_i+0xa8>
 800647a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800647e:	2b15      	cmp	r3, #21
 8006480:	d8f6      	bhi.n	8006470 <_printf_i+0x28>
 8006482:	a101      	add	r1, pc, #4	@ (adr r1, 8006488 <_printf_i+0x40>)
 8006484:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006488:	080064e1 	.word	0x080064e1
 800648c:	080064f5 	.word	0x080064f5
 8006490:	08006471 	.word	0x08006471
 8006494:	08006471 	.word	0x08006471
 8006498:	08006471 	.word	0x08006471
 800649c:	08006471 	.word	0x08006471
 80064a0:	080064f5 	.word	0x080064f5
 80064a4:	08006471 	.word	0x08006471
 80064a8:	08006471 	.word	0x08006471
 80064ac:	08006471 	.word	0x08006471
 80064b0:	08006471 	.word	0x08006471
 80064b4:	080065f7 	.word	0x080065f7
 80064b8:	0800651f 	.word	0x0800651f
 80064bc:	080065b1 	.word	0x080065b1
 80064c0:	08006471 	.word	0x08006471
 80064c4:	08006471 	.word	0x08006471
 80064c8:	08006619 	.word	0x08006619
 80064cc:	08006471 	.word	0x08006471
 80064d0:	0800651f 	.word	0x0800651f
 80064d4:	08006471 	.word	0x08006471
 80064d8:	08006471 	.word	0x08006471
 80064dc:	080065b9 	.word	0x080065b9
 80064e0:	6833      	ldr	r3, [r6, #0]
 80064e2:	1d1a      	adds	r2, r3, #4
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	6032      	str	r2, [r6, #0]
 80064e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80064ec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80064f0:	2301      	movs	r3, #1
 80064f2:	e09e      	b.n	8006632 <_printf_i+0x1ea>
 80064f4:	6833      	ldr	r3, [r6, #0]
 80064f6:	6820      	ldr	r0, [r4, #0]
 80064f8:	1d19      	adds	r1, r3, #4
 80064fa:	6031      	str	r1, [r6, #0]
 80064fc:	0606      	lsls	r6, r0, #24
 80064fe:	d501      	bpl.n	8006504 <_printf_i+0xbc>
 8006500:	681d      	ldr	r5, [r3, #0]
 8006502:	e003      	b.n	800650c <_printf_i+0xc4>
 8006504:	0645      	lsls	r5, r0, #25
 8006506:	d5fb      	bpl.n	8006500 <_printf_i+0xb8>
 8006508:	f9b3 5000 	ldrsh.w	r5, [r3]
 800650c:	2d00      	cmp	r5, #0
 800650e:	da03      	bge.n	8006518 <_printf_i+0xd0>
 8006510:	232d      	movs	r3, #45	@ 0x2d
 8006512:	426d      	negs	r5, r5
 8006514:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006518:	230a      	movs	r3, #10
 800651a:	4859      	ldr	r0, [pc, #356]	@ (8006680 <_printf_i+0x238>)
 800651c:	e011      	b.n	8006542 <_printf_i+0xfa>
 800651e:	6821      	ldr	r1, [r4, #0]
 8006520:	6833      	ldr	r3, [r6, #0]
 8006522:	0608      	lsls	r0, r1, #24
 8006524:	f853 5b04 	ldr.w	r5, [r3], #4
 8006528:	d402      	bmi.n	8006530 <_printf_i+0xe8>
 800652a:	0649      	lsls	r1, r1, #25
 800652c:	bf48      	it	mi
 800652e:	b2ad      	uxthmi	r5, r5
 8006530:	2f6f      	cmp	r7, #111	@ 0x6f
 8006532:	6033      	str	r3, [r6, #0]
 8006534:	bf14      	ite	ne
 8006536:	230a      	movne	r3, #10
 8006538:	2308      	moveq	r3, #8
 800653a:	4851      	ldr	r0, [pc, #324]	@ (8006680 <_printf_i+0x238>)
 800653c:	2100      	movs	r1, #0
 800653e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006542:	6866      	ldr	r6, [r4, #4]
 8006544:	2e00      	cmp	r6, #0
 8006546:	bfa8      	it	ge
 8006548:	6821      	ldrge	r1, [r4, #0]
 800654a:	60a6      	str	r6, [r4, #8]
 800654c:	bfa4      	itt	ge
 800654e:	f021 0104 	bicge.w	r1, r1, #4
 8006552:	6021      	strge	r1, [r4, #0]
 8006554:	b90d      	cbnz	r5, 800655a <_printf_i+0x112>
 8006556:	2e00      	cmp	r6, #0
 8006558:	d04b      	beq.n	80065f2 <_printf_i+0x1aa>
 800655a:	4616      	mov	r6, r2
 800655c:	fbb5 f1f3 	udiv	r1, r5, r3
 8006560:	fb03 5711 	mls	r7, r3, r1, r5
 8006564:	5dc7      	ldrb	r7, [r0, r7]
 8006566:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800656a:	462f      	mov	r7, r5
 800656c:	42bb      	cmp	r3, r7
 800656e:	460d      	mov	r5, r1
 8006570:	d9f4      	bls.n	800655c <_printf_i+0x114>
 8006572:	2b08      	cmp	r3, #8
 8006574:	d10b      	bne.n	800658e <_printf_i+0x146>
 8006576:	6823      	ldr	r3, [r4, #0]
 8006578:	07df      	lsls	r7, r3, #31
 800657a:	d508      	bpl.n	800658e <_printf_i+0x146>
 800657c:	6923      	ldr	r3, [r4, #16]
 800657e:	6861      	ldr	r1, [r4, #4]
 8006580:	4299      	cmp	r1, r3
 8006582:	bfde      	ittt	le
 8006584:	2330      	movle	r3, #48	@ 0x30
 8006586:	f806 3c01 	strble.w	r3, [r6, #-1]
 800658a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800658e:	1b92      	subs	r2, r2, r6
 8006590:	6122      	str	r2, [r4, #16]
 8006592:	464b      	mov	r3, r9
 8006594:	4621      	mov	r1, r4
 8006596:	4640      	mov	r0, r8
 8006598:	f8cd a000 	str.w	sl, [sp]
 800659c:	aa03      	add	r2, sp, #12
 800659e:	f7ff fee1 	bl	8006364 <_printf_common>
 80065a2:	3001      	adds	r0, #1
 80065a4:	d14a      	bne.n	800663c <_printf_i+0x1f4>
 80065a6:	f04f 30ff 	mov.w	r0, #4294967295
 80065aa:	b004      	add	sp, #16
 80065ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065b0:	6823      	ldr	r3, [r4, #0]
 80065b2:	f043 0320 	orr.w	r3, r3, #32
 80065b6:	6023      	str	r3, [r4, #0]
 80065b8:	2778      	movs	r7, #120	@ 0x78
 80065ba:	4832      	ldr	r0, [pc, #200]	@ (8006684 <_printf_i+0x23c>)
 80065bc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80065c0:	6823      	ldr	r3, [r4, #0]
 80065c2:	6831      	ldr	r1, [r6, #0]
 80065c4:	061f      	lsls	r7, r3, #24
 80065c6:	f851 5b04 	ldr.w	r5, [r1], #4
 80065ca:	d402      	bmi.n	80065d2 <_printf_i+0x18a>
 80065cc:	065f      	lsls	r7, r3, #25
 80065ce:	bf48      	it	mi
 80065d0:	b2ad      	uxthmi	r5, r5
 80065d2:	6031      	str	r1, [r6, #0]
 80065d4:	07d9      	lsls	r1, r3, #31
 80065d6:	bf44      	itt	mi
 80065d8:	f043 0320 	orrmi.w	r3, r3, #32
 80065dc:	6023      	strmi	r3, [r4, #0]
 80065de:	b11d      	cbz	r5, 80065e8 <_printf_i+0x1a0>
 80065e0:	2310      	movs	r3, #16
 80065e2:	e7ab      	b.n	800653c <_printf_i+0xf4>
 80065e4:	4826      	ldr	r0, [pc, #152]	@ (8006680 <_printf_i+0x238>)
 80065e6:	e7e9      	b.n	80065bc <_printf_i+0x174>
 80065e8:	6823      	ldr	r3, [r4, #0]
 80065ea:	f023 0320 	bic.w	r3, r3, #32
 80065ee:	6023      	str	r3, [r4, #0]
 80065f0:	e7f6      	b.n	80065e0 <_printf_i+0x198>
 80065f2:	4616      	mov	r6, r2
 80065f4:	e7bd      	b.n	8006572 <_printf_i+0x12a>
 80065f6:	6833      	ldr	r3, [r6, #0]
 80065f8:	6825      	ldr	r5, [r4, #0]
 80065fa:	1d18      	adds	r0, r3, #4
 80065fc:	6961      	ldr	r1, [r4, #20]
 80065fe:	6030      	str	r0, [r6, #0]
 8006600:	062e      	lsls	r6, r5, #24
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	d501      	bpl.n	800660a <_printf_i+0x1c2>
 8006606:	6019      	str	r1, [r3, #0]
 8006608:	e002      	b.n	8006610 <_printf_i+0x1c8>
 800660a:	0668      	lsls	r0, r5, #25
 800660c:	d5fb      	bpl.n	8006606 <_printf_i+0x1be>
 800660e:	8019      	strh	r1, [r3, #0]
 8006610:	2300      	movs	r3, #0
 8006612:	4616      	mov	r6, r2
 8006614:	6123      	str	r3, [r4, #16]
 8006616:	e7bc      	b.n	8006592 <_printf_i+0x14a>
 8006618:	6833      	ldr	r3, [r6, #0]
 800661a:	2100      	movs	r1, #0
 800661c:	1d1a      	adds	r2, r3, #4
 800661e:	6032      	str	r2, [r6, #0]
 8006620:	681e      	ldr	r6, [r3, #0]
 8006622:	6862      	ldr	r2, [r4, #4]
 8006624:	4630      	mov	r0, r6
 8006626:	f000 f97b 	bl	8006920 <memchr>
 800662a:	b108      	cbz	r0, 8006630 <_printf_i+0x1e8>
 800662c:	1b80      	subs	r0, r0, r6
 800662e:	6060      	str	r0, [r4, #4]
 8006630:	6863      	ldr	r3, [r4, #4]
 8006632:	6123      	str	r3, [r4, #16]
 8006634:	2300      	movs	r3, #0
 8006636:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800663a:	e7aa      	b.n	8006592 <_printf_i+0x14a>
 800663c:	4632      	mov	r2, r6
 800663e:	4649      	mov	r1, r9
 8006640:	4640      	mov	r0, r8
 8006642:	6923      	ldr	r3, [r4, #16]
 8006644:	47d0      	blx	sl
 8006646:	3001      	adds	r0, #1
 8006648:	d0ad      	beq.n	80065a6 <_printf_i+0x15e>
 800664a:	6823      	ldr	r3, [r4, #0]
 800664c:	079b      	lsls	r3, r3, #30
 800664e:	d413      	bmi.n	8006678 <_printf_i+0x230>
 8006650:	68e0      	ldr	r0, [r4, #12]
 8006652:	9b03      	ldr	r3, [sp, #12]
 8006654:	4298      	cmp	r0, r3
 8006656:	bfb8      	it	lt
 8006658:	4618      	movlt	r0, r3
 800665a:	e7a6      	b.n	80065aa <_printf_i+0x162>
 800665c:	2301      	movs	r3, #1
 800665e:	4632      	mov	r2, r6
 8006660:	4649      	mov	r1, r9
 8006662:	4640      	mov	r0, r8
 8006664:	47d0      	blx	sl
 8006666:	3001      	adds	r0, #1
 8006668:	d09d      	beq.n	80065a6 <_printf_i+0x15e>
 800666a:	3501      	adds	r5, #1
 800666c:	68e3      	ldr	r3, [r4, #12]
 800666e:	9903      	ldr	r1, [sp, #12]
 8006670:	1a5b      	subs	r3, r3, r1
 8006672:	42ab      	cmp	r3, r5
 8006674:	dcf2      	bgt.n	800665c <_printf_i+0x214>
 8006676:	e7eb      	b.n	8006650 <_printf_i+0x208>
 8006678:	2500      	movs	r5, #0
 800667a:	f104 0619 	add.w	r6, r4, #25
 800667e:	e7f5      	b.n	800666c <_printf_i+0x224>
 8006680:	08006ab5 	.word	0x08006ab5
 8006684:	08006ac6 	.word	0x08006ac6

08006688 <__sflush_r>:
 8006688:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800668c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800668e:	0716      	lsls	r6, r2, #28
 8006690:	4605      	mov	r5, r0
 8006692:	460c      	mov	r4, r1
 8006694:	d454      	bmi.n	8006740 <__sflush_r+0xb8>
 8006696:	684b      	ldr	r3, [r1, #4]
 8006698:	2b00      	cmp	r3, #0
 800669a:	dc02      	bgt.n	80066a2 <__sflush_r+0x1a>
 800669c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800669e:	2b00      	cmp	r3, #0
 80066a0:	dd48      	ble.n	8006734 <__sflush_r+0xac>
 80066a2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80066a4:	2e00      	cmp	r6, #0
 80066a6:	d045      	beq.n	8006734 <__sflush_r+0xac>
 80066a8:	2300      	movs	r3, #0
 80066aa:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80066ae:	682f      	ldr	r7, [r5, #0]
 80066b0:	6a21      	ldr	r1, [r4, #32]
 80066b2:	602b      	str	r3, [r5, #0]
 80066b4:	d030      	beq.n	8006718 <__sflush_r+0x90>
 80066b6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80066b8:	89a3      	ldrh	r3, [r4, #12]
 80066ba:	0759      	lsls	r1, r3, #29
 80066bc:	d505      	bpl.n	80066ca <__sflush_r+0x42>
 80066be:	6863      	ldr	r3, [r4, #4]
 80066c0:	1ad2      	subs	r2, r2, r3
 80066c2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80066c4:	b10b      	cbz	r3, 80066ca <__sflush_r+0x42>
 80066c6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80066c8:	1ad2      	subs	r2, r2, r3
 80066ca:	2300      	movs	r3, #0
 80066cc:	4628      	mov	r0, r5
 80066ce:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80066d0:	6a21      	ldr	r1, [r4, #32]
 80066d2:	47b0      	blx	r6
 80066d4:	1c43      	adds	r3, r0, #1
 80066d6:	89a3      	ldrh	r3, [r4, #12]
 80066d8:	d106      	bne.n	80066e8 <__sflush_r+0x60>
 80066da:	6829      	ldr	r1, [r5, #0]
 80066dc:	291d      	cmp	r1, #29
 80066de:	d82b      	bhi.n	8006738 <__sflush_r+0xb0>
 80066e0:	4a28      	ldr	r2, [pc, #160]	@ (8006784 <__sflush_r+0xfc>)
 80066e2:	410a      	asrs	r2, r1
 80066e4:	07d6      	lsls	r6, r2, #31
 80066e6:	d427      	bmi.n	8006738 <__sflush_r+0xb0>
 80066e8:	2200      	movs	r2, #0
 80066ea:	6062      	str	r2, [r4, #4]
 80066ec:	6922      	ldr	r2, [r4, #16]
 80066ee:	04d9      	lsls	r1, r3, #19
 80066f0:	6022      	str	r2, [r4, #0]
 80066f2:	d504      	bpl.n	80066fe <__sflush_r+0x76>
 80066f4:	1c42      	adds	r2, r0, #1
 80066f6:	d101      	bne.n	80066fc <__sflush_r+0x74>
 80066f8:	682b      	ldr	r3, [r5, #0]
 80066fa:	b903      	cbnz	r3, 80066fe <__sflush_r+0x76>
 80066fc:	6560      	str	r0, [r4, #84]	@ 0x54
 80066fe:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006700:	602f      	str	r7, [r5, #0]
 8006702:	b1b9      	cbz	r1, 8006734 <__sflush_r+0xac>
 8006704:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006708:	4299      	cmp	r1, r3
 800670a:	d002      	beq.n	8006712 <__sflush_r+0x8a>
 800670c:	4628      	mov	r0, r5
 800670e:	f7ff fbf3 	bl	8005ef8 <_free_r>
 8006712:	2300      	movs	r3, #0
 8006714:	6363      	str	r3, [r4, #52]	@ 0x34
 8006716:	e00d      	b.n	8006734 <__sflush_r+0xac>
 8006718:	2301      	movs	r3, #1
 800671a:	4628      	mov	r0, r5
 800671c:	47b0      	blx	r6
 800671e:	4602      	mov	r2, r0
 8006720:	1c50      	adds	r0, r2, #1
 8006722:	d1c9      	bne.n	80066b8 <__sflush_r+0x30>
 8006724:	682b      	ldr	r3, [r5, #0]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d0c6      	beq.n	80066b8 <__sflush_r+0x30>
 800672a:	2b1d      	cmp	r3, #29
 800672c:	d001      	beq.n	8006732 <__sflush_r+0xaa>
 800672e:	2b16      	cmp	r3, #22
 8006730:	d11d      	bne.n	800676e <__sflush_r+0xe6>
 8006732:	602f      	str	r7, [r5, #0]
 8006734:	2000      	movs	r0, #0
 8006736:	e021      	b.n	800677c <__sflush_r+0xf4>
 8006738:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800673c:	b21b      	sxth	r3, r3
 800673e:	e01a      	b.n	8006776 <__sflush_r+0xee>
 8006740:	690f      	ldr	r7, [r1, #16]
 8006742:	2f00      	cmp	r7, #0
 8006744:	d0f6      	beq.n	8006734 <__sflush_r+0xac>
 8006746:	0793      	lsls	r3, r2, #30
 8006748:	bf18      	it	ne
 800674a:	2300      	movne	r3, #0
 800674c:	680e      	ldr	r6, [r1, #0]
 800674e:	bf08      	it	eq
 8006750:	694b      	ldreq	r3, [r1, #20]
 8006752:	1bf6      	subs	r6, r6, r7
 8006754:	600f      	str	r7, [r1, #0]
 8006756:	608b      	str	r3, [r1, #8]
 8006758:	2e00      	cmp	r6, #0
 800675a:	ddeb      	ble.n	8006734 <__sflush_r+0xac>
 800675c:	4633      	mov	r3, r6
 800675e:	463a      	mov	r2, r7
 8006760:	4628      	mov	r0, r5
 8006762:	6a21      	ldr	r1, [r4, #32]
 8006764:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8006768:	47e0      	blx	ip
 800676a:	2800      	cmp	r0, #0
 800676c:	dc07      	bgt.n	800677e <__sflush_r+0xf6>
 800676e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006772:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006776:	f04f 30ff 	mov.w	r0, #4294967295
 800677a:	81a3      	strh	r3, [r4, #12]
 800677c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800677e:	4407      	add	r7, r0
 8006780:	1a36      	subs	r6, r6, r0
 8006782:	e7e9      	b.n	8006758 <__sflush_r+0xd0>
 8006784:	dfbffffe 	.word	0xdfbffffe

08006788 <_fflush_r>:
 8006788:	b538      	push	{r3, r4, r5, lr}
 800678a:	690b      	ldr	r3, [r1, #16]
 800678c:	4605      	mov	r5, r0
 800678e:	460c      	mov	r4, r1
 8006790:	b913      	cbnz	r3, 8006798 <_fflush_r+0x10>
 8006792:	2500      	movs	r5, #0
 8006794:	4628      	mov	r0, r5
 8006796:	bd38      	pop	{r3, r4, r5, pc}
 8006798:	b118      	cbz	r0, 80067a2 <_fflush_r+0x1a>
 800679a:	6a03      	ldr	r3, [r0, #32]
 800679c:	b90b      	cbnz	r3, 80067a2 <_fflush_r+0x1a>
 800679e:	f7ff faa3 	bl	8005ce8 <__sinit>
 80067a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d0f3      	beq.n	8006792 <_fflush_r+0xa>
 80067aa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80067ac:	07d0      	lsls	r0, r2, #31
 80067ae:	d404      	bmi.n	80067ba <_fflush_r+0x32>
 80067b0:	0599      	lsls	r1, r3, #22
 80067b2:	d402      	bmi.n	80067ba <_fflush_r+0x32>
 80067b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80067b6:	f7ff fb9c 	bl	8005ef2 <__retarget_lock_acquire_recursive>
 80067ba:	4628      	mov	r0, r5
 80067bc:	4621      	mov	r1, r4
 80067be:	f7ff ff63 	bl	8006688 <__sflush_r>
 80067c2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80067c4:	4605      	mov	r5, r0
 80067c6:	07da      	lsls	r2, r3, #31
 80067c8:	d4e4      	bmi.n	8006794 <_fflush_r+0xc>
 80067ca:	89a3      	ldrh	r3, [r4, #12]
 80067cc:	059b      	lsls	r3, r3, #22
 80067ce:	d4e1      	bmi.n	8006794 <_fflush_r+0xc>
 80067d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80067d2:	f7ff fb8f 	bl	8005ef4 <__retarget_lock_release_recursive>
 80067d6:	e7dd      	b.n	8006794 <_fflush_r+0xc>

080067d8 <__swbuf_r>:
 80067d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067da:	460e      	mov	r6, r1
 80067dc:	4614      	mov	r4, r2
 80067de:	4605      	mov	r5, r0
 80067e0:	b118      	cbz	r0, 80067ea <__swbuf_r+0x12>
 80067e2:	6a03      	ldr	r3, [r0, #32]
 80067e4:	b90b      	cbnz	r3, 80067ea <__swbuf_r+0x12>
 80067e6:	f7ff fa7f 	bl	8005ce8 <__sinit>
 80067ea:	69a3      	ldr	r3, [r4, #24]
 80067ec:	60a3      	str	r3, [r4, #8]
 80067ee:	89a3      	ldrh	r3, [r4, #12]
 80067f0:	071a      	lsls	r2, r3, #28
 80067f2:	d501      	bpl.n	80067f8 <__swbuf_r+0x20>
 80067f4:	6923      	ldr	r3, [r4, #16]
 80067f6:	b943      	cbnz	r3, 800680a <__swbuf_r+0x32>
 80067f8:	4621      	mov	r1, r4
 80067fa:	4628      	mov	r0, r5
 80067fc:	f000 f82a 	bl	8006854 <__swsetup_r>
 8006800:	b118      	cbz	r0, 800680a <__swbuf_r+0x32>
 8006802:	f04f 37ff 	mov.w	r7, #4294967295
 8006806:	4638      	mov	r0, r7
 8006808:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800680a:	6823      	ldr	r3, [r4, #0]
 800680c:	6922      	ldr	r2, [r4, #16]
 800680e:	b2f6      	uxtb	r6, r6
 8006810:	1a98      	subs	r0, r3, r2
 8006812:	6963      	ldr	r3, [r4, #20]
 8006814:	4637      	mov	r7, r6
 8006816:	4283      	cmp	r3, r0
 8006818:	dc05      	bgt.n	8006826 <__swbuf_r+0x4e>
 800681a:	4621      	mov	r1, r4
 800681c:	4628      	mov	r0, r5
 800681e:	f7ff ffb3 	bl	8006788 <_fflush_r>
 8006822:	2800      	cmp	r0, #0
 8006824:	d1ed      	bne.n	8006802 <__swbuf_r+0x2a>
 8006826:	68a3      	ldr	r3, [r4, #8]
 8006828:	3b01      	subs	r3, #1
 800682a:	60a3      	str	r3, [r4, #8]
 800682c:	6823      	ldr	r3, [r4, #0]
 800682e:	1c5a      	adds	r2, r3, #1
 8006830:	6022      	str	r2, [r4, #0]
 8006832:	701e      	strb	r6, [r3, #0]
 8006834:	6962      	ldr	r2, [r4, #20]
 8006836:	1c43      	adds	r3, r0, #1
 8006838:	429a      	cmp	r2, r3
 800683a:	d004      	beq.n	8006846 <__swbuf_r+0x6e>
 800683c:	89a3      	ldrh	r3, [r4, #12]
 800683e:	07db      	lsls	r3, r3, #31
 8006840:	d5e1      	bpl.n	8006806 <__swbuf_r+0x2e>
 8006842:	2e0a      	cmp	r6, #10
 8006844:	d1df      	bne.n	8006806 <__swbuf_r+0x2e>
 8006846:	4621      	mov	r1, r4
 8006848:	4628      	mov	r0, r5
 800684a:	f7ff ff9d 	bl	8006788 <_fflush_r>
 800684e:	2800      	cmp	r0, #0
 8006850:	d0d9      	beq.n	8006806 <__swbuf_r+0x2e>
 8006852:	e7d6      	b.n	8006802 <__swbuf_r+0x2a>

08006854 <__swsetup_r>:
 8006854:	b538      	push	{r3, r4, r5, lr}
 8006856:	4b29      	ldr	r3, [pc, #164]	@ (80068fc <__swsetup_r+0xa8>)
 8006858:	4605      	mov	r5, r0
 800685a:	6818      	ldr	r0, [r3, #0]
 800685c:	460c      	mov	r4, r1
 800685e:	b118      	cbz	r0, 8006868 <__swsetup_r+0x14>
 8006860:	6a03      	ldr	r3, [r0, #32]
 8006862:	b90b      	cbnz	r3, 8006868 <__swsetup_r+0x14>
 8006864:	f7ff fa40 	bl	8005ce8 <__sinit>
 8006868:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800686c:	0719      	lsls	r1, r3, #28
 800686e:	d422      	bmi.n	80068b6 <__swsetup_r+0x62>
 8006870:	06da      	lsls	r2, r3, #27
 8006872:	d407      	bmi.n	8006884 <__swsetup_r+0x30>
 8006874:	2209      	movs	r2, #9
 8006876:	602a      	str	r2, [r5, #0]
 8006878:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800687c:	f04f 30ff 	mov.w	r0, #4294967295
 8006880:	81a3      	strh	r3, [r4, #12]
 8006882:	e033      	b.n	80068ec <__swsetup_r+0x98>
 8006884:	0758      	lsls	r0, r3, #29
 8006886:	d512      	bpl.n	80068ae <__swsetup_r+0x5a>
 8006888:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800688a:	b141      	cbz	r1, 800689e <__swsetup_r+0x4a>
 800688c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006890:	4299      	cmp	r1, r3
 8006892:	d002      	beq.n	800689a <__swsetup_r+0x46>
 8006894:	4628      	mov	r0, r5
 8006896:	f7ff fb2f 	bl	8005ef8 <_free_r>
 800689a:	2300      	movs	r3, #0
 800689c:	6363      	str	r3, [r4, #52]	@ 0x34
 800689e:	89a3      	ldrh	r3, [r4, #12]
 80068a0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80068a4:	81a3      	strh	r3, [r4, #12]
 80068a6:	2300      	movs	r3, #0
 80068a8:	6063      	str	r3, [r4, #4]
 80068aa:	6923      	ldr	r3, [r4, #16]
 80068ac:	6023      	str	r3, [r4, #0]
 80068ae:	89a3      	ldrh	r3, [r4, #12]
 80068b0:	f043 0308 	orr.w	r3, r3, #8
 80068b4:	81a3      	strh	r3, [r4, #12]
 80068b6:	6923      	ldr	r3, [r4, #16]
 80068b8:	b94b      	cbnz	r3, 80068ce <__swsetup_r+0x7a>
 80068ba:	89a3      	ldrh	r3, [r4, #12]
 80068bc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80068c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80068c4:	d003      	beq.n	80068ce <__swsetup_r+0x7a>
 80068c6:	4621      	mov	r1, r4
 80068c8:	4628      	mov	r0, r5
 80068ca:	f000 f85c 	bl	8006986 <__smakebuf_r>
 80068ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80068d2:	f013 0201 	ands.w	r2, r3, #1
 80068d6:	d00a      	beq.n	80068ee <__swsetup_r+0x9a>
 80068d8:	2200      	movs	r2, #0
 80068da:	60a2      	str	r2, [r4, #8]
 80068dc:	6962      	ldr	r2, [r4, #20]
 80068de:	4252      	negs	r2, r2
 80068e0:	61a2      	str	r2, [r4, #24]
 80068e2:	6922      	ldr	r2, [r4, #16]
 80068e4:	b942      	cbnz	r2, 80068f8 <__swsetup_r+0xa4>
 80068e6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80068ea:	d1c5      	bne.n	8006878 <__swsetup_r+0x24>
 80068ec:	bd38      	pop	{r3, r4, r5, pc}
 80068ee:	0799      	lsls	r1, r3, #30
 80068f0:	bf58      	it	pl
 80068f2:	6962      	ldrpl	r2, [r4, #20]
 80068f4:	60a2      	str	r2, [r4, #8]
 80068f6:	e7f4      	b.n	80068e2 <__swsetup_r+0x8e>
 80068f8:	2000      	movs	r0, #0
 80068fa:	e7f7      	b.n	80068ec <__swsetup_r+0x98>
 80068fc:	2000001c 	.word	0x2000001c

08006900 <_sbrk_r>:
 8006900:	b538      	push	{r3, r4, r5, lr}
 8006902:	2300      	movs	r3, #0
 8006904:	4d05      	ldr	r5, [pc, #20]	@ (800691c <_sbrk_r+0x1c>)
 8006906:	4604      	mov	r4, r0
 8006908:	4608      	mov	r0, r1
 800690a:	602b      	str	r3, [r5, #0]
 800690c:	f7fe f804 	bl	8004918 <_sbrk>
 8006910:	1c43      	adds	r3, r0, #1
 8006912:	d102      	bne.n	800691a <_sbrk_r+0x1a>
 8006914:	682b      	ldr	r3, [r5, #0]
 8006916:	b103      	cbz	r3, 800691a <_sbrk_r+0x1a>
 8006918:	6023      	str	r3, [r4, #0]
 800691a:	bd38      	pop	{r3, r4, r5, pc}
 800691c:	20000210 	.word	0x20000210

08006920 <memchr>:
 8006920:	4603      	mov	r3, r0
 8006922:	b510      	push	{r4, lr}
 8006924:	b2c9      	uxtb	r1, r1
 8006926:	4402      	add	r2, r0
 8006928:	4293      	cmp	r3, r2
 800692a:	4618      	mov	r0, r3
 800692c:	d101      	bne.n	8006932 <memchr+0x12>
 800692e:	2000      	movs	r0, #0
 8006930:	e003      	b.n	800693a <memchr+0x1a>
 8006932:	7804      	ldrb	r4, [r0, #0]
 8006934:	3301      	adds	r3, #1
 8006936:	428c      	cmp	r4, r1
 8006938:	d1f6      	bne.n	8006928 <memchr+0x8>
 800693a:	bd10      	pop	{r4, pc}

0800693c <__swhatbuf_r>:
 800693c:	b570      	push	{r4, r5, r6, lr}
 800693e:	460c      	mov	r4, r1
 8006940:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006944:	4615      	mov	r5, r2
 8006946:	2900      	cmp	r1, #0
 8006948:	461e      	mov	r6, r3
 800694a:	b096      	sub	sp, #88	@ 0x58
 800694c:	da0c      	bge.n	8006968 <__swhatbuf_r+0x2c>
 800694e:	89a3      	ldrh	r3, [r4, #12]
 8006950:	2100      	movs	r1, #0
 8006952:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006956:	bf14      	ite	ne
 8006958:	2340      	movne	r3, #64	@ 0x40
 800695a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800695e:	2000      	movs	r0, #0
 8006960:	6031      	str	r1, [r6, #0]
 8006962:	602b      	str	r3, [r5, #0]
 8006964:	b016      	add	sp, #88	@ 0x58
 8006966:	bd70      	pop	{r4, r5, r6, pc}
 8006968:	466a      	mov	r2, sp
 800696a:	f000 f849 	bl	8006a00 <_fstat_r>
 800696e:	2800      	cmp	r0, #0
 8006970:	dbed      	blt.n	800694e <__swhatbuf_r+0x12>
 8006972:	9901      	ldr	r1, [sp, #4]
 8006974:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006978:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800697c:	4259      	negs	r1, r3
 800697e:	4159      	adcs	r1, r3
 8006980:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006984:	e7eb      	b.n	800695e <__swhatbuf_r+0x22>

08006986 <__smakebuf_r>:
 8006986:	898b      	ldrh	r3, [r1, #12]
 8006988:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800698a:	079d      	lsls	r5, r3, #30
 800698c:	4606      	mov	r6, r0
 800698e:	460c      	mov	r4, r1
 8006990:	d507      	bpl.n	80069a2 <__smakebuf_r+0x1c>
 8006992:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006996:	6023      	str	r3, [r4, #0]
 8006998:	6123      	str	r3, [r4, #16]
 800699a:	2301      	movs	r3, #1
 800699c:	6163      	str	r3, [r4, #20]
 800699e:	b003      	add	sp, #12
 80069a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80069a2:	466a      	mov	r2, sp
 80069a4:	ab01      	add	r3, sp, #4
 80069a6:	f7ff ffc9 	bl	800693c <__swhatbuf_r>
 80069aa:	9f00      	ldr	r7, [sp, #0]
 80069ac:	4605      	mov	r5, r0
 80069ae:	4639      	mov	r1, r7
 80069b0:	4630      	mov	r0, r6
 80069b2:	f7ff fb0b 	bl	8005fcc <_malloc_r>
 80069b6:	b948      	cbnz	r0, 80069cc <__smakebuf_r+0x46>
 80069b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80069bc:	059a      	lsls	r2, r3, #22
 80069be:	d4ee      	bmi.n	800699e <__smakebuf_r+0x18>
 80069c0:	f023 0303 	bic.w	r3, r3, #3
 80069c4:	f043 0302 	orr.w	r3, r3, #2
 80069c8:	81a3      	strh	r3, [r4, #12]
 80069ca:	e7e2      	b.n	8006992 <__smakebuf_r+0xc>
 80069cc:	89a3      	ldrh	r3, [r4, #12]
 80069ce:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80069d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069d6:	81a3      	strh	r3, [r4, #12]
 80069d8:	9b01      	ldr	r3, [sp, #4]
 80069da:	6020      	str	r0, [r4, #0]
 80069dc:	b15b      	cbz	r3, 80069f6 <__smakebuf_r+0x70>
 80069de:	4630      	mov	r0, r6
 80069e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80069e4:	f000 f81e 	bl	8006a24 <_isatty_r>
 80069e8:	b128      	cbz	r0, 80069f6 <__smakebuf_r+0x70>
 80069ea:	89a3      	ldrh	r3, [r4, #12]
 80069ec:	f023 0303 	bic.w	r3, r3, #3
 80069f0:	f043 0301 	orr.w	r3, r3, #1
 80069f4:	81a3      	strh	r3, [r4, #12]
 80069f6:	89a3      	ldrh	r3, [r4, #12]
 80069f8:	431d      	orrs	r5, r3
 80069fa:	81a5      	strh	r5, [r4, #12]
 80069fc:	e7cf      	b.n	800699e <__smakebuf_r+0x18>
	...

08006a00 <_fstat_r>:
 8006a00:	b538      	push	{r3, r4, r5, lr}
 8006a02:	2300      	movs	r3, #0
 8006a04:	4d06      	ldr	r5, [pc, #24]	@ (8006a20 <_fstat_r+0x20>)
 8006a06:	4604      	mov	r4, r0
 8006a08:	4608      	mov	r0, r1
 8006a0a:	4611      	mov	r1, r2
 8006a0c:	602b      	str	r3, [r5, #0]
 8006a0e:	f7fd ff5d 	bl	80048cc <_fstat>
 8006a12:	1c43      	adds	r3, r0, #1
 8006a14:	d102      	bne.n	8006a1c <_fstat_r+0x1c>
 8006a16:	682b      	ldr	r3, [r5, #0]
 8006a18:	b103      	cbz	r3, 8006a1c <_fstat_r+0x1c>
 8006a1a:	6023      	str	r3, [r4, #0]
 8006a1c:	bd38      	pop	{r3, r4, r5, pc}
 8006a1e:	bf00      	nop
 8006a20:	20000210 	.word	0x20000210

08006a24 <_isatty_r>:
 8006a24:	b538      	push	{r3, r4, r5, lr}
 8006a26:	2300      	movs	r3, #0
 8006a28:	4d05      	ldr	r5, [pc, #20]	@ (8006a40 <_isatty_r+0x1c>)
 8006a2a:	4604      	mov	r4, r0
 8006a2c:	4608      	mov	r0, r1
 8006a2e:	602b      	str	r3, [r5, #0]
 8006a30:	f7fd ff5b 	bl	80048ea <_isatty>
 8006a34:	1c43      	adds	r3, r0, #1
 8006a36:	d102      	bne.n	8006a3e <_isatty_r+0x1a>
 8006a38:	682b      	ldr	r3, [r5, #0]
 8006a3a:	b103      	cbz	r3, 8006a3e <_isatty_r+0x1a>
 8006a3c:	6023      	str	r3, [r4, #0]
 8006a3e:	bd38      	pop	{r3, r4, r5, pc}
 8006a40:	20000210 	.word	0x20000210

08006a44 <_init>:
 8006a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a46:	bf00      	nop
 8006a48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a4a:	bc08      	pop	{r3}
 8006a4c:	469e      	mov	lr, r3
 8006a4e:	4770      	bx	lr

08006a50 <_fini>:
 8006a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a52:	bf00      	nop
 8006a54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a56:	bc08      	pop	{r3}
 8006a58:	469e      	mov	lr, r3
 8006a5a:	4770      	bx	lr
