
Bootloader2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002bec  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000144  08002cf8  08002cf8  00003cf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e3c  08002e3c  00004068  2**0
                  CONTENTS
  4 .ARM          00000000  08002e3c  08002e3c  00004068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002e3c  08002e3c  00004068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e3c  08002e3c  00003e3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002e40  08002e40  00003e40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08002e44  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000022c  20000068  08002eac  00004068  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000294  08002eac  00004294  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00004068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bd04  00000000  00000000  00004091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002017  00000000  00000000  0000fd95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 00004aea  00000000  00000000  00011dac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000910  00000000  00000000  00016898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006c7  00000000  00000000  000171a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000181ad  00000000  00000000  0001786f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000dddf  00000000  00000000  0002fa1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00086c2d  00000000  00000000  0003d7fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000c4428  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001dcc  00000000  00000000  000c446c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  000c6238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	08002ce0 	.word	0x08002ce0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	08002ce0 	.word	0x08002ce0

0800014c <goto_application>:
	/* e.g. write a character to the UART3 and Loop until the end of transmission */
	HAL_UART_Transmit(&huart1, (uint8_t*) &ch, 1, HAL_MAX_DELAY);

	return ch;
}
static void goto_application(void) {
 800014c:	b508      	push	{r3, lr}
	printf("Gonna Jump to Application...\n");
 800014e:	480a      	ldr	r0, [pc, #40]	@ (8000178 <goto_application+0x2c>)
 8000150:	f001 ff58 	bl	8002004 <puts>
	void (*app_reset_handler)(
			void) = (void*)(*((volatile uint32_t*)(ETX_APP_START_ADDRESS + 4U)));
 8000154:	4b09      	ldr	r3, [pc, #36]	@ (800017c <goto_application+0x30>)
 8000156:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404

	if (app_reset_handler == (void*) 0xFFFFFFFF) {
 800015a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800015e:	d006      	beq.n	800016e <goto_application+0x22>
		printf("Invalid Application... HALT!!!\r\n");
		while (1)
			;
	}

	__set_MSP(*(volatile uint32_t*) ETX_APP_START_ADDRESS);
 8000160:	4a06      	ldr	r2, [pc, #24]	@ (800017c <goto_application+0x30>)
 8000162:	f8d2 2400 	ldr.w	r2, [r2, #1024]	@ 0x400
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000166:	f382 8808 	msr	MSP, r2
	app_reset_handler();    //call the app reset handler
 800016a:	4798      	blx	r3
}
 800016c:	bd08      	pop	{r3, pc}
		printf("Invalid Application... HALT!!!\r\n");
 800016e:	4804      	ldr	r0, [pc, #16]	@ (8000180 <goto_application+0x34>)
 8000170:	f001 ff48 	bl	8002004 <puts>
		while (1)
 8000174:	e7fe      	b.n	8000174 <goto_application+0x28>
 8000176:	bf00      	nop
 8000178:	08002cf8 	.word	0x08002cf8
 800017c:	08004000 	.word	0x08004000
 8000180:	08002d18 	.word	0x08002d18

08000184 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000184:	b530      	push	{r4, r5, lr}
 8000186:	b087      	sub	sp, #28
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000188:	2400      	movs	r4, #0
 800018a:	9402      	str	r4, [sp, #8]
 800018c:	9403      	str	r4, [sp, #12]
 800018e:	9404      	str	r4, [sp, #16]
 8000190:	9405      	str	r4, [sp, #20]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000192:	4b14      	ldr	r3, [pc, #80]	@ (80001e4 <MX_GPIO_Init+0x60>)
 8000194:	699a      	ldr	r2, [r3, #24]
 8000196:	f042 0210 	orr.w	r2, r2, #16
 800019a:	619a      	str	r2, [r3, #24]
 800019c:	699a      	ldr	r2, [r3, #24]
 800019e:	f002 0210 	and.w	r2, r2, #16
 80001a2:	9200      	str	r2, [sp, #0]
 80001a4:	9a00      	ldr	r2, [sp, #0]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80001a6:	699a      	ldr	r2, [r3, #24]
 80001a8:	f042 0204 	orr.w	r2, r2, #4
 80001ac:	619a      	str	r2, [r3, #24]
 80001ae:	699b      	ldr	r3, [r3, #24]
 80001b0:	f003 0304 	and.w	r3, r3, #4
 80001b4:	9301      	str	r3, [sp, #4]
 80001b6:	9b01      	ldr	r3, [sp, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80001b8:	4d0b      	ldr	r5, [pc, #44]	@ (80001e8 <MX_GPIO_Init+0x64>)
 80001ba:	4622      	mov	r2, r4
 80001bc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80001c0:	4628      	mov	r0, r5
 80001c2:	f001 f9af 	bl	8001524 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 80001c6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80001ca:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001cc:	2301      	movs	r3, #1
 80001ce:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001d0:	9404      	str	r4, [sp, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001d2:	2302      	movs	r3, #2
 80001d4:	9305      	str	r3, [sp, #20]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80001d6:	a902      	add	r1, sp, #8
 80001d8:	4628      	mov	r0, r5
 80001da:	f001 f895 	bl	8001308 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80001de:	b007      	add	sp, #28
 80001e0:	bd30      	pop	{r4, r5, pc}
 80001e2:	bf00      	nop
 80001e4:	40021000 	.word	0x40021000
 80001e8:	40011000 	.word	0x40011000

080001ec <MX_USART1_UART_Init>:
static void MX_USART1_UART_Init(void) {
 80001ec:	b508      	push	{r3, lr}
	huart1.Instance = USART1;
 80001ee:	4808      	ldr	r0, [pc, #32]	@ (8000210 <MX_USART1_UART_Init+0x24>)
 80001f0:	4b08      	ldr	r3, [pc, #32]	@ (8000214 <MX_USART1_UART_Init+0x28>)
 80001f2:	6003      	str	r3, [r0, #0]
	huart1.Init.BaudRate = 115200;
 80001f4:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 80001f8:	6043      	str	r3, [r0, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80001fa:	2300      	movs	r3, #0
 80001fc:	6083      	str	r3, [r0, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80001fe:	60c3      	str	r3, [r0, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000200:	6103      	str	r3, [r0, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000202:	220c      	movs	r2, #12
 8000204:	6142      	str	r2, [r0, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000206:	6183      	str	r3, [r0, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000208:	61c3      	str	r3, [r0, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 800020a:	f001 fd41 	bl	8001c90 <HAL_UART_Init>
}
 800020e:	bd08      	pop	{r3, pc}
 8000210:	20000084 	.word	0x20000084
 8000214:	40013800 	.word	0x40013800

08000218 <MX_CAN_Init>:
static void MX_CAN_Init(void) {
 8000218:	b508      	push	{r3, lr}
	hcan.Instance = CAN1;
 800021a:	480a      	ldr	r0, [pc, #40]	@ (8000244 <MX_CAN_Init+0x2c>)
 800021c:	4b0a      	ldr	r3, [pc, #40]	@ (8000248 <MX_CAN_Init+0x30>)
 800021e:	6003      	str	r3, [r0, #0]
	hcan.Init.Prescaler = 4;
 8000220:	2304      	movs	r3, #4
 8000222:	6043      	str	r3, [r0, #4]
	hcan.Init.Mode = CAN_MODE_NORMAL;
 8000224:	2300      	movs	r3, #0
 8000226:	6083      	str	r3, [r0, #8]
	hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000228:	60c3      	str	r3, [r0, #12]
	hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 800022a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800022e:	6102      	str	r2, [r0, #16]
	hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000230:	6143      	str	r3, [r0, #20]
	hcan.Init.TimeTriggeredMode = DISABLE;
 8000232:	7603      	strb	r3, [r0, #24]
	hcan.Init.AutoBusOff = DISABLE;
 8000234:	7643      	strb	r3, [r0, #25]
	hcan.Init.AutoWakeUp = DISABLE;
 8000236:	7683      	strb	r3, [r0, #26]
	hcan.Init.AutoRetransmission = DISABLE;
 8000238:	76c3      	strb	r3, [r0, #27]
	hcan.Init.ReceiveFifoLocked = DISABLE;
 800023a:	7703      	strb	r3, [r0, #28]
	hcan.Init.TransmitFifoPriority = DISABLE;
 800023c:	7743      	strb	r3, [r0, #29]
	if (HAL_CAN_Init(&hcan) != HAL_OK) {
 800023e:	f000 faab 	bl	8000798 <HAL_CAN_Init>
}
 8000242:	bd08      	pop	{r3, pc}
 8000244:	200000cc 	.word	0x200000cc
 8000248:	40006400 	.word	0x40006400

0800024c <__io_putchar>:
{
 800024c:	b500      	push	{lr}
 800024e:	b083      	sub	sp, #12
 8000250:	9001      	str	r0, [sp, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) &ch, 1, HAL_MAX_DELAY);
 8000252:	f04f 33ff 	mov.w	r3, #4294967295
 8000256:	2201      	movs	r2, #1
 8000258:	a901      	add	r1, sp, #4
 800025a:	4803      	ldr	r0, [pc, #12]	@ (8000268 <__io_putchar+0x1c>)
 800025c:	f001 fd48 	bl	8001cf0 <HAL_UART_Transmit>
}
 8000260:	9801      	ldr	r0, [sp, #4]
 8000262:	b003      	add	sp, #12
 8000264:	f85d fb04 	ldr.w	pc, [sp], #4
 8000268:	20000084 	.word	0x20000084

0800026c <CAN_Filter_Config>:
	canfil->FilterBank = 0;
 800026c:	2300      	movs	r3, #0
 800026e:	6143      	str	r3, [r0, #20]
	canfil->FilterMode = CAN_FILTERMODE_IDMASK;
 8000270:	6183      	str	r3, [r0, #24]
	canfil->FilterFIFOAssignment = CAN_RX_FIFO0;
 8000272:	6103      	str	r3, [r0, #16]
	canfil->FilterIdHigh = 0;
 8000274:	6003      	str	r3, [r0, #0]
	canfil->FilterIdLow = 0;
 8000276:	6043      	str	r3, [r0, #4]
	canfil->FilterMaskIdHigh = 0;
 8000278:	6083      	str	r3, [r0, #8]
	canfil->FilterMaskIdLow = 0;
 800027a:	60c3      	str	r3, [r0, #12]
	canfil->FilterScale = CAN_FILTERSCALE_32BIT;
 800027c:	2301      	movs	r3, #1
 800027e:	61c3      	str	r3, [r0, #28]
	canfil->FilterActivation = ENABLE;
 8000280:	6203      	str	r3, [r0, #32]
	canfil->SlaveStartFilterBank = 14;
 8000282:	230e      	movs	r3, #14
 8000284:	6243      	str	r3, [r0, #36]	@ 0x24
}
 8000286:	4770      	bx	lr

08000288 <CAN_FLASH_PROGRAM>:
uint32_t CAN_FLASH_PROGRAM(uint32_t byteAddress, uint8_t data[8]) {
 8000288:	b538      	push	{r3, r4, r5, lr}
 800028a:	4604      	mov	r4, r0
 800028c:	460d      	mov	r5, r1
	HAL_FLASH_Unlock();
 800028e:	f000 ff1d 	bl	80010cc <HAL_FLASH_Unlock>
	if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, byteAddress,
 8000292:	e9d5 2300 	ldrd	r2, r3, [r5]
 8000296:	4621      	mov	r1, r4
 8000298:	2003      	movs	r0, #3
 800029a:	f000 ff6f 	bl	800117c <HAL_FLASH_Program>
 800029e:	b900      	cbnz	r0, 80002a2 <CAN_FLASH_PROGRAM+0x1a>
		byteAddress += 8U; // 8 bo ładujemy od razu po dwa słowa - tyle mieści się w ramce cana
 80002a0:	3408      	adds	r4, #8
	HAL_FLASH_Lock();
 80002a2:	f000 ff2d 	bl	8001100 <HAL_FLASH_Lock>
}
 80002a6:	4620      	mov	r0, r4
 80002a8:	bd38      	pop	{r3, r4, r5, pc}

080002aa <SystemClock_Config>:
void SystemClock_Config(void) {
 80002aa:	b530      	push	{r4, r5, lr}
 80002ac:	b091      	sub	sp, #68	@ 0x44
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80002ae:	2228      	movs	r2, #40	@ 0x28
 80002b0:	2100      	movs	r1, #0
 80002b2:	a806      	add	r0, sp, #24
 80002b4:	f001 ff86 	bl	80021c4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80002b8:	2400      	movs	r4, #0
 80002ba:	9401      	str	r4, [sp, #4]
 80002bc:	9402      	str	r4, [sp, #8]
 80002be:	9403      	str	r4, [sp, #12]
 80002c0:	9404      	str	r4, [sp, #16]
 80002c2:	9405      	str	r4, [sp, #20]
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002c4:	2502      	movs	r5, #2
 80002c6:	9506      	str	r5, [sp, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002c8:	2301      	movs	r3, #1
 80002ca:	930a      	str	r3, [sp, #40]	@ 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002cc:	2310      	movs	r3, #16
 80002ce:	930b      	str	r3, [sp, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002d0:	950d      	str	r5, [sp, #52]	@ 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80002d2:	a806      	add	r0, sp, #24
 80002d4:	f001 f942 	bl	800155c <HAL_RCC_OscConfig>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80002d8:	230f      	movs	r3, #15
 80002da:	9301      	str	r3, [sp, #4]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002dc:	9502      	str	r5, [sp, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002de:	9403      	str	r4, [sp, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002e0:	9404      	str	r4, [sp, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002e2:	9405      	str	r4, [sp, #20]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 80002e4:	4621      	mov	r1, r4
 80002e6:	a801      	add	r0, sp, #4
 80002e8:	f001 fb6a 	bl	80019c0 <HAL_RCC_ClockConfig>
}
 80002ec:	b011      	add	sp, #68	@ 0x44
 80002ee:	bd30      	pop	{r4, r5, pc}

080002f0 <main>:
int main(void) {
 80002f0:	b570      	push	{r4, r5, r6, lr}
 80002f2:	b096      	sub	sp, #88	@ 0x58
	HAL_Init();
 80002f4:	f000 fa18 	bl	8000728 <HAL_Init>
	SystemClock_Config();
 80002f8:	f7ff ffd7 	bl	80002aa <SystemClock_Config>
	MX_GPIO_Init();
 80002fc:	f7ff ff42 	bl	8000184 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 8000300:	f7ff ff74 	bl	80001ec <MX_USART1_UART_Init>
	MX_CAN_Init();
 8000304:	f7ff ff88 	bl	8000218 <MX_CAN_Init>
	CAN_Filter_Config(&canfil);
 8000308:	4e52      	ldr	r6, [pc, #328]	@ (8000454 <main+0x164>)
 800030a:	4630      	mov	r0, r6
 800030c:	f7ff ffae 	bl	800026c <CAN_Filter_Config>
	HAL_FLASH_Unlock();
 8000310:	f000 fedc 	bl	80010cc <HAL_FLASH_Unlock>
	HAL_Delay(2000U);
 8000314:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000318:	f000 fa2a 	bl	8000770 <HAL_Delay>
	txHeader.StdId = 11;
 800031c:	230b      	movs	r3, #11
 800031e:	9309      	str	r3, [sp, #36]	@ 0x24
	txHeader.RTR = 1;
 8000320:	2301      	movs	r3, #1
 8000322:	930c      	str	r3, [sp, #48]	@ 0x30
	txHeader.IDE = 0;
 8000324:	2500      	movs	r5, #0
 8000326:	950b      	str	r5, [sp, #44]	@ 0x2c
	HAL_CAN_ConfigFilter(&hcan, &canfil);
 8000328:	4c4b      	ldr	r4, [pc, #300]	@ (8000458 <main+0x168>)
 800032a:	4631      	mov	r1, r6
 800032c:	4620      	mov	r0, r4
 800032e:	f000 fad9 	bl	80008e4 <HAL_CAN_ConfigFilter>
	HAL_CAN_Start(&hcan);
 8000332:	4620      	mov	r0, r4
 8000334:	f000 fb5c 	bl	80009f0 <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000338:	2102      	movs	r1, #2
 800033a:	4620      	mov	r0, r4
 800033c:	f000 fcc3 	bl	8000cc6 <HAL_CAN_ActivateNotification>
	txHeader.StdId = LOADER_NAME;
 8000340:	2388      	movs	r3, #136	@ 0x88
 8000342:	9309      	str	r3, [sp, #36]	@ 0x24
	txHeader.DLC = 0U;
 8000344:	950d      	str	r5, [sp, #52]	@ 0x34
	txHeader.IDE = 0U;
 8000346:	950b      	str	r5, [sp, #44]	@ 0x2c
	HAL_CAN_AddTxMessage(&hcan, &txHeader, data, &_);
 8000348:	ab06      	add	r3, sp, #24
 800034a:	aa07      	add	r2, sp, #28
 800034c:	a909      	add	r1, sp, #36	@ 0x24
 800034e:	4620      	mov	r0, r4
 8000350:	f000 fb7c 	bl	8000a4c <HAL_CAN_AddTxMessage>
	printf("normal test start \n");
 8000354:	4841      	ldr	r0, [pc, #260]	@ (800045c <main+0x16c>)
 8000356:	f001 fe55 	bl	8002004 <puts>
	HAL_Delay(1000U);
 800035a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800035e:	f000 fa07 	bl	8000770 <HAL_Delay>
	if (((HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &rxHeader, data) == HAL_OK)
 8000362:	ab07      	add	r3, sp, #28
 8000364:	aa0f      	add	r2, sp, #60	@ 0x3c
 8000366:	4629      	mov	r1, r5
 8000368:	4620      	mov	r0, r4
 800036a:	f000 fbe4 	bl	8000b36 <HAL_CAN_GetRxMessage>
 800036e:	b920      	cbnz	r0, 800037a <main+0x8a>
			&& rxHeader.StdId == ((MY_NAME << (11U - 8U)) | loader))
 8000370:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8000372:	f240 4345 	movw	r3, #1093	@ 0x445
 8000376:	429a      	cmp	r2, r3
 8000378:	d007      	beq.n	800038a <main+0x9a>
			|| (*(uint32_t*) (START_PAGE_ADRESS) != 0x20005000U)) {
 800037a:	4b39      	ldr	r3, [pc, #228]	@ (8000460 <main+0x170>)
 800037c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8000380:	4b38      	ldr	r3, [pc, #224]	@ (8000464 <main+0x174>)
 8000382:	429a      	cmp	r2, r3
 8000384:	d05e      	beq.n	8000444 <main+0x154>
 8000386:	4c38      	ldr	r4, [pc, #224]	@ (8000468 <main+0x178>)
 8000388:	e017      	b.n	80003ba <main+0xca>
 800038a:	4c37      	ldr	r4, [pc, #220]	@ (8000468 <main+0x178>)
 800038c:	e015      	b.n	80003ba <main+0xca>
						printf("jump to app \n");
 800038e:	4837      	ldr	r0, [pc, #220]	@ (800046c <main+0x17c>)
 8000390:	f001 fe38 	bl	8002004 <puts>
						goto_application();
 8000394:	f7ff feda 	bl	800014c <goto_application>
 8000398:	e022      	b.n	80003e0 <main+0xf0>
					if (rxHeader.StdId == ((MY_NAME << (11U - 8U)) | flash)) {
 800039a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800039c:	f240 4343 	movw	r3, #1091	@ 0x443
 80003a0:	429a      	cmp	r2, r3
 80003a2:	d038      	beq.n	8000416 <main+0x126>
					if (rxHeader.StdId == ((MY_NAME << (11U - 8U)) | test)) {
 80003a4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80003a6:	f240 4344 	movw	r3, #1092	@ 0x444
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d03c      	beq.n	8000428 <main+0x138>
				HAL_CAN_AddTxMessage(&hcan, &txHeader, data, &_);
 80003ae:	ab06      	add	r3, sp, #24
 80003b0:	aa07      	add	r2, sp, #28
 80003b2:	a909      	add	r1, sp, #36	@ 0x24
 80003b4:	4828      	ldr	r0, [pc, #160]	@ (8000458 <main+0x168>)
 80003b6:	f000 fb49 	bl	8000a4c <HAL_CAN_AddTxMessage>
			if (HAL_CAN_GetRxFifoFillLevel(&hcan, CAN_RX_FIFO0) > 0) {
 80003ba:	2100      	movs	r1, #0
 80003bc:	4826      	ldr	r0, [pc, #152]	@ (8000458 <main+0x168>)
 80003be:	f000 fc6f 	bl	8000ca0 <HAL_CAN_GetRxFifoFillLevel>
 80003c2:	2800      	cmp	r0, #0
 80003c4:	d0f9      	beq.n	80003ba <main+0xca>
				if (HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &rxHeader, data)
 80003c6:	ab07      	add	r3, sp, #28
 80003c8:	aa0f      	add	r2, sp, #60	@ 0x3c
 80003ca:	2100      	movs	r1, #0
 80003cc:	4822      	ldr	r0, [pc, #136]	@ (8000458 <main+0x168>)
 80003ce:	f000 fbb2 	bl	8000b36 <HAL_CAN_GetRxMessage>
 80003d2:	2800      	cmp	r0, #0
 80003d4:	d132      	bne.n	800043c <main+0x14c>
					if (rxHeader.StdId == ((MY_NAME << (11U - 8U)) | jump)) {
 80003d6:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80003d8:	f240 4341 	movw	r3, #1089	@ 0x441
 80003dc:	429a      	cmp	r2, r3
 80003de:	d0d6      	beq.n	800038e <main+0x9e>
					if (rxHeader.StdId == ((MY_NAME << (11U - 8U)) | erase)) {
 80003e0:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80003e2:	f240 4342 	movw	r3, #1090	@ 0x442
 80003e6:	429a      	cmp	r2, r3
 80003e8:	d1d7      	bne.n	800039a <main+0xaa>
						printf("erase is doing \n");
 80003ea:	4821      	ldr	r0, [pc, #132]	@ (8000470 <main+0x180>)
 80003ec:	f001 fe0a 	bl	8002004 <puts>
						printf("Erasing the Flash memory...\r\n");
 80003f0:	4820      	ldr	r0, [pc, #128]	@ (8000474 <main+0x184>)
 80003f2:	f001 fe07 	bl	8002004 <puts>
						EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 80003f6:	2300      	movs	r3, #0
 80003f8:	9302      	str	r3, [sp, #8]
						EraseInitStruct.PageAddress = ETX_APP_START_ADDRESS;
 80003fa:	4b1b      	ldr	r3, [pc, #108]	@ (8000468 <main+0x178>)
 80003fc:	9304      	str	r3, [sp, #16]
						EraseInitStruct.NbPages = 47;                 //47 Pages
 80003fe:	232f      	movs	r3, #47	@ 0x2f
 8000400:	9305      	str	r3, [sp, #20]
						HAL_FLASH_Unlock();
 8000402:	f000 fe63 	bl	80010cc <HAL_FLASH_Unlock>
						ret = HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError);
 8000406:	a901      	add	r1, sp, #4
 8000408:	a802      	add	r0, sp, #8
 800040a:	f000 ff2b 	bl	8001264 <HAL_FLASHEx_Erase>
						if (ret != HAL_OK) {
 800040e:	b9f0      	cbnz	r0, 800044e <main+0x15e>
						HAL_FLASH_Lock();
 8000410:	f000 fe76 	bl	8001100 <HAL_FLASH_Lock>
 8000414:	e7c1      	b.n	800039a <main+0xaa>
						printf("FLASING is doing \n");
 8000416:	4818      	ldr	r0, [pc, #96]	@ (8000478 <main+0x188>)
 8000418:	f001 fdf4 	bl	8002004 <puts>
						byteAddress = CAN_FLASH_PROGRAM(byteAddress, data);
 800041c:	a907      	add	r1, sp, #28
 800041e:	4620      	mov	r0, r4
 8000420:	f7ff ff32 	bl	8000288 <CAN_FLASH_PROGRAM>
 8000424:	4604      	mov	r4, r0
 8000426:	e7bd      	b.n	80003a4 <main+0xb4>
						printf("testing is doing \n");
 8000428:	4814      	ldr	r0, [pc, #80]	@ (800047c <main+0x18c>)
 800042a:	f001 fdeb 	bl	8002004 <puts>
						HAL_CAN_AddTxMessage(&hcan, &txHeader, data, &_);
 800042e:	ab06      	add	r3, sp, #24
 8000430:	aa07      	add	r2, sp, #28
 8000432:	a909      	add	r1, sp, #36	@ 0x24
 8000434:	4808      	ldr	r0, [pc, #32]	@ (8000458 <main+0x168>)
 8000436:	f000 fb09 	bl	8000a4c <HAL_CAN_AddTxMessage>
 800043a:	e7b8      	b.n	80003ae <main+0xbe>
					printf("normal test end \n");
 800043c:	4810      	ldr	r0, [pc, #64]	@ (8000480 <main+0x190>)
 800043e:	f001 fde1 	bl	8002004 <puts>
 8000442:	e7b4      	b.n	80003ae <main+0xbe>
		printf("jump to app last");
 8000444:	480f      	ldr	r0, [pc, #60]	@ (8000484 <main+0x194>)
 8000446:	f001 fd75 	bl	8001f34 <iprintf>
		goto_application();
 800044a:	f7ff fe7f 	bl	800014c <goto_application>
}
 800044e:	2000      	movs	r0, #0
 8000450:	b016      	add	sp, #88	@ 0x58
 8000452:	bd70      	pop	{r4, r5, r6, pc}
 8000454:	200000f4 	.word	0x200000f4
 8000458:	200000cc 	.word	0x200000cc
 800045c:	08002d38 	.word	0x08002d38
 8000460:	08006000 	.word	0x08006000
 8000464:	20005000 	.word	0x20005000
 8000468:	08004400 	.word	0x08004400
 800046c:	08002d4c 	.word	0x08002d4c
 8000470:	08002d5c 	.word	0x08002d5c
 8000474:	08002d6c 	.word	0x08002d6c
 8000478:	08002d8c 	.word	0x08002d8c
 800047c:	08002da0 	.word	0x08002da0
 8000480:	08002db4 	.word	0x08002db4
 8000484:	08002dc8 	.word	0x08002dc8

08000488 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000488:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800048a:	4b0e      	ldr	r3, [pc, #56]	@ (80004c4 <HAL_MspInit+0x3c>)
 800048c:	699a      	ldr	r2, [r3, #24]
 800048e:	f042 0201 	orr.w	r2, r2, #1
 8000492:	619a      	str	r2, [r3, #24]
 8000494:	699a      	ldr	r2, [r3, #24]
 8000496:	f002 0201 	and.w	r2, r2, #1
 800049a:	9200      	str	r2, [sp, #0]
 800049c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800049e:	69da      	ldr	r2, [r3, #28]
 80004a0:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80004a4:	61da      	str	r2, [r3, #28]
 80004a6:	69db      	ldr	r3, [r3, #28]
 80004a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80004ac:	9301      	str	r3, [sp, #4]
 80004ae:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004b0:	4a05      	ldr	r2, [pc, #20]	@ (80004c8 <HAL_MspInit+0x40>)
 80004b2:	6853      	ldr	r3, [r2, #4]
 80004b4:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80004b8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80004bc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004be:	b002      	add	sp, #8
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop
 80004c4:	40021000 	.word	0x40021000
 80004c8:	40010000 	.word	0x40010000

080004cc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80004cc:	b510      	push	{r4, lr}
 80004ce:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d0:	2300      	movs	r3, #0
 80004d2:	9302      	str	r3, [sp, #8]
 80004d4:	9303      	str	r3, [sp, #12]
 80004d6:	9304      	str	r3, [sp, #16]
 80004d8:	9305      	str	r3, [sp, #20]
  if(hcan->Instance==CAN1)
 80004da:	6802      	ldr	r2, [r0, #0]
 80004dc:	4b1a      	ldr	r3, [pc, #104]	@ (8000548 <HAL_CAN_MspInit+0x7c>)
 80004de:	429a      	cmp	r2, r3
 80004e0:	d001      	beq.n	80004e6 <HAL_CAN_MspInit+0x1a>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80004e2:	b006      	add	sp, #24
 80004e4:	bd10      	pop	{r4, pc}
    __HAL_RCC_CAN1_CLK_ENABLE();
 80004e6:	f503 33d6 	add.w	r3, r3, #109568	@ 0x1ac00
 80004ea:	69da      	ldr	r2, [r3, #28]
 80004ec:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 80004f0:	61da      	str	r2, [r3, #28]
 80004f2:	69da      	ldr	r2, [r3, #28]
 80004f4:	f002 7200 	and.w	r2, r2, #33554432	@ 0x2000000
 80004f8:	9200      	str	r2, [sp, #0]
 80004fa:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004fc:	699a      	ldr	r2, [r3, #24]
 80004fe:	f042 0204 	orr.w	r2, r2, #4
 8000502:	619a      	str	r2, [r3, #24]
 8000504:	699b      	ldr	r3, [r3, #24]
 8000506:	f003 0304 	and.w	r3, r3, #4
 800050a:	9301      	str	r3, [sp, #4]
 800050c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800050e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000512:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000514:	4c0d      	ldr	r4, [pc, #52]	@ (800054c <HAL_CAN_MspInit+0x80>)
 8000516:	a902      	add	r1, sp, #8
 8000518:	4620      	mov	r0, r4
 800051a:	f000 fef5 	bl	8001308 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800051e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000522:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000524:	2302      	movs	r3, #2
 8000526:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000528:	2303      	movs	r3, #3
 800052a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800052c:	a902      	add	r1, sp, #8
 800052e:	4620      	mov	r0, r4
 8000530:	f000 feea 	bl	8001308 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000534:	2200      	movs	r2, #0
 8000536:	4611      	mov	r1, r2
 8000538:	2015      	movs	r0, #21
 800053a:	f000 fd4f 	bl	8000fdc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 800053e:	2015      	movs	r0, #21
 8000540:	f000 fd5c 	bl	8000ffc <HAL_NVIC_EnableIRQ>
}
 8000544:	e7cd      	b.n	80004e2 <HAL_CAN_MspInit+0x16>
 8000546:	bf00      	nop
 8000548:	40006400 	.word	0x40006400
 800054c:	40010800 	.word	0x40010800

08000550 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000550:	b510      	push	{r4, lr}
 8000552:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000554:	2300      	movs	r3, #0
 8000556:	9302      	str	r3, [sp, #8]
 8000558:	9303      	str	r3, [sp, #12]
 800055a:	9304      	str	r3, [sp, #16]
 800055c:	9305      	str	r3, [sp, #20]
  if(huart->Instance==USART1)
 800055e:	6802      	ldr	r2, [r0, #0]
 8000560:	4b17      	ldr	r3, [pc, #92]	@ (80005c0 <HAL_UART_MspInit+0x70>)
 8000562:	429a      	cmp	r2, r3
 8000564:	d001      	beq.n	800056a <HAL_UART_MspInit+0x1a>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000566:	b006      	add	sp, #24
 8000568:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 800056a:	f503 4358 	add.w	r3, r3, #55296	@ 0xd800
 800056e:	699a      	ldr	r2, [r3, #24]
 8000570:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8000574:	619a      	str	r2, [r3, #24]
 8000576:	699a      	ldr	r2, [r3, #24]
 8000578:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 800057c:	9200      	str	r2, [sp, #0]
 800057e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000580:	699a      	ldr	r2, [r3, #24]
 8000582:	f042 0204 	orr.w	r2, r2, #4
 8000586:	619a      	str	r2, [r3, #24]
 8000588:	699b      	ldr	r3, [r3, #24]
 800058a:	f003 0304 	and.w	r3, r3, #4
 800058e:	9301      	str	r3, [sp, #4]
 8000590:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000592:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000596:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000598:	2302      	movs	r3, #2
 800059a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800059c:	2303      	movs	r3, #3
 800059e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005a0:	4c08      	ldr	r4, [pc, #32]	@ (80005c4 <HAL_UART_MspInit+0x74>)
 80005a2:	a902      	add	r1, sp, #8
 80005a4:	4620      	mov	r0, r4
 80005a6:	f000 feaf 	bl	8001308 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80005aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80005ae:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005b0:	2300      	movs	r3, #0
 80005b2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b4:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005b6:	a902      	add	r1, sp, #8
 80005b8:	4620      	mov	r0, r4
 80005ba:	f000 fea5 	bl	8001308 <HAL_GPIO_Init>
}
 80005be:	e7d2      	b.n	8000566 <HAL_UART_MspInit+0x16>
 80005c0:	40013800 	.word	0x40013800
 80005c4:	40010800 	.word	0x40010800

080005c8 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005c8:	e7fe      	b.n	80005c8 <NMI_Handler>

080005ca <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005ca:	e7fe      	b.n	80005ca <HardFault_Handler>

080005cc <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005cc:	e7fe      	b.n	80005cc <MemManage_Handler>

080005ce <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005ce:	e7fe      	b.n	80005ce <BusFault_Handler>

080005d0 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005d0:	e7fe      	b.n	80005d0 <UsageFault_Handler>

080005d2 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005d2:	4770      	bx	lr

080005d4 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005d4:	4770      	bx	lr

080005d6 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005d6:	4770      	bx	lr

080005d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005d8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005da:	f000 f8b7 	bl	800074c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005de:	bd08      	pop	{r3, pc}

080005e0 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80005e0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80005e2:	4802      	ldr	r0, [pc, #8]	@ (80005ec <CAN1_RX1_IRQHandler+0xc>)
 80005e4:	f000 fb8e 	bl	8000d04 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80005e8:	bd08      	pop	{r3, pc}
 80005ea:	bf00      	nop
 80005ec:	200000cc 	.word	0x200000cc

080005f0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80005f0:	b570      	push	{r4, r5, r6, lr}
 80005f2:	460c      	mov	r4, r1
 80005f4:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005f6:	2500      	movs	r5, #0
 80005f8:	e006      	b.n	8000608 <_read+0x18>
	{
		*ptr++ = __io_getchar();
 80005fa:	f3af 8000 	nop.w
 80005fe:	4621      	mov	r1, r4
 8000600:	f801 0b01 	strb.w	r0, [r1], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000604:	3501      	adds	r5, #1
		*ptr++ = __io_getchar();
 8000606:	460c      	mov	r4, r1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000608:	42b5      	cmp	r5, r6
 800060a:	dbf6      	blt.n	80005fa <_read+0xa>
	}

return len;
}
 800060c:	4630      	mov	r0, r6
 800060e:	bd70      	pop	{r4, r5, r6, pc}

08000610 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000610:	b570      	push	{r4, r5, r6, lr}
 8000612:	460c      	mov	r4, r1
 8000614:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000616:	2500      	movs	r5, #0
 8000618:	e004      	b.n	8000624 <_write+0x14>
	{
		__io_putchar(*ptr++);
 800061a:	f814 0b01 	ldrb.w	r0, [r4], #1
 800061e:	f7ff fe15 	bl	800024c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000622:	3501      	adds	r5, #1
 8000624:	42b5      	cmp	r5, r6
 8000626:	dbf8      	blt.n	800061a <_write+0xa>
	}
	return len;
}
 8000628:	4630      	mov	r0, r6
 800062a:	bd70      	pop	{r4, r5, r6, pc}

0800062c <_close>:

int _close(int file)
{
	return -1;
}
 800062c:	f04f 30ff 	mov.w	r0, #4294967295
 8000630:	4770      	bx	lr

08000632 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8000632:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000636:	604b      	str	r3, [r1, #4]
	return 0;
}
 8000638:	2000      	movs	r0, #0
 800063a:	4770      	bx	lr

0800063c <_isatty>:

int _isatty(int file)
{
	return 1;
}
 800063c:	2001      	movs	r0, #1
 800063e:	4770      	bx	lr

08000640 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8000640:	2000      	movs	r0, #0
 8000642:	4770      	bx	lr

08000644 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000644:	b510      	push	{r4, lr}
 8000646:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000648:	4a0c      	ldr	r2, [pc, #48]	@ (800067c <_sbrk+0x38>)
 800064a:	490d      	ldr	r1, [pc, #52]	@ (8000680 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800064c:	480d      	ldr	r0, [pc, #52]	@ (8000684 <_sbrk+0x40>)
 800064e:	6800      	ldr	r0, [r0, #0]
 8000650:	b140      	cbz	r0, 8000664 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000652:	480c      	ldr	r0, [pc, #48]	@ (8000684 <_sbrk+0x40>)
 8000654:	6800      	ldr	r0, [r0, #0]
 8000656:	4403      	add	r3, r0
 8000658:	1a52      	subs	r2, r2, r1
 800065a:	4293      	cmp	r3, r2
 800065c:	d806      	bhi.n	800066c <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 800065e:	4a09      	ldr	r2, [pc, #36]	@ (8000684 <_sbrk+0x40>)
 8000660:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8000662:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8000664:	4807      	ldr	r0, [pc, #28]	@ (8000684 <_sbrk+0x40>)
 8000666:	4c08      	ldr	r4, [pc, #32]	@ (8000688 <_sbrk+0x44>)
 8000668:	6004      	str	r4, [r0, #0]
 800066a:	e7f2      	b.n	8000652 <_sbrk+0xe>
    errno = ENOMEM;
 800066c:	f001 fdf8 	bl	8002260 <__errno>
 8000670:	230c      	movs	r3, #12
 8000672:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8000674:	f04f 30ff 	mov.w	r0, #4294967295
 8000678:	e7f3      	b.n	8000662 <_sbrk+0x1e>
 800067a:	bf00      	nop
 800067c:	20005000 	.word	0x20005000
 8000680:	00000400 	.word	0x00000400
 8000684:	2000011c 	.word	0x2000011c
 8000688:	20000298 	.word	0x20000298

0800068c <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800068c:	4770      	bx	lr
	...

08000690 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000690:	480c      	ldr	r0, [pc, #48]	@ (80006c4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000692:	490d      	ldr	r1, [pc, #52]	@ (80006c8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000694:	4a0d      	ldr	r2, [pc, #52]	@ (80006cc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000696:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000698:	e002      	b.n	80006a0 <LoopCopyDataInit>

0800069a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800069a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800069c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800069e:	3304      	adds	r3, #4

080006a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006a4:	d3f9      	bcc.n	800069a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006a6:	4a0a      	ldr	r2, [pc, #40]	@ (80006d0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80006a8:	4c0a      	ldr	r4, [pc, #40]	@ (80006d4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80006aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006ac:	e001      	b.n	80006b2 <LoopFillZerobss>

080006ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006b0:	3204      	adds	r2, #4

080006b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006b4:	d3fb      	bcc.n	80006ae <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80006b6:	f7ff ffe9 	bl	800068c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80006ba:	f001 fdd7 	bl	800226c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006be:	f7ff fe17 	bl	80002f0 <main>
  bx lr
 80006c2:	4770      	bx	lr
  ldr r0, =_sdata
 80006c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006c8:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80006cc:	08002e44 	.word	0x08002e44
  ldr r2, =_sbss
 80006d0:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80006d4:	20000294 	.word	0x20000294

080006d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006d8:	e7fe      	b.n	80006d8 <ADC1_2_IRQHandler>
	...

080006dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006dc:	b510      	push	{r4, lr}
 80006de:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006e0:	4b0e      	ldr	r3, [pc, #56]	@ (800071c <HAL_InitTick+0x40>)
 80006e2:	781a      	ldrb	r2, [r3, #0]
 80006e4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80006ec:	4a0c      	ldr	r2, [pc, #48]	@ (8000720 <HAL_InitTick+0x44>)
 80006ee:	6810      	ldr	r0, [r2, #0]
 80006f0:	fbb0 f0f3 	udiv	r0, r0, r3
 80006f4:	f000 fc90 	bl	8001018 <HAL_SYSTICK_Config>
 80006f8:	b968      	cbnz	r0, 8000716 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006fa:	2c0f      	cmp	r4, #15
 80006fc:	d901      	bls.n	8000702 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 80006fe:	2001      	movs	r0, #1
 8000700:	e00a      	b.n	8000718 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000702:	2200      	movs	r2, #0
 8000704:	4621      	mov	r1, r4
 8000706:	f04f 30ff 	mov.w	r0, #4294967295
 800070a:	f000 fc67 	bl	8000fdc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800070e:	4b05      	ldr	r3, [pc, #20]	@ (8000724 <HAL_InitTick+0x48>)
 8000710:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8000712:	2000      	movs	r0, #0
 8000714:	e000      	b.n	8000718 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000716:	2001      	movs	r0, #1
}
 8000718:	bd10      	pop	{r4, pc}
 800071a:	bf00      	nop
 800071c:	20000004 	.word	0x20000004
 8000720:	20000000 	.word	0x20000000
 8000724:	20000008 	.word	0x20000008

08000728 <HAL_Init>:
{
 8000728:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800072a:	4a07      	ldr	r2, [pc, #28]	@ (8000748 <HAL_Init+0x20>)
 800072c:	6813      	ldr	r3, [r2, #0]
 800072e:	f043 0310 	orr.w	r3, r3, #16
 8000732:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000734:	2003      	movs	r0, #3
 8000736:	f000 fc3f 	bl	8000fb8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800073a:	200f      	movs	r0, #15
 800073c:	f7ff ffce 	bl	80006dc <HAL_InitTick>
  HAL_MspInit();
 8000740:	f7ff fea2 	bl	8000488 <HAL_MspInit>
}
 8000744:	2000      	movs	r0, #0
 8000746:	bd08      	pop	{r3, pc}
 8000748:	40022000 	.word	0x40022000

0800074c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800074c:	4a03      	ldr	r2, [pc, #12]	@ (800075c <HAL_IncTick+0x10>)
 800074e:	6811      	ldr	r1, [r2, #0]
 8000750:	4b03      	ldr	r3, [pc, #12]	@ (8000760 <HAL_IncTick+0x14>)
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	440b      	add	r3, r1
 8000756:	6013      	str	r3, [r2, #0]
}
 8000758:	4770      	bx	lr
 800075a:	bf00      	nop
 800075c:	20000120 	.word	0x20000120
 8000760:	20000004 	.word	0x20000004

08000764 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000764:	4b01      	ldr	r3, [pc, #4]	@ (800076c <HAL_GetTick+0x8>)
 8000766:	6818      	ldr	r0, [r3, #0]
}
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	20000120 	.word	0x20000120

08000770 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000770:	b538      	push	{r3, r4, r5, lr}
 8000772:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000774:	f7ff fff6 	bl	8000764 <HAL_GetTick>
 8000778:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800077a:	f1b4 3fff 	cmp.w	r4, #4294967295
 800077e:	d002      	beq.n	8000786 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8000780:	4b04      	ldr	r3, [pc, #16]	@ (8000794 <HAL_Delay+0x24>)
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000786:	f7ff ffed 	bl	8000764 <HAL_GetTick>
 800078a:	1b40      	subs	r0, r0, r5
 800078c:	42a0      	cmp	r0, r4
 800078e:	d3fa      	bcc.n	8000786 <HAL_Delay+0x16>
  {
  }
}
 8000790:	bd38      	pop	{r3, r4, r5, pc}
 8000792:	bf00      	nop
 8000794:	20000004 	.word	0x20000004

08000798 <HAL_CAN_Init>:
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000798:	2800      	cmp	r0, #0
 800079a:	f000 80a1 	beq.w	80008e0 <HAL_CAN_Init+0x148>
{
 800079e:	b538      	push	{r3, r4, r5, lr}
 80007a0:	4604      	mov	r4, r0
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80007a2:	f890 3020 	ldrb.w	r3, [r0, #32]
 80007a6:	b1d3      	cbz	r3, 80007de <HAL_CAN_Init+0x46>
    HAL_CAN_MspInit(hcan);
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80007a8:	6822      	ldr	r2, [r4, #0]
 80007aa:	6813      	ldr	r3, [r2, #0]
 80007ac:	f043 0301 	orr.w	r3, r3, #1
 80007b0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80007b2:	f7ff ffd7 	bl	8000764 <HAL_GetTick>
 80007b6:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80007b8:	6823      	ldr	r3, [r4, #0]
 80007ba:	685a      	ldr	r2, [r3, #4]
 80007bc:	f012 0f01 	tst.w	r2, #1
 80007c0:	d110      	bne.n	80007e4 <HAL_CAN_Init+0x4c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80007c2:	f7ff ffcf 	bl	8000764 <HAL_GetTick>
 80007c6:	1b40      	subs	r0, r0, r5
 80007c8:	280a      	cmp	r0, #10
 80007ca:	d9f5      	bls.n	80007b8 <HAL_CAN_Init+0x20>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80007cc:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80007ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007d2:	6263      	str	r3, [r4, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80007d4:	2305      	movs	r3, #5
 80007d6:	f884 3020 	strb.w	r3, [r4, #32]

      return HAL_ERROR;
 80007da:	2001      	movs	r0, #1
  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 80007dc:	bd38      	pop	{r3, r4, r5, pc}
    HAL_CAN_MspInit(hcan);
 80007de:	f7ff fe75 	bl	80004cc <HAL_CAN_MspInit>
 80007e2:	e7e1      	b.n	80007a8 <HAL_CAN_Init+0x10>
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80007e4:	681a      	ldr	r2, [r3, #0]
 80007e6:	f022 0202 	bic.w	r2, r2, #2
 80007ea:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 80007ec:	f7ff ffba 	bl	8000764 <HAL_GetTick>
 80007f0:	4605      	mov	r5, r0
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80007f2:	6823      	ldr	r3, [r4, #0]
 80007f4:	685a      	ldr	r2, [r3, #4]
 80007f6:	f012 0f02 	tst.w	r2, #2
 80007fa:	d00d      	beq.n	8000818 <HAL_CAN_Init+0x80>
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80007fc:	f7ff ffb2 	bl	8000764 <HAL_GetTick>
 8000800:	1b40      	subs	r0, r0, r5
 8000802:	280a      	cmp	r0, #10
 8000804:	d9f5      	bls.n	80007f2 <HAL_CAN_Init+0x5a>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000806:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8000808:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800080c:	6263      	str	r3, [r4, #36]	@ 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 800080e:	2305      	movs	r3, #5
 8000810:	f884 3020 	strb.w	r3, [r4, #32]
      return HAL_ERROR;
 8000814:	2001      	movs	r0, #1
 8000816:	e7e1      	b.n	80007dc <HAL_CAN_Init+0x44>
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000818:	7e22      	ldrb	r2, [r4, #24]
 800081a:	2a01      	cmp	r2, #1
 800081c:	d03d      	beq.n	800089a <HAL_CAN_Init+0x102>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800081e:	681a      	ldr	r2, [r3, #0]
 8000820:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000824:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoBusOff == ENABLE)
 8000826:	7e63      	ldrb	r3, [r4, #25]
 8000828:	2b01      	cmp	r3, #1
 800082a:	d03b      	beq.n	80008a4 <HAL_CAN_Init+0x10c>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800082c:	6822      	ldr	r2, [r4, #0]
 800082e:	6813      	ldr	r3, [r2, #0]
 8000830:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000834:	6013      	str	r3, [r2, #0]
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000836:	7ea3      	ldrb	r3, [r4, #26]
 8000838:	2b01      	cmp	r3, #1
 800083a:	d039      	beq.n	80008b0 <HAL_CAN_Init+0x118>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800083c:	6822      	ldr	r2, [r4, #0]
 800083e:	6813      	ldr	r3, [r2, #0]
 8000840:	f023 0320 	bic.w	r3, r3, #32
 8000844:	6013      	str	r3, [r2, #0]
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000846:	7ee3      	ldrb	r3, [r4, #27]
 8000848:	2b01      	cmp	r3, #1
 800084a:	d037      	beq.n	80008bc <HAL_CAN_Init+0x124>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800084c:	6822      	ldr	r2, [r4, #0]
 800084e:	6813      	ldr	r3, [r2, #0]
 8000850:	f043 0310 	orr.w	r3, r3, #16
 8000854:	6013      	str	r3, [r2, #0]
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000856:	7f23      	ldrb	r3, [r4, #28]
 8000858:	2b01      	cmp	r3, #1
 800085a:	d035      	beq.n	80008c8 <HAL_CAN_Init+0x130>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800085c:	6822      	ldr	r2, [r4, #0]
 800085e:	6813      	ldr	r3, [r2, #0]
 8000860:	f023 0308 	bic.w	r3, r3, #8
 8000864:	6013      	str	r3, [r2, #0]
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000866:	7f63      	ldrb	r3, [r4, #29]
 8000868:	2b01      	cmp	r3, #1
 800086a:	d033      	beq.n	80008d4 <HAL_CAN_Init+0x13c>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800086c:	6822      	ldr	r2, [r4, #0]
 800086e:	6813      	ldr	r3, [r2, #0]
 8000870:	f023 0304 	bic.w	r3, r3, #4
 8000874:	6013      	str	r3, [r2, #0]
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000876:	68a3      	ldr	r3, [r4, #8]
 8000878:	68e2      	ldr	r2, [r4, #12]
 800087a:	4313      	orrs	r3, r2
 800087c:	6922      	ldr	r2, [r4, #16]
 800087e:	4313      	orrs	r3, r2
 8000880:	6962      	ldr	r2, [r4, #20]
 8000882:	4313      	orrs	r3, r2
 8000884:	6862      	ldr	r2, [r4, #4]
 8000886:	3a01      	subs	r2, #1
 8000888:	6821      	ldr	r1, [r4, #0]
 800088a:	4313      	orrs	r3, r2
 800088c:	61cb      	str	r3, [r1, #28]
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800088e:	2000      	movs	r0, #0
 8000890:	6260      	str	r0, [r4, #36]	@ 0x24
  hcan->State = HAL_CAN_STATE_READY;
 8000892:	2301      	movs	r3, #1
 8000894:	f884 3020 	strb.w	r3, [r4, #32]
  return HAL_OK;
 8000898:	e7a0      	b.n	80007dc <HAL_CAN_Init+0x44>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800089a:	681a      	ldr	r2, [r3, #0]
 800089c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80008a0:	601a      	str	r2, [r3, #0]
 80008a2:	e7c0      	b.n	8000826 <HAL_CAN_Init+0x8e>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80008a4:	6822      	ldr	r2, [r4, #0]
 80008a6:	6813      	ldr	r3, [r2, #0]
 80008a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80008ac:	6013      	str	r3, [r2, #0]
 80008ae:	e7c2      	b.n	8000836 <HAL_CAN_Init+0x9e>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80008b0:	6822      	ldr	r2, [r4, #0]
 80008b2:	6813      	ldr	r3, [r2, #0]
 80008b4:	f043 0320 	orr.w	r3, r3, #32
 80008b8:	6013      	str	r3, [r2, #0]
 80008ba:	e7c4      	b.n	8000846 <HAL_CAN_Init+0xae>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80008bc:	6822      	ldr	r2, [r4, #0]
 80008be:	6813      	ldr	r3, [r2, #0]
 80008c0:	f023 0310 	bic.w	r3, r3, #16
 80008c4:	6013      	str	r3, [r2, #0]
 80008c6:	e7c6      	b.n	8000856 <HAL_CAN_Init+0xbe>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80008c8:	6822      	ldr	r2, [r4, #0]
 80008ca:	6813      	ldr	r3, [r2, #0]
 80008cc:	f043 0308 	orr.w	r3, r3, #8
 80008d0:	6013      	str	r3, [r2, #0]
 80008d2:	e7c8      	b.n	8000866 <HAL_CAN_Init+0xce>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80008d4:	6822      	ldr	r2, [r4, #0]
 80008d6:	6813      	ldr	r3, [r2, #0]
 80008d8:	f043 0304 	orr.w	r3, r3, #4
 80008dc:	6013      	str	r3, [r2, #0]
 80008de:	e7ca      	b.n	8000876 <HAL_CAN_Init+0xde>
    return HAL_ERROR;
 80008e0:	2001      	movs	r0, #1
}
 80008e2:	4770      	bx	lr

080008e4 <HAL_CAN_ConfigFilter>:
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80008e4:	6802      	ldr	r2, [r0, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80008e6:	f890 3020 	ldrb.w	r3, [r0, #32]

  if ((state == HAL_CAN_STATE_READY) ||
 80008ea:	3b01      	subs	r3, #1
 80008ec:	b2db      	uxtb	r3, r3
 80008ee:	2b01      	cmp	r3, #1
 80008f0:	d905      	bls.n	80008fe <HAL_CAN_ConfigFilter+0x1a>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80008f2:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80008f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80008f8:	6243      	str	r3, [r0, #36]	@ 0x24

    return HAL_ERROR;
 80008fa:	2001      	movs	r0, #1
  }
}
 80008fc:	4770      	bx	lr
{
 80008fe:	b510      	push	{r4, lr}
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000900:	f8d2 3200 	ldr.w	r3, [r2, #512]	@ 0x200
 8000904:	f043 0301 	orr.w	r3, r3, #1
 8000908:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800090c:	694b      	ldr	r3, [r1, #20]
 800090e:	f003 031f 	and.w	r3, r3, #31
 8000912:	2001      	movs	r0, #1
 8000914:	fa00 f303 	lsl.w	r3, r0, r3
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000918:	f8d2 021c 	ldr.w	r0, [r2, #540]	@ 0x21c
 800091c:	ea6f 0c03 	mvn.w	ip, r3
 8000920:	ea20 0003 	bic.w	r0, r0, r3
 8000924:	f8c2 021c 	str.w	r0, [r2, #540]	@ 0x21c
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000928:	69c8      	ldr	r0, [r1, #28]
 800092a:	b9c0      	cbnz	r0, 800095e <HAL_CAN_ConfigFilter+0x7a>
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800092c:	f8d2 020c 	ldr.w	r0, [r2, #524]	@ 0x20c
 8000930:	ea0c 0000 	and.w	r0, ip, r0
 8000934:	f8c2 020c 	str.w	r0, [r2, #524]	@ 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000938:	888c      	ldrh	r4, [r1, #4]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800093a:	6948      	ldr	r0, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800093c:	f8d1 e00c 	ldr.w	lr, [r1, #12]
 8000940:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000944:	3048      	adds	r0, #72	@ 0x48
 8000946:	f842 4030 	str.w	r4, [r2, r0, lsl #3]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800094a:	880c      	ldrh	r4, [r1, #0]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800094c:	6948      	ldr	r0, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800094e:	f8d1 e008 	ldr.w	lr, [r1, #8]
 8000952:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000956:	3048      	adds	r0, #72	@ 0x48
 8000958:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 800095c:	6044      	str	r4, [r0, #4]
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800095e:	69c8      	ldr	r0, [r1, #28]
 8000960:	2801      	cmp	r0, #1
 8000962:	d01a      	beq.n	800099a <HAL_CAN_ConfigFilter+0xb6>
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000964:	6988      	ldr	r0, [r1, #24]
 8000966:	bb88      	cbnz	r0, 80009cc <HAL_CAN_ConfigFilter+0xe8>
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000968:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800096c:	ea0c 0000 	and.w	r0, ip, r0
 8000970:	f8c2 0204 	str.w	r0, [r2, #516]	@ 0x204
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000974:	6908      	ldr	r0, [r1, #16]
 8000976:	bb78      	cbnz	r0, 80009d8 <HAL_CAN_ConfigFilter+0xf4>
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000978:	f8d2 0214 	ldr.w	r0, [r2, #532]	@ 0x214
 800097c:	ea0c 0000 	and.w	r0, ip, r0
 8000980:	f8c2 0214 	str.w	r0, [r2, #532]	@ 0x214
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000984:	6a09      	ldr	r1, [r1, #32]
 8000986:	2901      	cmp	r1, #1
 8000988:	d02c      	beq.n	80009e4 <HAL_CAN_ConfigFilter+0x100>
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800098a:	f8d2 3200 	ldr.w	r3, [r2, #512]	@ 0x200
 800098e:	f023 0301 	bic.w	r3, r3, #1
 8000992:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
    return HAL_OK;
 8000996:	2000      	movs	r0, #0
}
 8000998:	bd10      	pop	{r4, pc}
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800099a:	f8d2 020c 	ldr.w	r0, [r2, #524]	@ 0x20c
 800099e:	4318      	orrs	r0, r3
 80009a0:	f8c2 020c 	str.w	r0, [r2, #524]	@ 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80009a4:	888c      	ldrh	r4, [r1, #4]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80009a6:	6948      	ldr	r0, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80009a8:	f8d1 e000 	ldr.w	lr, [r1]
 80009ac:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80009b0:	3048      	adds	r0, #72	@ 0x48
 80009b2:	f842 4030 	str.w	r4, [r2, r0, lsl #3]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80009b6:	898c      	ldrh	r4, [r1, #12]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80009b8:	6948      	ldr	r0, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80009ba:	f8d1 e008 	ldr.w	lr, [r1, #8]
 80009be:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80009c2:	3048      	adds	r0, #72	@ 0x48
 80009c4:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 80009c8:	6044      	str	r4, [r0, #4]
 80009ca:	e7cb      	b.n	8000964 <HAL_CAN_ConfigFilter+0x80>
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80009cc:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80009d0:	4318      	orrs	r0, r3
 80009d2:	f8c2 0204 	str.w	r0, [r2, #516]	@ 0x204
 80009d6:	e7cd      	b.n	8000974 <HAL_CAN_ConfigFilter+0x90>
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80009d8:	f8d2 0214 	ldr.w	r0, [r2, #532]	@ 0x214
 80009dc:	4318      	orrs	r0, r3
 80009de:	f8c2 0214 	str.w	r0, [r2, #532]	@ 0x214
 80009e2:	e7cf      	b.n	8000984 <HAL_CAN_ConfigFilter+0xa0>
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80009e4:	f8d2 121c 	ldr.w	r1, [r2, #540]	@ 0x21c
 80009e8:	430b      	orrs	r3, r1
 80009ea:	f8c2 321c 	str.w	r3, [r2, #540]	@ 0x21c
 80009ee:	e7cc      	b.n	800098a <HAL_CAN_ConfigFilter+0xa6>

080009f0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80009f0:	b570      	push	{r4, r5, r6, lr}
 80009f2:	4604      	mov	r4, r0
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80009f4:	f890 5020 	ldrb.w	r5, [r0, #32]
 80009f8:	b2ed      	uxtb	r5, r5
 80009fa:	2d01      	cmp	r5, #1
 80009fc:	d006      	beq.n	8000a0c <HAL_CAN_Start+0x1c>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80009fe:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8000a00:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000a04:	6243      	str	r3, [r0, #36]	@ 0x24

    return HAL_ERROR;
 8000a06:	2501      	movs	r5, #1
  }
}
 8000a08:	4628      	mov	r0, r5
 8000a0a:	bd70      	pop	{r4, r5, r6, pc}
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000a0c:	2302      	movs	r3, #2
 8000a0e:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000a12:	6802      	ldr	r2, [r0, #0]
 8000a14:	6813      	ldr	r3, [r2, #0]
 8000a16:	f023 0301 	bic.w	r3, r3, #1
 8000a1a:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8000a1c:	f7ff fea2 	bl	8000764 <HAL_GetTick>
 8000a20:	4606      	mov	r6, r0
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000a22:	6823      	ldr	r3, [r4, #0]
 8000a24:	685b      	ldr	r3, [r3, #4]
 8000a26:	f013 0f01 	tst.w	r3, #1
 8000a2a:	d00c      	beq.n	8000a46 <HAL_CAN_Start+0x56>
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000a2c:	f7ff fe9a 	bl	8000764 <HAL_GetTick>
 8000a30:	1b83      	subs	r3, r0, r6
 8000a32:	2b0a      	cmp	r3, #10
 8000a34:	d9f5      	bls.n	8000a22 <HAL_CAN_Start+0x32>
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000a36:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8000a38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a3c:	6263      	str	r3, [r4, #36]	@ 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 8000a3e:	2305      	movs	r3, #5
 8000a40:	f884 3020 	strb.w	r3, [r4, #32]
        return HAL_ERROR;
 8000a44:	e7e0      	b.n	8000a08 <HAL_CAN_Start+0x18>
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000a46:	2500      	movs	r5, #0
 8000a48:	6265      	str	r5, [r4, #36]	@ 0x24
    return HAL_OK;
 8000a4a:	e7dd      	b.n	8000a08 <HAL_CAN_Start+0x18>

08000a4c <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8000a4c:	b530      	push	{r4, r5, lr}
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000a4e:	f890 c020 	ldrb.w	ip, [r0, #32]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000a52:	6804      	ldr	r4, [r0, #0]
 8000a54:	68a4      	ldr	r4, [r4, #8]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000a56:	f10c 3cff 	add.w	ip, ip, #4294967295
 8000a5a:	fa5f fc8c 	uxtb.w	ip, ip
 8000a5e:	f1bc 0f01 	cmp.w	ip, #1
 8000a62:	d862      	bhi.n	8000b2a <HAL_CAN_AddTxMessage+0xde>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000a64:	f014 5fe0 	tst.w	r4, #469762048	@ 0x1c000000
 8000a68:	d059      	beq.n	8000b1e <HAL_CAN_AddTxMessage+0xd2>
        ((tsr & CAN_TSR_TME1) != 0U) ||
        ((tsr & CAN_TSR_TME2) != 0U))
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000a6a:	f3c4 6c01 	ubfx	ip, r4, #24, #2

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000a6e:	2401      	movs	r4, #1
 8000a70:	fa04 f40c 	lsl.w	r4, r4, ip
 8000a74:	601c      	str	r4, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000a76:	688b      	ldr	r3, [r1, #8]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d13d      	bne.n	8000af8 <HAL_CAN_AddTxMessage+0xac>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000a7c:	680d      	ldr	r5, [r1, #0]
                                                           pHeader->RTR);
 8000a7e:	68cb      	ldr	r3, [r1, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000a80:	6804      	ldr	r4, [r0, #0]
 8000a82:	ea43 5545 	orr.w	r5, r3, r5, lsl #21
 8000a86:	f10c 0318 	add.w	r3, ip, #24
 8000a8a:	011b      	lsls	r3, r3, #4
 8000a8c:	50e5      	str	r5, [r4, r3]
                                                           pHeader->IDE |
                                                           pHeader->RTR);
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000a8e:	6803      	ldr	r3, [r0, #0]
 8000a90:	690c      	ldr	r4, [r1, #16]
 8000a92:	f10c 0e18 	add.w	lr, ip, #24
 8000a96:	eb03 130e 	add.w	r3, r3, lr, lsl #4
 8000a9a:	605c      	str	r4, [r3, #4]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000a9c:	7d0b      	ldrb	r3, [r1, #20]
 8000a9e:	2b01      	cmp	r3, #1
 8000aa0:	d035      	beq.n	8000b0e <HAL_CAN_AddTxMessage+0xc2>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000aa2:	79d1      	ldrb	r1, [r2, #7]
 8000aa4:	7993      	ldrb	r3, [r2, #6]
 8000aa6:	041b      	lsls	r3, r3, #16
 8000aa8:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8000aac:	7951      	ldrb	r1, [r2, #5]
 8000aae:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8000ab2:	7914      	ldrb	r4, [r2, #4]
 8000ab4:	6801      	ldr	r1, [r0, #0]
 8000ab6:	4323      	orrs	r3, r4
 8000ab8:	eb01 110c 	add.w	r1, r1, ip, lsl #4
 8000abc:	f8c1 318c 	str.w	r3, [r1, #396]	@ 0x18c
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000ac0:	78d1      	ldrb	r1, [r2, #3]
 8000ac2:	7893      	ldrb	r3, [r2, #2]
 8000ac4:	041b      	lsls	r3, r3, #16
 8000ac6:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8000aca:	7851      	ldrb	r1, [r2, #1]
 8000acc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8000ad0:	7811      	ldrb	r1, [r2, #0]
 8000ad2:	6802      	ldr	r2, [r0, #0]
 8000ad4:	430b      	orrs	r3, r1
 8000ad6:	eb02 120c 	add.w	r2, r2, ip, lsl #4
 8000ada:	f8c2 3188 	str.w	r3, [r2, #392]	@ 0x188
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000ade:	6802      	ldr	r2, [r0, #0]
 8000ae0:	f10c 0c18 	add.w	ip, ip, #24
 8000ae4:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8000ae8:	f852 300c 	ldr.w	r3, [r2, ip]
 8000aec:	f043 0301 	orr.w	r3, r3, #1
 8000af0:	f842 300c 	str.w	r3, [r2, ip]

      /* Return function status */
      return HAL_OK;
 8000af4:	2000      	movs	r0, #0
 8000af6:	e01d      	b.n	8000b34 <HAL_CAN_AddTxMessage+0xe8>
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000af8:	684c      	ldr	r4, [r1, #4]
 8000afa:	ea43 03c4 	orr.w	r3, r3, r4, lsl #3
                                                           pHeader->RTR);
 8000afe:	68cc      	ldr	r4, [r1, #12]
                                                           pHeader->IDE |
 8000b00:	4323      	orrs	r3, r4
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000b02:	f10c 0418 	add.w	r4, ip, #24
 8000b06:	0124      	lsls	r4, r4, #4
 8000b08:	6805      	ldr	r5, [r0, #0]
 8000b0a:	512b      	str	r3, [r5, r4]
 8000b0c:	e7bf      	b.n	8000a8e <HAL_CAN_AddTxMessage+0x42>
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000b0e:	6803      	ldr	r3, [r0, #0]
 8000b10:	eb03 130e 	add.w	r3, r3, lr, lsl #4
 8000b14:	6859      	ldr	r1, [r3, #4]
 8000b16:	f441 7180 	orr.w	r1, r1, #256	@ 0x100
 8000b1a:	6059      	str	r1, [r3, #4]
 8000b1c:	e7c1      	b.n	8000aa2 <HAL_CAN_AddTxMessage+0x56>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000b1e:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8000b20:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b24:	6243      	str	r3, [r0, #36]	@ 0x24

      return HAL_ERROR;
 8000b26:	2001      	movs	r0, #1
 8000b28:	e004      	b.n	8000b34 <HAL_CAN_AddTxMessage+0xe8>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000b2a:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8000b2c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000b30:	6243      	str	r3, [r0, #36]	@ 0x24

    return HAL_ERROR;
 8000b32:	2001      	movs	r0, #1
  }
}
 8000b34:	bd30      	pop	{r4, r5, pc}

08000b36 <HAL_CAN_GetRxMessage>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
  HAL_CAN_StateTypeDef state = hcan->State;
 8000b36:	f890 c020 	ldrb.w	ip, [r0, #32]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000b3a:	f10c 3cff 	add.w	ip, ip, #4294967295
 8000b3e:	fa5f fc8c 	uxtb.w	ip, ip
 8000b42:	f1bc 0f01 	cmp.w	ip, #1
 8000b46:	f200 80a5 	bhi.w	8000c94 <HAL_CAN_GetRxMessage+0x15e>
{
 8000b4a:	b430      	push	{r4, r5}
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000b4c:	b951      	cbnz	r1, 8000b64 <HAL_CAN_GetRxMessage+0x2e>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000b4e:	6804      	ldr	r4, [r0, #0]
 8000b50:	68e4      	ldr	r4, [r4, #12]
 8000b52:	f014 0f03 	tst.w	r4, #3
 8000b56:	d110      	bne.n	8000b7a <HAL_CAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000b58:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8000b5a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b5e:	6243      	str	r3, [r0, #36]	@ 0x24

        return HAL_ERROR;
 8000b60:	2001      	movs	r0, #1
 8000b62:	e07e      	b.n	8000c62 <HAL_CAN_GetRxMessage+0x12c>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000b64:	6804      	ldr	r4, [r0, #0]
 8000b66:	6924      	ldr	r4, [r4, #16]
 8000b68:	f014 0f03 	tst.w	r4, #3
 8000b6c:	d105      	bne.n	8000b7a <HAL_CAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000b6e:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8000b70:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b74:	6243      	str	r3, [r0, #36]	@ 0x24

        return HAL_ERROR;
 8000b76:	2001      	movs	r0, #1
 8000b78:	e073      	b.n	8000c62 <HAL_CAN_GetRxMessage+0x12c>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000b7a:	6805      	ldr	r5, [r0, #0]
 8000b7c:	f101 041b 	add.w	r4, r1, #27
 8000b80:	0124      	lsls	r4, r4, #4
 8000b82:	592c      	ldr	r4, [r5, r4]
 8000b84:	f004 0404 	and.w	r4, r4, #4
 8000b88:	6094      	str	r4, [r2, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8000b8a:	2c00      	cmp	r4, #0
 8000b8c:	d16b      	bne.n	8000c66 <HAL_CAN_GetRxMessage+0x130>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000b8e:	6805      	ldr	r5, [r0, #0]
 8000b90:	f101 041b 	add.w	r4, r1, #27
 8000b94:	0124      	lsls	r4, r4, #4
 8000b96:	592c      	ldr	r4, [r5, r4]
 8000b98:	0d64      	lsrs	r4, r4, #21
 8000b9a:	6014      	str	r4, [r2, #0]
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8000b9c:	6804      	ldr	r4, [r0, #0]
 8000b9e:	f101 0c1b 	add.w	ip, r1, #27
 8000ba2:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8000ba6:	f854 400c 	ldr.w	r4, [r4, ip]
 8000baa:	f004 0402 	and.w	r4, r4, #2
 8000bae:	60d4      	str	r4, [r2, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8000bb0:	6804      	ldr	r4, [r0, #0]
 8000bb2:	44a4      	add	ip, r4
 8000bb4:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8000bb8:	f015 0f08 	tst.w	r5, #8
 8000bbc:	d05b      	beq.n	8000c76 <HAL_CAN_GetRxMessage+0x140>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8000bbe:	2408      	movs	r4, #8
 8000bc0:	6114      	str	r4, [r2, #16]
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000bc2:	6804      	ldr	r4, [r0, #0]
 8000bc4:	f101 0c1b 	add.w	ip, r1, #27
 8000bc8:	eb04 140c 	add.w	r4, r4, ip, lsl #4
 8000bcc:	6864      	ldr	r4, [r4, #4]
 8000bce:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8000bd2:	6194      	str	r4, [r2, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000bd4:	6804      	ldr	r4, [r0, #0]
 8000bd6:	eb04 140c 	add.w	r4, r4, ip, lsl #4
 8000bda:	6864      	ldr	r4, [r4, #4]
 8000bdc:	0c24      	lsrs	r4, r4, #16
 8000bde:	6154      	str	r4, [r2, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000be0:	6802      	ldr	r2, [r0, #0]
 8000be2:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8000be6:	f8d2 21b8 	ldr.w	r2, [r2, #440]	@ 0x1b8
 8000bea:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8000bec:	6802      	ldr	r2, [r0, #0]
 8000bee:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8000bf2:	f8d2 21b8 	ldr.w	r2, [r2, #440]	@ 0x1b8
 8000bf6:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8000bfa:	705a      	strb	r2, [r3, #1]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8000bfc:	6802      	ldr	r2, [r0, #0]
 8000bfe:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8000c02:	f8d2 21b8 	ldr.w	r2, [r2, #440]	@ 0x1b8
 8000c06:	f3c2 4207 	ubfx	r2, r2, #16, #8
 8000c0a:	709a      	strb	r2, [r3, #2]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8000c0c:	6802      	ldr	r2, [r0, #0]
 8000c0e:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8000c12:	f8d2 21b8 	ldr.w	r2, [r2, #440]	@ 0x1b8
 8000c16:	0e12      	lsrs	r2, r2, #24
 8000c18:	70da      	strb	r2, [r3, #3]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8000c1a:	6802      	ldr	r2, [r0, #0]
 8000c1c:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8000c20:	f8d2 21bc 	ldr.w	r2, [r2, #444]	@ 0x1bc
 8000c24:	711a      	strb	r2, [r3, #4]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8000c26:	6802      	ldr	r2, [r0, #0]
 8000c28:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8000c2c:	f8d2 21bc 	ldr.w	r2, [r2, #444]	@ 0x1bc
 8000c30:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8000c34:	715a      	strb	r2, [r3, #5]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8000c36:	6802      	ldr	r2, [r0, #0]
 8000c38:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8000c3c:	f8d2 21bc 	ldr.w	r2, [r2, #444]	@ 0x1bc
 8000c40:	f3c2 4207 	ubfx	r2, r2, #16, #8
 8000c44:	719a      	strb	r2, [r3, #6]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8000c46:	6802      	ldr	r2, [r0, #0]
 8000c48:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8000c4c:	f8d2 21bc 	ldr.w	r2, [r2, #444]	@ 0x1bc
 8000c50:	0e12      	lsrs	r2, r2, #24
 8000c52:	71da      	strb	r2, [r3, #7]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000c54:	b9c1      	cbnz	r1, 8000c88 <HAL_CAN_GetRxMessage+0x152>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8000c56:	6802      	ldr	r2, [r0, #0]
 8000c58:	68d3      	ldr	r3, [r2, #12]
 8000c5a:	f043 0320 	orr.w	r3, r3, #32
 8000c5e:	60d3      	str	r3, [r2, #12]
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
    }

    /* Return function status */
    return HAL_OK;
 8000c60:	2000      	movs	r0, #0
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;

    return HAL_ERROR;
  }
}
 8000c62:	bc30      	pop	{r4, r5}
 8000c64:	4770      	bx	lr
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8000c66:	6805      	ldr	r5, [r0, #0]
 8000c68:	f101 041b 	add.w	r4, r1, #27
 8000c6c:	0124      	lsls	r4, r4, #4
 8000c6e:	592c      	ldr	r4, [r5, r4]
 8000c70:	08e4      	lsrs	r4, r4, #3
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8000c72:	6054      	str	r4, [r2, #4]
 8000c74:	e792      	b.n	8000b9c <HAL_CAN_GetRxMessage+0x66>
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000c76:	f101 051b 	add.w	r5, r1, #27
 8000c7a:	eb04 1405 	add.w	r4, r4, r5, lsl #4
 8000c7e:	6864      	ldr	r4, [r4, #4]
 8000c80:	f004 040f 	and.w	r4, r4, #15
 8000c84:	6114      	str	r4, [r2, #16]
 8000c86:	e79c      	b.n	8000bc2 <HAL_CAN_GetRxMessage+0x8c>
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8000c88:	6802      	ldr	r2, [r0, #0]
 8000c8a:	6913      	ldr	r3, [r2, #16]
 8000c8c:	f043 0320 	orr.w	r3, r3, #32
 8000c90:	6113      	str	r3, [r2, #16]
 8000c92:	e7e5      	b.n	8000c60 <HAL_CAN_GetRxMessage+0x12a>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000c94:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8000c96:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000c9a:	6243      	str	r3, [r0, #36]	@ 0x24
    return HAL_ERROR;
 8000c9c:	2001      	movs	r0, #1
}
 8000c9e:	4770      	bx	lr

08000ca0 <HAL_CAN_GetRxFifoFillLevel>:
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(const CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
  uint32_t filllevel = 0U;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000ca0:	f890 3020 	ldrb.w	r3, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000ca4:	3b01      	subs	r3, #1
 8000ca6:	b2db      	uxtb	r3, r3
 8000ca8:	2b01      	cmp	r3, #1
 8000caa:	d901      	bls.n	8000cb0 <HAL_CAN_GetRxFifoFillLevel+0x10>
  uint32_t filllevel = 0U;
 8000cac:	2000      	movs	r0, #0
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
}
 8000cae:	4770      	bx	lr
    if (RxFifo == CAN_RX_FIFO0)
 8000cb0:	b921      	cbnz	r1, 8000cbc <HAL_CAN_GetRxFifoFillLevel+0x1c>
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8000cb2:	6803      	ldr	r3, [r0, #0]
 8000cb4:	68d8      	ldr	r0, [r3, #12]
 8000cb6:	f000 0003 	and.w	r0, r0, #3
 8000cba:	4770      	bx	lr
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8000cbc:	6803      	ldr	r3, [r0, #0]
 8000cbe:	6918      	ldr	r0, [r3, #16]
 8000cc0:	f000 0003 	and.w	r0, r0, #3
 8000cc4:	4770      	bx	lr

08000cc6 <HAL_CAN_ActivateNotification>:
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
  HAL_CAN_StateTypeDef state = hcan->State;
 8000cc6:	f890 3020 	ldrb.w	r3, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8000cca:	3b01      	subs	r3, #1
 8000ccc:	b2db      	uxtb	r3, r3
 8000cce:	2b01      	cmp	r3, #1
 8000cd0:	d905      	bls.n	8000cde <HAL_CAN_ActivateNotification+0x18>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000cd2:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8000cd4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000cd8:	6243      	str	r3, [r0, #36]	@ 0x24

    return HAL_ERROR;
 8000cda:	2001      	movs	r0, #1
  }
}
 8000cdc:	4770      	bx	lr
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8000cde:	6802      	ldr	r2, [r0, #0]
 8000ce0:	6953      	ldr	r3, [r2, #20]
 8000ce2:	430b      	orrs	r3, r1
 8000ce4:	6153      	str	r3, [r2, #20]
    return HAL_OK;
 8000ce6:	2000      	movs	r0, #0
 8000ce8:	4770      	bx	lr

08000cea <HAL_CAN_TxMailbox0CompleteCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8000cea:	4770      	bx	lr

08000cec <HAL_CAN_TxMailbox1CompleteCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8000cec:	4770      	bx	lr

08000cee <HAL_CAN_TxMailbox2CompleteCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8000cee:	4770      	bx	lr

08000cf0 <HAL_CAN_TxMailbox0AbortCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8000cf0:	4770      	bx	lr

08000cf2 <HAL_CAN_TxMailbox1AbortCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8000cf2:	4770      	bx	lr

08000cf4 <HAL_CAN_TxMailbox2AbortCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8000cf4:	4770      	bx	lr

08000cf6 <HAL_CAN_RxFifo0MsgPendingCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8000cf6:	4770      	bx	lr

08000cf8 <HAL_CAN_RxFifo0FullCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8000cf8:	4770      	bx	lr

08000cfa <HAL_CAN_RxFifo1MsgPendingCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8000cfa:	4770      	bx	lr

08000cfc <HAL_CAN_RxFifo1FullCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8000cfc:	4770      	bx	lr

08000cfe <HAL_CAN_SleepCallback>:
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8000cfe:	4770      	bx	lr

08000d00 <HAL_CAN_WakeUpFromRxMsgCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8000d00:	4770      	bx	lr

08000d02 <HAL_CAN_ErrorCallback>:
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8000d02:	4770      	bx	lr

08000d04 <HAL_CAN_IRQHandler>:
{
 8000d04:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d08:	4605      	mov	r5, r0
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8000d0a:	6803      	ldr	r3, [r0, #0]
 8000d0c:	695c      	ldr	r4, [r3, #20]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8000d0e:	f8d3 8004 	ldr.w	r8, [r3, #4]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8000d12:	689f      	ldr	r7, [r3, #8]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8000d14:	f8d3 b00c 	ldr.w	fp, [r3, #12]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8000d18:	f8d3 a010 	ldr.w	sl, [r3, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8000d1c:	f8d3 9018 	ldr.w	r9, [r3, #24]
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8000d20:	f014 0601 	ands.w	r6, r4, #1
 8000d24:	d03b      	beq.n	8000d9e <HAL_CAN_IRQHandler+0x9a>
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8000d26:	f017 0601 	ands.w	r6, r7, #1
 8000d2a:	d016      	beq.n	8000d5a <HAL_CAN_IRQHandler+0x56>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8000d30:	f017 0f02 	tst.w	r7, #2
 8000d34:	d108      	bne.n	8000d48 <HAL_CAN_IRQHandler+0x44>
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8000d36:	f017 0f04 	tst.w	r7, #4
 8000d3a:	d10c      	bne.n	8000d56 <HAL_CAN_IRQHandler+0x52>
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8000d3c:	f017 0608 	ands.w	r6, r7, #8
 8000d40:	d006      	beq.n	8000d50 <HAL_CAN_IRQHandler+0x4c>
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8000d42:	f44f 5680 	mov.w	r6, #4096	@ 0x1000
 8000d46:	e008      	b.n	8000d5a <HAL_CAN_IRQHandler+0x56>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8000d48:	f7ff ffcf 	bl	8000cea <HAL_CAN_TxMailbox0CompleteCallback>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8000d4c:	2600      	movs	r6, #0
 8000d4e:	e004      	b.n	8000d5a <HAL_CAN_IRQHandler+0x56>
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8000d50:	f7ff ffce 	bl	8000cf0 <HAL_CAN_TxMailbox0AbortCallback>
 8000d54:	e001      	b.n	8000d5a <HAL_CAN_IRQHandler+0x56>
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8000d56:	f44f 6600 	mov.w	r6, #2048	@ 0x800
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8000d5a:	f417 7f80 	tst.w	r7, #256	@ 0x100
 8000d5e:	d00d      	beq.n	8000d7c <HAL_CAN_IRQHandler+0x78>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8000d60:	682b      	ldr	r3, [r5, #0]
 8000d62:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000d66:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8000d68:	f417 7f00 	tst.w	r7, #512	@ 0x200
 8000d6c:	f040 8086 	bne.w	8000e7c <HAL_CAN_IRQHandler+0x178>
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8000d70:	f417 6f80 	tst.w	r7, #1024	@ 0x400
 8000d74:	f000 8086 	beq.w	8000e84 <HAL_CAN_IRQHandler+0x180>
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8000d78:	f446 5600 	orr.w	r6, r6, #8192	@ 0x2000
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8000d7c:	f417 3f80 	tst.w	r7, #65536	@ 0x10000
 8000d80:	d00d      	beq.n	8000d9e <HAL_CAN_IRQHandler+0x9a>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8000d82:	682b      	ldr	r3, [r5, #0]
 8000d84:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000d88:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8000d8a:	f417 3f00 	tst.w	r7, #131072	@ 0x20000
 8000d8e:	f040 8083 	bne.w	8000e98 <HAL_CAN_IRQHandler+0x194>
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8000d92:	f417 2f80 	tst.w	r7, #262144	@ 0x40000
 8000d96:	f000 8083 	beq.w	8000ea0 <HAL_CAN_IRQHandler+0x19c>
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8000d9a:	f446 4600 	orr.w	r6, r6, #32768	@ 0x8000
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8000d9e:	f014 0f08 	tst.w	r4, #8
 8000da2:	d007      	beq.n	8000db4 <HAL_CAN_IRQHandler+0xb0>
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8000da4:	f01b 0f10 	tst.w	fp, #16
 8000da8:	d004      	beq.n	8000db4 <HAL_CAN_IRQHandler+0xb0>
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8000daa:	f446 7600 	orr.w	r6, r6, #512	@ 0x200
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8000dae:	682b      	ldr	r3, [r5, #0]
 8000db0:	2210      	movs	r2, #16
 8000db2:	60da      	str	r2, [r3, #12]
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8000db4:	f014 0f04 	tst.w	r4, #4
 8000db8:	d002      	beq.n	8000dc0 <HAL_CAN_IRQHandler+0xbc>
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8000dba:	f01b 0f08 	tst.w	fp, #8
 8000dbe:	d179      	bne.n	8000eb4 <HAL_CAN_IRQHandler+0x1b0>
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8000dc0:	f014 0f02 	tst.w	r4, #2
 8000dc4:	d004      	beq.n	8000dd0 <HAL_CAN_IRQHandler+0xcc>
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8000dc6:	682b      	ldr	r3, [r5, #0]
 8000dc8:	68db      	ldr	r3, [r3, #12]
 8000dca:	f013 0f03 	tst.w	r3, #3
 8000dce:	d178      	bne.n	8000ec2 <HAL_CAN_IRQHandler+0x1be>
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8000dd0:	f014 0f40 	tst.w	r4, #64	@ 0x40
 8000dd4:	d007      	beq.n	8000de6 <HAL_CAN_IRQHandler+0xe2>
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8000dd6:	f01a 0f10 	tst.w	sl, #16
 8000dda:	d004      	beq.n	8000de6 <HAL_CAN_IRQHandler+0xe2>
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8000ddc:	f446 6680 	orr.w	r6, r6, #1024	@ 0x400
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8000de0:	682b      	ldr	r3, [r5, #0]
 8000de2:	2210      	movs	r2, #16
 8000de4:	611a      	str	r2, [r3, #16]
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8000de6:	f014 0f20 	tst.w	r4, #32
 8000dea:	d002      	beq.n	8000df2 <HAL_CAN_IRQHandler+0xee>
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8000dec:	f01a 0f08 	tst.w	sl, #8
 8000df0:	d16b      	bne.n	8000eca <HAL_CAN_IRQHandler+0x1c6>
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8000df2:	f014 0f10 	tst.w	r4, #16
 8000df6:	d004      	beq.n	8000e02 <HAL_CAN_IRQHandler+0xfe>
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8000df8:	682b      	ldr	r3, [r5, #0]
 8000dfa:	691b      	ldr	r3, [r3, #16]
 8000dfc:	f013 0f03 	tst.w	r3, #3
 8000e00:	d16a      	bne.n	8000ed8 <HAL_CAN_IRQHandler+0x1d4>
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8000e02:	f414 3f00 	tst.w	r4, #131072	@ 0x20000
 8000e06:	d002      	beq.n	8000e0e <HAL_CAN_IRQHandler+0x10a>
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8000e08:	f018 0f10 	tst.w	r8, #16
 8000e0c:	d168      	bne.n	8000ee0 <HAL_CAN_IRQHandler+0x1dc>
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8000e0e:	f414 3f80 	tst.w	r4, #65536	@ 0x10000
 8000e12:	d002      	beq.n	8000e1a <HAL_CAN_IRQHandler+0x116>
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8000e14:	f018 0f08 	tst.w	r8, #8
 8000e18:	d169      	bne.n	8000eee <HAL_CAN_IRQHandler+0x1ea>
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8000e1a:	f414 4f00 	tst.w	r4, #32768	@ 0x8000
 8000e1e:	d07a      	beq.n	8000f16 <HAL_CAN_IRQHandler+0x212>
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8000e20:	f018 0f04 	tst.w	r8, #4
 8000e24:	d074      	beq.n	8000f10 <HAL_CAN_IRQHandler+0x20c>
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8000e26:	f414 7f80 	tst.w	r4, #256	@ 0x100
 8000e2a:	d004      	beq.n	8000e36 <HAL_CAN_IRQHandler+0x132>
 8000e2c:	f019 0f01 	tst.w	r9, #1
 8000e30:	d001      	beq.n	8000e36 <HAL_CAN_IRQHandler+0x132>
        errorcode |= HAL_CAN_ERROR_EWG;
 8000e32:	f046 0601 	orr.w	r6, r6, #1
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8000e36:	f414 7f00 	tst.w	r4, #512	@ 0x200
 8000e3a:	d004      	beq.n	8000e46 <HAL_CAN_IRQHandler+0x142>
 8000e3c:	f019 0f02 	tst.w	r9, #2
 8000e40:	d001      	beq.n	8000e46 <HAL_CAN_IRQHandler+0x142>
        errorcode |= HAL_CAN_ERROR_EPV;
 8000e42:	f046 0602 	orr.w	r6, r6, #2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8000e46:	f414 6f80 	tst.w	r4, #1024	@ 0x400
 8000e4a:	d004      	beq.n	8000e56 <HAL_CAN_IRQHandler+0x152>
 8000e4c:	f019 0f04 	tst.w	r9, #4
 8000e50:	d001      	beq.n	8000e56 <HAL_CAN_IRQHandler+0x152>
        errorcode |= HAL_CAN_ERROR_BOF;
 8000e52:	f046 0604 	orr.w	r6, r6, #4
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8000e56:	f414 6f00 	tst.w	r4, #2048	@ 0x800
 8000e5a:	d059      	beq.n	8000f10 <HAL_CAN_IRQHandler+0x20c>
 8000e5c:	f019 0970 	ands.w	r9, r9, #112	@ 0x70
 8000e60:	d056      	beq.n	8000f10 <HAL_CAN_IRQHandler+0x20c>
        switch (esrflags & CAN_ESR_LEC)
 8000e62:	f1b9 0f40 	cmp.w	r9, #64	@ 0x40
 8000e66:	d065      	beq.n	8000f34 <HAL_CAN_IRQHandler+0x230>
 8000e68:	d858      	bhi.n	8000f1c <HAL_CAN_IRQHandler+0x218>
 8000e6a:	f1b9 0f20 	cmp.w	r9, #32
 8000e6e:	d05e      	beq.n	8000f2e <HAL_CAN_IRQHandler+0x22a>
 8000e70:	f1b9 0f30 	cmp.w	r9, #48	@ 0x30
 8000e74:	d142      	bne.n	8000efc <HAL_CAN_IRQHandler+0x1f8>
            errorcode |= HAL_CAN_ERROR_ACK;
 8000e76:	f046 0620 	orr.w	r6, r6, #32
            break;
 8000e7a:	e044      	b.n	8000f06 <HAL_CAN_IRQHandler+0x202>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8000e7c:	4628      	mov	r0, r5
 8000e7e:	f7ff ff35 	bl	8000cec <HAL_CAN_TxMailbox1CompleteCallback>
 8000e82:	e77b      	b.n	8000d7c <HAL_CAN_IRQHandler+0x78>
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8000e84:	f417 6f00 	tst.w	r7, #2048	@ 0x800
 8000e88:	d002      	beq.n	8000e90 <HAL_CAN_IRQHandler+0x18c>
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8000e8a:	f446 4680 	orr.w	r6, r6, #16384	@ 0x4000
 8000e8e:	e775      	b.n	8000d7c <HAL_CAN_IRQHandler+0x78>
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8000e90:	4628      	mov	r0, r5
 8000e92:	f7ff ff2e 	bl	8000cf2 <HAL_CAN_TxMailbox1AbortCallback>
 8000e96:	e771      	b.n	8000d7c <HAL_CAN_IRQHandler+0x78>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8000e98:	4628      	mov	r0, r5
 8000e9a:	f7ff ff28 	bl	8000cee <HAL_CAN_TxMailbox2CompleteCallback>
 8000e9e:	e77e      	b.n	8000d9e <HAL_CAN_IRQHandler+0x9a>
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8000ea0:	f417 2f00 	tst.w	r7, #524288	@ 0x80000
 8000ea4:	d002      	beq.n	8000eac <HAL_CAN_IRQHandler+0x1a8>
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8000ea6:	f446 3680 	orr.w	r6, r6, #65536	@ 0x10000
 8000eaa:	e778      	b.n	8000d9e <HAL_CAN_IRQHandler+0x9a>
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8000eac:	4628      	mov	r0, r5
 8000eae:	f7ff ff21 	bl	8000cf4 <HAL_CAN_TxMailbox2AbortCallback>
 8000eb2:	e774      	b.n	8000d9e <HAL_CAN_IRQHandler+0x9a>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8000eb4:	682b      	ldr	r3, [r5, #0]
 8000eb6:	2208      	movs	r2, #8
 8000eb8:	60da      	str	r2, [r3, #12]
      HAL_CAN_RxFifo0FullCallback(hcan);
 8000eba:	4628      	mov	r0, r5
 8000ebc:	f7ff ff1c 	bl	8000cf8 <HAL_CAN_RxFifo0FullCallback>
 8000ec0:	e77e      	b.n	8000dc0 <HAL_CAN_IRQHandler+0xbc>
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8000ec2:	4628      	mov	r0, r5
 8000ec4:	f7ff ff17 	bl	8000cf6 <HAL_CAN_RxFifo0MsgPendingCallback>
 8000ec8:	e782      	b.n	8000dd0 <HAL_CAN_IRQHandler+0xcc>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8000eca:	682b      	ldr	r3, [r5, #0]
 8000ecc:	2208      	movs	r2, #8
 8000ece:	611a      	str	r2, [r3, #16]
      HAL_CAN_RxFifo1FullCallback(hcan);
 8000ed0:	4628      	mov	r0, r5
 8000ed2:	f7ff ff13 	bl	8000cfc <HAL_CAN_RxFifo1FullCallback>
 8000ed6:	e78c      	b.n	8000df2 <HAL_CAN_IRQHandler+0xee>
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8000ed8:	4628      	mov	r0, r5
 8000eda:	f7ff ff0e 	bl	8000cfa <HAL_CAN_RxFifo1MsgPendingCallback>
 8000ede:	e790      	b.n	8000e02 <HAL_CAN_IRQHandler+0xfe>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8000ee0:	682b      	ldr	r3, [r5, #0]
 8000ee2:	2210      	movs	r2, #16
 8000ee4:	605a      	str	r2, [r3, #4]
      HAL_CAN_SleepCallback(hcan);
 8000ee6:	4628      	mov	r0, r5
 8000ee8:	f7ff ff09 	bl	8000cfe <HAL_CAN_SleepCallback>
 8000eec:	e78f      	b.n	8000e0e <HAL_CAN_IRQHandler+0x10a>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8000eee:	682b      	ldr	r3, [r5, #0]
 8000ef0:	2208      	movs	r2, #8
 8000ef2:	605a      	str	r2, [r3, #4]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8000ef4:	4628      	mov	r0, r5
 8000ef6:	f7ff ff03 	bl	8000d00 <HAL_CAN_WakeUpFromRxMsgCallback>
 8000efa:	e78e      	b.n	8000e1a <HAL_CAN_IRQHandler+0x116>
        switch (esrflags & CAN_ESR_LEC)
 8000efc:	f1b9 0f10 	cmp.w	r9, #16
 8000f00:	d101      	bne.n	8000f06 <HAL_CAN_IRQHandler+0x202>
            errorcode |= HAL_CAN_ERROR_STF;
 8000f02:	f046 0608 	orr.w	r6, r6, #8
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8000f06:	682a      	ldr	r2, [r5, #0]
 8000f08:	6993      	ldr	r3, [r2, #24]
 8000f0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8000f0e:	6193      	str	r3, [r2, #24]
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8000f10:	682b      	ldr	r3, [r5, #0]
 8000f12:	2204      	movs	r2, #4
 8000f14:	605a      	str	r2, [r3, #4]
  if (errorcode != HAL_CAN_ERROR_NONE)
 8000f16:	b99e      	cbnz	r6, 8000f40 <HAL_CAN_IRQHandler+0x23c>
}
 8000f18:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        switch (esrflags & CAN_ESR_LEC)
 8000f1c:	f1b9 0f50 	cmp.w	r9, #80	@ 0x50
 8000f20:	d00b      	beq.n	8000f3a <HAL_CAN_IRQHandler+0x236>
 8000f22:	f1b9 0f60 	cmp.w	r9, #96	@ 0x60
 8000f26:	d1ee      	bne.n	8000f06 <HAL_CAN_IRQHandler+0x202>
            errorcode |= HAL_CAN_ERROR_CRC;
 8000f28:	f446 7680 	orr.w	r6, r6, #256	@ 0x100
            break;
 8000f2c:	e7eb      	b.n	8000f06 <HAL_CAN_IRQHandler+0x202>
            errorcode |= HAL_CAN_ERROR_FOR;
 8000f2e:	f046 0610 	orr.w	r6, r6, #16
            break;
 8000f32:	e7e8      	b.n	8000f06 <HAL_CAN_IRQHandler+0x202>
            errorcode |= HAL_CAN_ERROR_BR;
 8000f34:	f046 0640 	orr.w	r6, r6, #64	@ 0x40
            break;
 8000f38:	e7e5      	b.n	8000f06 <HAL_CAN_IRQHandler+0x202>
            errorcode |= HAL_CAN_ERROR_BD;
 8000f3a:	f046 0680 	orr.w	r6, r6, #128	@ 0x80
            break;
 8000f3e:	e7e2      	b.n	8000f06 <HAL_CAN_IRQHandler+0x202>
    hcan->ErrorCode |= errorcode;
 8000f40:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8000f42:	4333      	orrs	r3, r6
 8000f44:	626b      	str	r3, [r5, #36]	@ 0x24
    HAL_CAN_ErrorCallback(hcan);
 8000f46:	4628      	mov	r0, r5
 8000f48:	f7ff fedb 	bl	8000d02 <HAL_CAN_ErrorCallback>
}
 8000f4c:	e7e4      	b.n	8000f18 <HAL_CAN_IRQHandler+0x214>
	...

08000f50 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8000f50:	2800      	cmp	r0, #0
 8000f52:	db08      	blt.n	8000f66 <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f54:	0109      	lsls	r1, r1, #4
 8000f56:	b2c9      	uxtb	r1, r1
 8000f58:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8000f5c:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8000f60:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 8000f64:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f66:	f000 000f 	and.w	r0, r0, #15
 8000f6a:	0109      	lsls	r1, r1, #4
 8000f6c:	b2c9      	uxtb	r1, r1
 8000f6e:	4b01      	ldr	r3, [pc, #4]	@ (8000f74 <__NVIC_SetPriority+0x24>)
 8000f70:	5419      	strb	r1, [r3, r0]
  }
}
 8000f72:	4770      	bx	lr
 8000f74:	e000ed14 	.word	0xe000ed14

08000f78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f78:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f7a:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f7e:	f1c0 0c07 	rsb	ip, r0, #7
 8000f82:	f1bc 0f04 	cmp.w	ip, #4
 8000f86:	bf28      	it	cs
 8000f88:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f8c:	1d03      	adds	r3, r0, #4
 8000f8e:	2b06      	cmp	r3, #6
 8000f90:	d90f      	bls.n	8000fb2 <NVIC_EncodePriority+0x3a>
 8000f92:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f94:	f04f 3eff 	mov.w	lr, #4294967295
 8000f98:	fa0e f00c 	lsl.w	r0, lr, ip
 8000f9c:	ea21 0100 	bic.w	r1, r1, r0
 8000fa0:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fa2:	fa0e fe03 	lsl.w	lr, lr, r3
 8000fa6:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 8000faa:	ea41 0002 	orr.w	r0, r1, r2
 8000fae:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	e7ee      	b.n	8000f94 <NVIC_EncodePriority+0x1c>
	...

08000fb8 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fb8:	4a07      	ldr	r2, [pc, #28]	@ (8000fd8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000fba:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fbc:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8000fc0:	041b      	lsls	r3, r3, #16
 8000fc2:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000fc4:	0200      	lsls	r0, r0, #8
 8000fc6:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fca:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8000fcc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000fd0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8000fd4:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000fd6:	4770      	bx	lr
 8000fd8:	e000ed00 	.word	0xe000ed00

08000fdc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fdc:	b510      	push	{r4, lr}
 8000fde:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fe0:	4b05      	ldr	r3, [pc, #20]	@ (8000ff8 <HAL_NVIC_SetPriority+0x1c>)
 8000fe2:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fe4:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8000fe8:	f7ff ffc6 	bl	8000f78 <NVIC_EncodePriority>
 8000fec:	4601      	mov	r1, r0
 8000fee:	4620      	mov	r0, r4
 8000ff0:	f7ff ffae 	bl	8000f50 <__NVIC_SetPriority>
}
 8000ff4:	bd10      	pop	{r4, pc}
 8000ff6:	bf00      	nop
 8000ff8:	e000ed00 	.word	0xe000ed00

08000ffc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000ffc:	2800      	cmp	r0, #0
 8000ffe:	db07      	blt.n	8001010 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001000:	f000 021f 	and.w	r2, r0, #31
 8001004:	0940      	lsrs	r0, r0, #5
 8001006:	2301      	movs	r3, #1
 8001008:	4093      	lsls	r3, r2
 800100a:	4a02      	ldr	r2, [pc, #8]	@ (8001014 <HAL_NVIC_EnableIRQ+0x18>)
 800100c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	e000e100 	.word	0xe000e100

08001018 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001018:	3801      	subs	r0, #1
 800101a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 800101e:	d20b      	bcs.n	8001038 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001020:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8001024:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001026:	4a05      	ldr	r2, [pc, #20]	@ (800103c <HAL_SYSTICK_Config+0x24>)
 8001028:	21f0      	movs	r1, #240	@ 0xf0
 800102a:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800102e:	2000      	movs	r0, #0
 8001030:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001032:	2207      	movs	r2, #7
 8001034:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001036:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001038:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800103a:	4770      	bx	lr
 800103c:	e000ed00 	.word	0xe000ed00

08001040 <FLASH_Program_HalfWord>:
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001040:	4b04      	ldr	r3, [pc, #16]	@ (8001054 <FLASH_Program_HalfWord+0x14>)
 8001042:	2200      	movs	r2, #0
 8001044:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8001046:	4a04      	ldr	r2, [pc, #16]	@ (8001058 <FLASH_Program_HalfWord+0x18>)
 8001048:	6913      	ldr	r3, [r2, #16]
 800104a:	f043 0301 	orr.w	r3, r3, #1
 800104e:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8001050:	8001      	strh	r1, [r0, #0]
}
 8001052:	4770      	bx	lr
 8001054:	20000128 	.word	0x20000128
 8001058:	40022000 	.word	0x40022000

0800105c <FLASH_SetErrorCode>:
  uint32_t flags = 0U;
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800105c:	4b19      	ldr	r3, [pc, #100]	@ (80010c4 <FLASH_SetErrorCode+0x68>)
 800105e:	68db      	ldr	r3, [r3, #12]
 8001060:	f013 0310 	ands.w	r3, r3, #16
 8001064:	d005      	beq.n	8001072 <FLASH_SetErrorCode+0x16>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001066:	4a18      	ldr	r2, [pc, #96]	@ (80010c8 <FLASH_SetErrorCode+0x6c>)
 8001068:	69d3      	ldr	r3, [r2, #28]
 800106a:	f043 0302 	orr.w	r3, r3, #2
 800106e:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8001070:	2310      	movs	r3, #16
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001072:	4a14      	ldr	r2, [pc, #80]	@ (80010c4 <FLASH_SetErrorCode+0x68>)
 8001074:	68d2      	ldr	r2, [r2, #12]
 8001076:	f012 0f04 	tst.w	r2, #4
 800107a:	d006      	beq.n	800108a <FLASH_SetErrorCode+0x2e>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800107c:	4912      	ldr	r1, [pc, #72]	@ (80010c8 <FLASH_SetErrorCode+0x6c>)
 800107e:	69ca      	ldr	r2, [r1, #28]
 8001080:	f042 0201 	orr.w	r2, r2, #1
 8001084:	61ca      	str	r2, [r1, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8001086:	f043 0304 	orr.w	r3, r3, #4
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800108a:	4a0e      	ldr	r2, [pc, #56]	@ (80010c4 <FLASH_SetErrorCode+0x68>)
 800108c:	69d2      	ldr	r2, [r2, #28]
 800108e:	f012 0f01 	tst.w	r2, #1
 8001092:	d009      	beq.n	80010a8 <FLASH_SetErrorCode+0x4c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8001094:	490c      	ldr	r1, [pc, #48]	@ (80010c8 <FLASH_SetErrorCode+0x6c>)
 8001096:	69ca      	ldr	r2, [r1, #28]
 8001098:	f042 0204 	orr.w	r2, r2, #4
 800109c:	61ca      	str	r2, [r1, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800109e:	4909      	ldr	r1, [pc, #36]	@ (80010c4 <FLASH_SetErrorCode+0x68>)
 80010a0:	69ca      	ldr	r2, [r1, #28]
 80010a2:	f022 0201 	bic.w	r2, r2, #1
 80010a6:	61ca      	str	r2, [r1, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80010a8:	f240 1201 	movw	r2, #257	@ 0x101
 80010ac:	4293      	cmp	r3, r2
 80010ae:	d002      	beq.n	80010b6 <FLASH_SetErrorCode+0x5a>
 80010b0:	4a04      	ldr	r2, [pc, #16]	@ (80010c4 <FLASH_SetErrorCode+0x68>)
 80010b2:	60d3      	str	r3, [r2, #12]
}  
 80010b4:	4770      	bx	lr
  __HAL_FLASH_CLEAR_FLAG(flags);
 80010b6:	4a03      	ldr	r2, [pc, #12]	@ (80010c4 <FLASH_SetErrorCode+0x68>)
 80010b8:	69d3      	ldr	r3, [r2, #28]
 80010ba:	f023 0301 	bic.w	r3, r3, #1
 80010be:	61d3      	str	r3, [r2, #28]
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop
 80010c4:	40022000 	.word	0x40022000
 80010c8:	20000128 	.word	0x20000128

080010cc <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80010cc:	4b0a      	ldr	r3, [pc, #40]	@ (80010f8 <HAL_FLASH_Unlock+0x2c>)
 80010ce:	691b      	ldr	r3, [r3, #16]
 80010d0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80010d4:	d00b      	beq.n	80010ee <HAL_FLASH_Unlock+0x22>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80010d6:	4b08      	ldr	r3, [pc, #32]	@ (80010f8 <HAL_FLASH_Unlock+0x2c>)
 80010d8:	4a08      	ldr	r2, [pc, #32]	@ (80010fc <HAL_FLASH_Unlock+0x30>)
 80010da:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80010dc:	f102 3288 	add.w	r2, r2, #2290649224	@ 0x88888888
 80010e0:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80010e2:	691b      	ldr	r3, [r3, #16]
 80010e4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80010e8:	d103      	bne.n	80010f2 <HAL_FLASH_Unlock+0x26>
  HAL_StatusTypeDef status = HAL_OK;
 80010ea:	2000      	movs	r0, #0
 80010ec:	4770      	bx	lr
 80010ee:	2000      	movs	r0, #0
 80010f0:	4770      	bx	lr
      status = HAL_ERROR;
 80010f2:	2001      	movs	r0, #1
}
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	40022000 	.word	0x40022000
 80010fc:	45670123 	.word	0x45670123

08001100 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8001100:	4a03      	ldr	r2, [pc, #12]	@ (8001110 <HAL_FLASH_Lock+0x10>)
 8001102:	6913      	ldr	r3, [r2, #16]
 8001104:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001108:	6113      	str	r3, [r2, #16]
}
 800110a:	2000      	movs	r0, #0
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	40022000 	.word	0x40022000

08001114 <FLASH_WaitForLastOperation>:
{
 8001114:	b538      	push	{r3, r4, r5, lr}
 8001116:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001118:	f7ff fb24 	bl	8000764 <HAL_GetTick>
 800111c:	4605      	mov	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800111e:	4b16      	ldr	r3, [pc, #88]	@ (8001178 <FLASH_WaitForLastOperation+0x64>)
 8001120:	68db      	ldr	r3, [r3, #12]
 8001122:	f013 0f01 	tst.w	r3, #1
 8001126:	d00a      	beq.n	800113e <FLASH_WaitForLastOperation+0x2a>
    if (Timeout != HAL_MAX_DELAY)
 8001128:	f1b4 3fff 	cmp.w	r4, #4294967295
 800112c:	d0f7      	beq.n	800111e <FLASH_WaitForLastOperation+0xa>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800112e:	b124      	cbz	r4, 800113a <FLASH_WaitForLastOperation+0x26>
 8001130:	f7ff fb18 	bl	8000764 <HAL_GetTick>
 8001134:	1b40      	subs	r0, r0, r5
 8001136:	42a0      	cmp	r0, r4
 8001138:	d9f1      	bls.n	800111e <FLASH_WaitForLastOperation+0xa>
        return HAL_TIMEOUT;
 800113a:	2003      	movs	r0, #3
 800113c:	e01b      	b.n	8001176 <FLASH_WaitForLastOperation+0x62>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800113e:	4b0e      	ldr	r3, [pc, #56]	@ (8001178 <FLASH_WaitForLastOperation+0x64>)
 8001140:	68db      	ldr	r3, [r3, #12]
 8001142:	f013 0f20 	tst.w	r3, #32
 8001146:	d002      	beq.n	800114e <FLASH_WaitForLastOperation+0x3a>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001148:	4b0b      	ldr	r3, [pc, #44]	@ (8001178 <FLASH_WaitForLastOperation+0x64>)
 800114a:	2220      	movs	r2, #32
 800114c:	60da      	str	r2, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800114e:	4b0a      	ldr	r3, [pc, #40]	@ (8001178 <FLASH_WaitForLastOperation+0x64>)
 8001150:	68db      	ldr	r3, [r3, #12]
 8001152:	f013 0f10 	tst.w	r3, #16
 8001156:	d10b      	bne.n	8001170 <FLASH_WaitForLastOperation+0x5c>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8001158:	4b07      	ldr	r3, [pc, #28]	@ (8001178 <FLASH_WaitForLastOperation+0x64>)
 800115a:	69db      	ldr	r3, [r3, #28]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800115c:	f013 0f01 	tst.w	r3, #1
 8001160:	d106      	bne.n	8001170 <FLASH_WaitForLastOperation+0x5c>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001162:	4b05      	ldr	r3, [pc, #20]	@ (8001178 <FLASH_WaitForLastOperation+0x64>)
 8001164:	68db      	ldr	r3, [r3, #12]
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8001166:	f013 0f04 	tst.w	r3, #4
 800116a:	d101      	bne.n	8001170 <FLASH_WaitForLastOperation+0x5c>
  return HAL_OK;
 800116c:	2000      	movs	r0, #0
 800116e:	e002      	b.n	8001176 <FLASH_WaitForLastOperation+0x62>
    FLASH_SetErrorCode();
 8001170:	f7ff ff74 	bl	800105c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001174:	2001      	movs	r0, #1
}
 8001176:	bd38      	pop	{r3, r4, r5, pc}
 8001178:	40022000 	.word	0x40022000

0800117c <HAL_FLASH_Program>:
{
 800117c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001180:	461e      	mov	r6, r3
  __HAL_LOCK(&pFlash);
 8001182:	4b24      	ldr	r3, [pc, #144]	@ (8001214 <HAL_FLASH_Program+0x98>)
 8001184:	7e1b      	ldrb	r3, [r3, #24]
 8001186:	2b01      	cmp	r3, #1
 8001188:	d041      	beq.n	800120e <HAL_FLASH_Program+0x92>
 800118a:	4604      	mov	r4, r0
 800118c:	460f      	mov	r7, r1
 800118e:	4690      	mov	r8, r2
 8001190:	4b20      	ldr	r3, [pc, #128]	@ (8001214 <HAL_FLASH_Program+0x98>)
 8001192:	2201      	movs	r2, #1
 8001194:	761a      	strb	r2, [r3, #24]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001196:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800119a:	f7ff ffbb 	bl	8001114 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 800119e:	4603      	mov	r3, r0
 80011a0:	bb78      	cbnz	r0, 8001202 <HAL_FLASH_Program+0x86>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80011a2:	2c01      	cmp	r4, #1
 80011a4:	d008      	beq.n	80011b8 <HAL_FLASH_Program+0x3c>
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80011a6:	2c02      	cmp	r4, #2
 80011a8:	d003      	beq.n	80011b2 <HAL_FLASH_Program+0x36>
      nbiterations = 4U;
 80011aa:	f04f 0904 	mov.w	r9, #4
    for (index = 0U; index < nbiterations; index++)
 80011ae:	461c      	mov	r4, r3
 80011b0:	e007      	b.n	80011c2 <HAL_FLASH_Program+0x46>
      nbiterations = 2U;
 80011b2:	f04f 0902 	mov.w	r9, #2
 80011b6:	e7fa      	b.n	80011ae <HAL_FLASH_Program+0x32>
      nbiterations = 1U;
 80011b8:	f04f 0901 	mov.w	r9, #1
 80011bc:	e7f7      	b.n	80011ae <HAL_FLASH_Program+0x32>
    for (index = 0U; index < nbiterations; index++)
 80011be:	3401      	adds	r4, #1
 80011c0:	b2e4      	uxtb	r4, r4
 80011c2:	454c      	cmp	r4, r9
 80011c4:	d21d      	bcs.n	8001202 <HAL_FLASH_Program+0x86>
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80011c6:	0121      	lsls	r1, r4, #4
 80011c8:	f1c1 0220 	rsb	r2, r1, #32
 80011cc:	f1a1 0320 	sub.w	r3, r1, #32
 80011d0:	fa28 f101 	lsr.w	r1, r8, r1
 80011d4:	fa06 f202 	lsl.w	r2, r6, r2
 80011d8:	4311      	orrs	r1, r2
 80011da:	fa26 f303 	lsr.w	r3, r6, r3
 80011de:	4319      	orrs	r1, r3
 80011e0:	b289      	uxth	r1, r1
 80011e2:	eb07 0044 	add.w	r0, r7, r4, lsl #1
 80011e6:	f7ff ff2b 	bl	8001040 <FLASH_Program_HalfWord>
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80011ea:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80011ee:	f7ff ff91 	bl	8001114 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80011f2:	4b09      	ldr	r3, [pc, #36]	@ (8001218 <HAL_FLASH_Program+0x9c>)
 80011f4:	691d      	ldr	r5, [r3, #16]
 80011f6:	f025 0501 	bic.w	r5, r5, #1
 80011fa:	611d      	str	r5, [r3, #16]
      if (status != HAL_OK)
 80011fc:	4603      	mov	r3, r0
 80011fe:	2800      	cmp	r0, #0
 8001200:	d0dd      	beq.n	80011be <HAL_FLASH_Program+0x42>
  __HAL_UNLOCK(&pFlash);
 8001202:	4a04      	ldr	r2, [pc, #16]	@ (8001214 <HAL_FLASH_Program+0x98>)
 8001204:	2100      	movs	r1, #0
 8001206:	7611      	strb	r1, [r2, #24]
}
 8001208:	4618      	mov	r0, r3
 800120a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(&pFlash);
 800120e:	2302      	movs	r3, #2
 8001210:	e7fa      	b.n	8001208 <HAL_FLASH_Program+0x8c>
 8001212:	bf00      	nop
 8001214:	20000128 	.word	0x20000128
 8001218:	40022000 	.word	0x40022000

0800121c <FLASH_MassErase>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800121c:	4b06      	ldr	r3, [pc, #24]	@ (8001238 <FLASH_MassErase+0x1c>)
 800121e:	2200      	movs	r2, #0
 8001220:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8001222:	4b06      	ldr	r3, [pc, #24]	@ (800123c <FLASH_MassErase+0x20>)
 8001224:	691a      	ldr	r2, [r3, #16]
 8001226:	f042 0204 	orr.w	r2, r2, #4
 800122a:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800122c:	691a      	ldr	r2, [r3, #16]
 800122e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001232:	611a      	str	r2, [r3, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	20000128 	.word	0x20000128
 800123c:	40022000 	.word	0x40022000

08001240 <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001240:	4b06      	ldr	r3, [pc, #24]	@ (800125c <FLASH_PageErase+0x1c>)
 8001242:	2200      	movs	r2, #0
 8001244:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8001246:	4b06      	ldr	r3, [pc, #24]	@ (8001260 <FLASH_PageErase+0x20>)
 8001248:	691a      	ldr	r2, [r3, #16]
 800124a:	f042 0202 	orr.w	r2, r2, #2
 800124e:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8001250:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001252:	691a      	ldr	r2, [r3, #16]
 8001254:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001258:	611a      	str	r2, [r3, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800125a:	4770      	bx	lr
 800125c:	20000128 	.word	0x20000128
 8001260:	40022000 	.word	0x40022000

08001264 <HAL_FLASHEx_Erase>:
  __HAL_LOCK(&pFlash);
 8001264:	4b26      	ldr	r3, [pc, #152]	@ (8001300 <HAL_FLASHEx_Erase+0x9c>)
 8001266:	7e1b      	ldrb	r3, [r3, #24]
 8001268:	2b01      	cmp	r3, #1
 800126a:	d046      	beq.n	80012fa <HAL_FLASHEx_Erase+0x96>
{
 800126c:	b570      	push	{r4, r5, r6, lr}
 800126e:	4605      	mov	r5, r0
 8001270:	460e      	mov	r6, r1
  __HAL_LOCK(&pFlash);
 8001272:	4b23      	ldr	r3, [pc, #140]	@ (8001300 <HAL_FLASHEx_Erase+0x9c>)
 8001274:	2201      	movs	r2, #1
 8001276:	761a      	strb	r2, [r3, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001278:	6803      	ldr	r3, [r0, #0]
 800127a:	2b02      	cmp	r3, #2
 800127c:	d020      	beq.n	80012c0 <HAL_FLASHEx_Erase+0x5c>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800127e:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001282:	f7ff ff47 	bl	8001114 <FLASH_WaitForLastOperation>
 8001286:	bb90      	cbnz	r0, 80012ee <HAL_FLASHEx_Erase+0x8a>
        *PageError = 0xFFFFFFFFU;
 8001288:	f04f 33ff 	mov.w	r3, #4294967295
 800128c:	6033      	str	r3, [r6, #0]
        for(address = pEraseInit->PageAddress;
 800128e:	68ac      	ldr	r4, [r5, #8]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001290:	2101      	movs	r1, #1
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8001292:	68ea      	ldr	r2, [r5, #12]
 8001294:	68ab      	ldr	r3, [r5, #8]
 8001296:	eb03 2382 	add.w	r3, r3, r2, lsl #10
 800129a:	42a3      	cmp	r3, r4
 800129c:	d928      	bls.n	80012f0 <HAL_FLASHEx_Erase+0x8c>
          FLASH_PageErase(address);
 800129e:	4620      	mov	r0, r4
 80012a0:	f7ff ffce 	bl	8001240 <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80012a4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80012a8:	f7ff ff34 	bl	8001114 <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80012ac:	4a15      	ldr	r2, [pc, #84]	@ (8001304 <HAL_FLASHEx_Erase+0xa0>)
 80012ae:	6913      	ldr	r3, [r2, #16]
 80012b0:	f023 0302 	bic.w	r3, r3, #2
 80012b4:	6113      	str	r3, [r2, #16]
          if (status != HAL_OK)
 80012b6:	4601      	mov	r1, r0
 80012b8:	b9b8      	cbnz	r0, 80012ea <HAL_FLASHEx_Erase+0x86>
            address += FLASH_PAGE_SIZE)
 80012ba:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80012be:	e7e8      	b.n	8001292 <HAL_FLASHEx_Erase+0x2e>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80012c0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80012c4:	f7ff ff26 	bl	8001114 <FLASH_WaitForLastOperation>
 80012c8:	b108      	cbz	r0, 80012ce <HAL_FLASHEx_Erase+0x6a>
  HAL_StatusTypeDef status = HAL_ERROR;
 80012ca:	2101      	movs	r1, #1
 80012cc:	e010      	b.n	80012f0 <HAL_FLASHEx_Erase+0x8c>
        FLASH_MassErase(FLASH_BANK_1);
 80012ce:	2001      	movs	r0, #1
 80012d0:	f7ff ffa4 	bl	800121c <FLASH_MassErase>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80012d4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80012d8:	f7ff ff1c 	bl	8001114 <FLASH_WaitForLastOperation>
 80012dc:	4601      	mov	r1, r0
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80012de:	4a09      	ldr	r2, [pc, #36]	@ (8001304 <HAL_FLASHEx_Erase+0xa0>)
 80012e0:	6913      	ldr	r3, [r2, #16]
 80012e2:	f023 0304 	bic.w	r3, r3, #4
 80012e6:	6113      	str	r3, [r2, #16]
 80012e8:	e002      	b.n	80012f0 <HAL_FLASHEx_Erase+0x8c>
            *PageError = address;
 80012ea:	6034      	str	r4, [r6, #0]
            break;
 80012ec:	e000      	b.n	80012f0 <HAL_FLASHEx_Erase+0x8c>
  HAL_StatusTypeDef status = HAL_ERROR;
 80012ee:	2101      	movs	r1, #1
  __HAL_UNLOCK(&pFlash);
 80012f0:	4b03      	ldr	r3, [pc, #12]	@ (8001300 <HAL_FLASHEx_Erase+0x9c>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	761a      	strb	r2, [r3, #24]
}
 80012f6:	4608      	mov	r0, r1
 80012f8:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(&pFlash);
 80012fa:	2102      	movs	r1, #2
}
 80012fc:	4608      	mov	r0, r1
 80012fe:	4770      	bx	lr
 8001300:	20000128 	.word	0x20000128
 8001304:	40022000 	.word	0x40022000

08001308 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001308:	b570      	push	{r4, r5, r6, lr}
 800130a:	b082      	sub	sp, #8
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800130c:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 800130e:	46a4      	mov	ip, r4
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001310:	e0a2      	b.n	8001458 <HAL_GPIO_Init+0x150>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001312:	4d7e      	ldr	r5, [pc, #504]	@ (800150c <HAL_GPIO_Init+0x204>)
 8001314:	42ab      	cmp	r3, r5
 8001316:	d010      	beq.n	800133a <HAL_GPIO_Init+0x32>
 8001318:	d907      	bls.n	800132a <HAL_GPIO_Init+0x22>
 800131a:	4d7d      	ldr	r5, [pc, #500]	@ (8001510 <HAL_GPIO_Init+0x208>)
 800131c:	42ab      	cmp	r3, r5
 800131e:	d00c      	beq.n	800133a <HAL_GPIO_Init+0x32>
 8001320:	f505 3580 	add.w	r5, r5, #65536	@ 0x10000
 8001324:	42ab      	cmp	r3, r5
 8001326:	d008      	beq.n	800133a <HAL_GPIO_Init+0x32>
 8001328:	e013      	b.n	8001352 <HAL_GPIO_Init+0x4a>
 800132a:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800132e:	42ab      	cmp	r3, r5
 8001330:	d003      	beq.n	800133a <HAL_GPIO_Init+0x32>
 8001332:	f505 2570 	add.w	r5, r5, #983040	@ 0xf0000
 8001336:	42ab      	cmp	r3, r5
 8001338:	d107      	bne.n	800134a <HAL_GPIO_Init+0x42>
        case GPIO_MODE_EVT_RISING:
        case GPIO_MODE_EVT_FALLING:
        case GPIO_MODE_EVT_RISING_FALLING:
          /* Check the GPIO pull parameter */
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800133a:	688b      	ldr	r3, [r1, #8]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d055      	beq.n	80013ec <HAL_GPIO_Init+0xe4>
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
          }
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001340:	2b01      	cmp	r3, #1
 8001342:	d04e      	beq.n	80013e2 <HAL_GPIO_Init+0xda>
          else /* GPIO_PULLDOWN */
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;

            /* Reset the corresponding ODR bit */
            GPIOx->BRR = ioposition;
 8001344:	6142      	str	r2, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001346:	2408      	movs	r4, #8
 8001348:	e003      	b.n	8001352 <HAL_GPIO_Init+0x4a>
      switch (GPIO_Init->Mode)
 800134a:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800134e:	42ab      	cmp	r3, r5
 8001350:	d0f3      	beq.n	800133a <HAL_GPIO_Init+0x32>
          break;
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001352:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8001356:	d84b      	bhi.n	80013f0 <HAL_GPIO_Init+0xe8>
 8001358:	4606      	mov	r6, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800135a:	ea4f 028c 	mov.w	r2, ip, lsl #2

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800135e:	6833      	ldr	r3, [r6, #0]
 8001360:	250f      	movs	r5, #15
 8001362:	4095      	lsls	r5, r2
 8001364:	ea23 0305 	bic.w	r3, r3, r5
 8001368:	fa04 f202 	lsl.w	r2, r4, r2
 800136c:	4313      	orrs	r3, r2
 800136e:	6033      	str	r3, [r6, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001370:	684b      	ldr	r3, [r1, #4]
 8001372:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8001376:	d06d      	beq.n	8001454 <HAL_GPIO_Init+0x14c>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001378:	4b66      	ldr	r3, [pc, #408]	@ (8001514 <HAL_GPIO_Init+0x20c>)
 800137a:	699a      	ldr	r2, [r3, #24]
 800137c:	f042 0201 	orr.w	r2, r2, #1
 8001380:	619a      	str	r2, [r3, #24]
 8001382:	699b      	ldr	r3, [r3, #24]
 8001384:	f003 0301 	and.w	r3, r3, #1
 8001388:	9301      	str	r3, [sp, #4]
 800138a:	9b01      	ldr	r3, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 800138c:	ea4f 029c 	mov.w	r2, ip, lsr #2
 8001390:	1c95      	adds	r5, r2, #2
 8001392:	4b61      	ldr	r3, [pc, #388]	@ (8001518 <HAL_GPIO_Init+0x210>)
 8001394:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001398:	f00c 0503 	and.w	r5, ip, #3
 800139c:	00ad      	lsls	r5, r5, #2
 800139e:	230f      	movs	r3, #15
 80013a0:	40ab      	lsls	r3, r5
 80013a2:	ea26 0603 	bic.w	r6, r6, r3
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80013a6:	4b5d      	ldr	r3, [pc, #372]	@ (800151c <HAL_GPIO_Init+0x214>)
 80013a8:	4298      	cmp	r0, r3
 80013aa:	d028      	beq.n	80013fe <HAL_GPIO_Init+0xf6>
 80013ac:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80013b0:	4298      	cmp	r0, r3
 80013b2:	f000 808d 	beq.w	80014d0 <HAL_GPIO_Init+0x1c8>
 80013b6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80013ba:	4298      	cmp	r0, r3
 80013bc:	f000 808a 	beq.w	80014d4 <HAL_GPIO_Init+0x1cc>
 80013c0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80013c4:	4298      	cmp	r0, r3
 80013c6:	d018      	beq.n	80013fa <HAL_GPIO_Init+0xf2>
 80013c8:	2304      	movs	r3, #4
 80013ca:	e019      	b.n	8001400 <HAL_GPIO_Init+0xf8>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80013cc:	68cc      	ldr	r4, [r1, #12]
          break;
 80013ce:	e7c0      	b.n	8001352 <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80013d0:	68cc      	ldr	r4, [r1, #12]
 80013d2:	3404      	adds	r4, #4
          break;
 80013d4:	e7bd      	b.n	8001352 <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80013d6:	68cc      	ldr	r4, [r1, #12]
 80013d8:	3408      	adds	r4, #8
          break;
 80013da:	e7ba      	b.n	8001352 <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80013dc:	68cc      	ldr	r4, [r1, #12]
 80013de:	340c      	adds	r4, #12
          break;
 80013e0:	e7b7      	b.n	8001352 <HAL_GPIO_Init+0x4a>
            GPIOx->BSRR = ioposition;
 80013e2:	6102      	str	r2, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013e4:	2408      	movs	r4, #8
 80013e6:	e7b4      	b.n	8001352 <HAL_GPIO_Init+0x4a>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80013e8:	2400      	movs	r4, #0
 80013ea:	e7b2      	b.n	8001352 <HAL_GPIO_Init+0x4a>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80013ec:	2404      	movs	r4, #4
 80013ee:	e7b0      	b.n	8001352 <HAL_GPIO_Init+0x4a>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80013f0:	1d06      	adds	r6, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80013f2:	f1ac 0208 	sub.w	r2, ip, #8
 80013f6:	0092      	lsls	r2, r2, #2
 80013f8:	e7b1      	b.n	800135e <HAL_GPIO_Init+0x56>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80013fa:	2303      	movs	r3, #3
 80013fc:	e000      	b.n	8001400 <HAL_GPIO_Init+0xf8>
 80013fe:	2300      	movs	r3, #0
 8001400:	40ab      	lsls	r3, r5
 8001402:	4333      	orrs	r3, r6
        AFIO->EXTICR[position >> 2u] = temp;
 8001404:	3202      	adds	r2, #2
 8001406:	4d44      	ldr	r5, [pc, #272]	@ (8001518 <HAL_GPIO_Init+0x210>)
 8001408:	f845 3022 	str.w	r3, [r5, r2, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800140c:	684b      	ldr	r3, [r1, #4]
 800140e:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8001412:	d061      	beq.n	80014d8 <HAL_GPIO_Init+0x1d0>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001414:	4a42      	ldr	r2, [pc, #264]	@ (8001520 <HAL_GPIO_Init+0x218>)
 8001416:	6893      	ldr	r3, [r2, #8]
 8001418:	ea43 030e 	orr.w	r3, r3, lr
 800141c:	6093      	str	r3, [r2, #8]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800141e:	684b      	ldr	r3, [r1, #4]
 8001420:	f413 1f00 	tst.w	r3, #2097152	@ 0x200000
 8001424:	d05e      	beq.n	80014e4 <HAL_GPIO_Init+0x1dc>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001426:	4a3e      	ldr	r2, [pc, #248]	@ (8001520 <HAL_GPIO_Init+0x218>)
 8001428:	68d3      	ldr	r3, [r2, #12]
 800142a:	ea43 030e 	orr.w	r3, r3, lr
 800142e:	60d3      	str	r3, [r2, #12]
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001430:	684b      	ldr	r3, [r1, #4]
 8001432:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8001436:	d05b      	beq.n	80014f0 <HAL_GPIO_Init+0x1e8>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001438:	4a39      	ldr	r2, [pc, #228]	@ (8001520 <HAL_GPIO_Init+0x218>)
 800143a:	6853      	ldr	r3, [r2, #4]
 800143c:	ea43 030e 	orr.w	r3, r3, lr
 8001440:	6053      	str	r3, [r2, #4]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001442:	684b      	ldr	r3, [r1, #4]
 8001444:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8001448:	d058      	beq.n	80014fc <HAL_GPIO_Init+0x1f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800144a:	4a35      	ldr	r2, [pc, #212]	@ (8001520 <HAL_GPIO_Init+0x218>)
 800144c:	6813      	ldr	r3, [r2, #0]
 800144e:	ea43 030e 	orr.w	r3, r3, lr
 8001452:	6013      	str	r3, [r2, #0]
          CLEAR_BIT(EXTI->IMR, iocurrent);
        }
      }
    }

	position++;
 8001454:	f10c 0c01 	add.w	ip, ip, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001458:	680b      	ldr	r3, [r1, #0]
 800145a:	fa33 f20c 	lsrs.w	r2, r3, ip
 800145e:	d053      	beq.n	8001508 <HAL_GPIO_Init+0x200>
    ioposition = (0x01uL << position);
 8001460:	2201      	movs	r2, #1
 8001462:	fa02 f20c 	lsl.w	r2, r2, ip
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001466:	ea03 0e02 	and.w	lr, r3, r2
    if (iocurrent == ioposition)
 800146a:	ea32 0303 	bics.w	r3, r2, r3
 800146e:	d1f1      	bne.n	8001454 <HAL_GPIO_Init+0x14c>
      switch (GPIO_Init->Mode)
 8001470:	684b      	ldr	r3, [r1, #4]
 8001472:	2b12      	cmp	r3, #18
 8001474:	f63f af4d 	bhi.w	8001312 <HAL_GPIO_Init+0xa>
 8001478:	2b12      	cmp	r3, #18
 800147a:	f63f af6a 	bhi.w	8001352 <HAL_GPIO_Init+0x4a>
 800147e:	a501      	add	r5, pc, #4	@ (adr r5, 8001484 <HAL_GPIO_Init+0x17c>)
 8001480:	f855 f023 	ldr.w	pc, [r5, r3, lsl #2]
 8001484:	0800133b 	.word	0x0800133b
 8001488:	080013cd 	.word	0x080013cd
 800148c:	080013d7 	.word	0x080013d7
 8001490:	080013e9 	.word	0x080013e9
 8001494:	08001353 	.word	0x08001353
 8001498:	08001353 	.word	0x08001353
 800149c:	08001353 	.word	0x08001353
 80014a0:	08001353 	.word	0x08001353
 80014a4:	08001353 	.word	0x08001353
 80014a8:	08001353 	.word	0x08001353
 80014ac:	08001353 	.word	0x08001353
 80014b0:	08001353 	.word	0x08001353
 80014b4:	08001353 	.word	0x08001353
 80014b8:	08001353 	.word	0x08001353
 80014bc:	08001353 	.word	0x08001353
 80014c0:	08001353 	.word	0x08001353
 80014c4:	08001353 	.word	0x08001353
 80014c8:	080013d1 	.word	0x080013d1
 80014cc:	080013dd 	.word	0x080013dd
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80014d0:	2301      	movs	r3, #1
 80014d2:	e795      	b.n	8001400 <HAL_GPIO_Init+0xf8>
 80014d4:	2302      	movs	r3, #2
 80014d6:	e793      	b.n	8001400 <HAL_GPIO_Init+0xf8>
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80014d8:	4a11      	ldr	r2, [pc, #68]	@ (8001520 <HAL_GPIO_Init+0x218>)
 80014da:	6893      	ldr	r3, [r2, #8]
 80014dc:	ea23 030e 	bic.w	r3, r3, lr
 80014e0:	6093      	str	r3, [r2, #8]
 80014e2:	e79c      	b.n	800141e <HAL_GPIO_Init+0x116>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80014e4:	4a0e      	ldr	r2, [pc, #56]	@ (8001520 <HAL_GPIO_Init+0x218>)
 80014e6:	68d3      	ldr	r3, [r2, #12]
 80014e8:	ea23 030e 	bic.w	r3, r3, lr
 80014ec:	60d3      	str	r3, [r2, #12]
 80014ee:	e79f      	b.n	8001430 <HAL_GPIO_Init+0x128>
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80014f0:	4a0b      	ldr	r2, [pc, #44]	@ (8001520 <HAL_GPIO_Init+0x218>)
 80014f2:	6853      	ldr	r3, [r2, #4]
 80014f4:	ea23 030e 	bic.w	r3, r3, lr
 80014f8:	6053      	str	r3, [r2, #4]
 80014fa:	e7a2      	b.n	8001442 <HAL_GPIO_Init+0x13a>
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80014fc:	4a08      	ldr	r2, [pc, #32]	@ (8001520 <HAL_GPIO_Init+0x218>)
 80014fe:	6813      	ldr	r3, [r2, #0]
 8001500:	ea23 030e 	bic.w	r3, r3, lr
 8001504:	6013      	str	r3, [r2, #0]
 8001506:	e7a5      	b.n	8001454 <HAL_GPIO_Init+0x14c>
  }
}
 8001508:	b002      	add	sp, #8
 800150a:	bd70      	pop	{r4, r5, r6, pc}
 800150c:	10220000 	.word	0x10220000
 8001510:	10310000 	.word	0x10310000
 8001514:	40021000 	.word	0x40021000
 8001518:	40010000 	.word	0x40010000
 800151c:	40010800 	.word	0x40010800
 8001520:	40010400 	.word	0x40010400

08001524 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001524:	b10a      	cbz	r2, 800152a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001526:	6101      	str	r1, [r0, #16]
 8001528:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800152a:	0409      	lsls	r1, r1, #16
 800152c:	6101      	str	r1, [r0, #16]
  }
}
 800152e:	4770      	bx	lr

08001530 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001530:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001532:	4b08      	ldr	r3, [pc, #32]	@ (8001554 <RCC_Delay+0x24>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a08      	ldr	r2, [pc, #32]	@ (8001558 <RCC_Delay+0x28>)
 8001538:	fba2 2303 	umull	r2, r3, r2, r3
 800153c:	0a5b      	lsrs	r3, r3, #9
 800153e:	fb00 f303 	mul.w	r3, r0, r3
 8001542:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8001544:	bf00      	nop
  }
  while (Delay --);
 8001546:	9b01      	ldr	r3, [sp, #4]
 8001548:	1e5a      	subs	r2, r3, #1
 800154a:	9201      	str	r2, [sp, #4]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d1f9      	bne.n	8001544 <RCC_Delay+0x14>
}
 8001550:	b002      	add	sp, #8
 8001552:	4770      	bx	lr
 8001554:	20000000 	.word	0x20000000
 8001558:	10624dd3 	.word	0x10624dd3

0800155c <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 800155c:	2800      	cmp	r0, #0
 800155e:	f000 81f1 	beq.w	8001944 <HAL_RCC_OscConfig+0x3e8>
{
 8001562:	b570      	push	{r4, r5, r6, lr}
 8001564:	b082      	sub	sp, #8
 8001566:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001568:	6803      	ldr	r3, [r0, #0]
 800156a:	f013 0f01 	tst.w	r3, #1
 800156e:	d02c      	beq.n	80015ca <HAL_RCC_OscConfig+0x6e>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001570:	4b99      	ldr	r3, [pc, #612]	@ (80017d8 <HAL_RCC_OscConfig+0x27c>)
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f003 030c 	and.w	r3, r3, #12
 8001578:	2b04      	cmp	r3, #4
 800157a:	d01d      	beq.n	80015b8 <HAL_RCC_OscConfig+0x5c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800157c:	4b96      	ldr	r3, [pc, #600]	@ (80017d8 <HAL_RCC_OscConfig+0x27c>)
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f003 030c 	and.w	r3, r3, #12
 8001584:	2b08      	cmp	r3, #8
 8001586:	d012      	beq.n	80015ae <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001588:	6863      	ldr	r3, [r4, #4]
 800158a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800158e:	d041      	beq.n	8001614 <HAL_RCC_OscConfig+0xb8>
 8001590:	2b00      	cmp	r3, #0
 8001592:	d155      	bne.n	8001640 <HAL_RCC_OscConfig+0xe4>
 8001594:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001598:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80015a2:	601a      	str	r2, [r3, #0]
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80015aa:	601a      	str	r2, [r3, #0]
 80015ac:	e037      	b.n	800161e <HAL_RCC_OscConfig+0xc2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80015ae:	4b8a      	ldr	r3, [pc, #552]	@ (80017d8 <HAL_RCC_OscConfig+0x27c>)
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 80015b6:	d0e7      	beq.n	8001588 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015b8:	4b87      	ldr	r3, [pc, #540]	@ (80017d8 <HAL_RCC_OscConfig+0x27c>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80015c0:	d003      	beq.n	80015ca <HAL_RCC_OscConfig+0x6e>
 80015c2:	6863      	ldr	r3, [r4, #4]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	f000 81bf 	beq.w	8001948 <HAL_RCC_OscConfig+0x3ec>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015ca:	6823      	ldr	r3, [r4, #0]
 80015cc:	f013 0f02 	tst.w	r3, #2
 80015d0:	d075      	beq.n	80016be <HAL_RCC_OscConfig+0x162>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80015d2:	4b81      	ldr	r3, [pc, #516]	@ (80017d8 <HAL_RCC_OscConfig+0x27c>)
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	f013 0f0c 	tst.w	r3, #12
 80015da:	d05f      	beq.n	800169c <HAL_RCC_OscConfig+0x140>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80015dc:	4b7e      	ldr	r3, [pc, #504]	@ (80017d8 <HAL_RCC_OscConfig+0x27c>)
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	f003 030c 	and.w	r3, r3, #12
 80015e4:	2b08      	cmp	r3, #8
 80015e6:	d054      	beq.n	8001692 <HAL_RCC_OscConfig+0x136>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015e8:	6923      	ldr	r3, [r4, #16]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	f000 808a 	beq.w	8001704 <HAL_RCC_OscConfig+0x1a8>
        __HAL_RCC_HSI_ENABLE();
 80015f0:	4b7a      	ldr	r3, [pc, #488]	@ (80017dc <HAL_RCC_OscConfig+0x280>)
 80015f2:	2201      	movs	r2, #1
 80015f4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80015f6:	f7ff f8b5 	bl	8000764 <HAL_GetTick>
 80015fa:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015fc:	4b76      	ldr	r3, [pc, #472]	@ (80017d8 <HAL_RCC_OscConfig+0x27c>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f013 0f02 	tst.w	r3, #2
 8001604:	d175      	bne.n	80016f2 <HAL_RCC_OscConfig+0x196>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001606:	f7ff f8ad 	bl	8000764 <HAL_GetTick>
 800160a:	1b40      	subs	r0, r0, r5
 800160c:	2802      	cmp	r0, #2
 800160e:	d9f5      	bls.n	80015fc <HAL_RCC_OscConfig+0xa0>
            return HAL_TIMEOUT;
 8001610:	2003      	movs	r0, #3
 8001612:	e19e      	b.n	8001952 <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001614:	4a70      	ldr	r2, [pc, #448]	@ (80017d8 <HAL_RCC_OscConfig+0x27c>)
 8001616:	6813      	ldr	r3, [r2, #0]
 8001618:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800161c:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800161e:	6863      	ldr	r3, [r4, #4]
 8001620:	b343      	cbz	r3, 8001674 <HAL_RCC_OscConfig+0x118>
        tickstart = HAL_GetTick();
 8001622:	f7ff f89f 	bl	8000764 <HAL_GetTick>
 8001626:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001628:	4b6b      	ldr	r3, [pc, #428]	@ (80017d8 <HAL_RCC_OscConfig+0x27c>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8001630:	d1cb      	bne.n	80015ca <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001632:	f7ff f897 	bl	8000764 <HAL_GetTick>
 8001636:	1b40      	subs	r0, r0, r5
 8001638:	2864      	cmp	r0, #100	@ 0x64
 800163a:	d9f5      	bls.n	8001628 <HAL_RCC_OscConfig+0xcc>
            return HAL_TIMEOUT;
 800163c:	2003      	movs	r0, #3
 800163e:	e188      	b.n	8001952 <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001640:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001644:	d009      	beq.n	800165a <HAL_RCC_OscConfig+0xfe>
 8001646:	4b64      	ldr	r3, [pc, #400]	@ (80017d8 <HAL_RCC_OscConfig+0x27c>)
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800164e:	601a      	str	r2, [r3, #0]
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001656:	601a      	str	r2, [r3, #0]
 8001658:	e7e1      	b.n	800161e <HAL_RCC_OscConfig+0xc2>
 800165a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800165e:	f5a3 333c 	sub.w	r3, r3, #192512	@ 0x2f000
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8001668:	601a      	str	r2, [r3, #0]
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001670:	601a      	str	r2, [r3, #0]
 8001672:	e7d4      	b.n	800161e <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 8001674:	f7ff f876 	bl	8000764 <HAL_GetTick>
 8001678:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800167a:	4b57      	ldr	r3, [pc, #348]	@ (80017d8 <HAL_RCC_OscConfig+0x27c>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8001682:	d0a2      	beq.n	80015ca <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001684:	f7ff f86e 	bl	8000764 <HAL_GetTick>
 8001688:	1b40      	subs	r0, r0, r5
 800168a:	2864      	cmp	r0, #100	@ 0x64
 800168c:	d9f5      	bls.n	800167a <HAL_RCC_OscConfig+0x11e>
            return HAL_TIMEOUT;
 800168e:	2003      	movs	r0, #3
 8001690:	e15f      	b.n	8001952 <HAL_RCC_OscConfig+0x3f6>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001692:	4b51      	ldr	r3, [pc, #324]	@ (80017d8 <HAL_RCC_OscConfig+0x27c>)
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 800169a:	d1a5      	bne.n	80015e8 <HAL_RCC_OscConfig+0x8c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800169c:	4b4e      	ldr	r3, [pc, #312]	@ (80017d8 <HAL_RCC_OscConfig+0x27c>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f013 0f02 	tst.w	r3, #2
 80016a4:	d003      	beq.n	80016ae <HAL_RCC_OscConfig+0x152>
 80016a6:	6923      	ldr	r3, [r4, #16]
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	f040 814f 	bne.w	800194c <HAL_RCC_OscConfig+0x3f0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016ae:	4a4a      	ldr	r2, [pc, #296]	@ (80017d8 <HAL_RCC_OscConfig+0x27c>)
 80016b0:	6813      	ldr	r3, [r2, #0]
 80016b2:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80016b6:	6961      	ldr	r1, [r4, #20]
 80016b8:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80016bc:	6013      	str	r3, [r2, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016be:	6823      	ldr	r3, [r4, #0]
 80016c0:	f013 0f08 	tst.w	r3, #8
 80016c4:	d033      	beq.n	800172e <HAL_RCC_OscConfig+0x1d2>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016c6:	69a3      	ldr	r3, [r4, #24]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d05c      	beq.n	8001786 <HAL_RCC_OscConfig+0x22a>
      __HAL_RCC_LSI_ENABLE();
 80016cc:	4b43      	ldr	r3, [pc, #268]	@ (80017dc <HAL_RCC_OscConfig+0x280>)
 80016ce:	2201      	movs	r2, #1
 80016d0:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 80016d4:	f7ff f846 	bl	8000764 <HAL_GetTick>
 80016d8:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016da:	4b3f      	ldr	r3, [pc, #252]	@ (80017d8 <HAL_RCC_OscConfig+0x27c>)
 80016dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016de:	f013 0f02 	tst.w	r3, #2
 80016e2:	d121      	bne.n	8001728 <HAL_RCC_OscConfig+0x1cc>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016e4:	f7ff f83e 	bl	8000764 <HAL_GetTick>
 80016e8:	1b40      	subs	r0, r0, r5
 80016ea:	2802      	cmp	r0, #2
 80016ec:	d9f5      	bls.n	80016da <HAL_RCC_OscConfig+0x17e>
          return HAL_TIMEOUT;
 80016ee:	2003      	movs	r0, #3
 80016f0:	e12f      	b.n	8001952 <HAL_RCC_OscConfig+0x3f6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016f2:	4a39      	ldr	r2, [pc, #228]	@ (80017d8 <HAL_RCC_OscConfig+0x27c>)
 80016f4:	6813      	ldr	r3, [r2, #0]
 80016f6:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80016fa:	6961      	ldr	r1, [r4, #20]
 80016fc:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001700:	6013      	str	r3, [r2, #0]
 8001702:	e7dc      	b.n	80016be <HAL_RCC_OscConfig+0x162>
        __HAL_RCC_HSI_DISABLE();
 8001704:	4b35      	ldr	r3, [pc, #212]	@ (80017dc <HAL_RCC_OscConfig+0x280>)
 8001706:	2200      	movs	r2, #0
 8001708:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800170a:	f7ff f82b 	bl	8000764 <HAL_GetTick>
 800170e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001710:	4b31      	ldr	r3, [pc, #196]	@ (80017d8 <HAL_RCC_OscConfig+0x27c>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f013 0f02 	tst.w	r3, #2
 8001718:	d0d1      	beq.n	80016be <HAL_RCC_OscConfig+0x162>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800171a:	f7ff f823 	bl	8000764 <HAL_GetTick>
 800171e:	1b40      	subs	r0, r0, r5
 8001720:	2802      	cmp	r0, #2
 8001722:	d9f5      	bls.n	8001710 <HAL_RCC_OscConfig+0x1b4>
            return HAL_TIMEOUT;
 8001724:	2003      	movs	r0, #3
 8001726:	e114      	b.n	8001952 <HAL_RCC_OscConfig+0x3f6>
      RCC_Delay(1);
 8001728:	2001      	movs	r0, #1
 800172a:	f7ff ff01 	bl	8001530 <RCC_Delay>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800172e:	6823      	ldr	r3, [r4, #0]
 8001730:	f013 0f04 	tst.w	r3, #4
 8001734:	f000 8096 	beq.w	8001864 <HAL_RCC_OscConfig+0x308>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001738:	4b27      	ldr	r3, [pc, #156]	@ (80017d8 <HAL_RCC_OscConfig+0x27c>)
 800173a:	69db      	ldr	r3, [r3, #28]
 800173c:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8001740:	d134      	bne.n	80017ac <HAL_RCC_OscConfig+0x250>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001742:	4b25      	ldr	r3, [pc, #148]	@ (80017d8 <HAL_RCC_OscConfig+0x27c>)
 8001744:	69da      	ldr	r2, [r3, #28]
 8001746:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800174a:	61da      	str	r2, [r3, #28]
 800174c:	69db      	ldr	r3, [r3, #28]
 800174e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001752:	9301      	str	r3, [sp, #4]
 8001754:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001756:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001758:	4b21      	ldr	r3, [pc, #132]	@ (80017e0 <HAL_RCC_OscConfig+0x284>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8001760:	d026      	beq.n	80017b0 <HAL_RCC_OscConfig+0x254>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001762:	68e3      	ldr	r3, [r4, #12]
 8001764:	2b01      	cmp	r3, #1
 8001766:	d03d      	beq.n	80017e4 <HAL_RCC_OscConfig+0x288>
 8001768:	2b00      	cmp	r3, #0
 800176a:	d153      	bne.n	8001814 <HAL_RCC_OscConfig+0x2b8>
 800176c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001770:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 8001774:	6a1a      	ldr	r2, [r3, #32]
 8001776:	f022 0201 	bic.w	r2, r2, #1
 800177a:	621a      	str	r2, [r3, #32]
 800177c:	6a1a      	ldr	r2, [r3, #32]
 800177e:	f022 0204 	bic.w	r2, r2, #4
 8001782:	621a      	str	r2, [r3, #32]
 8001784:	e033      	b.n	80017ee <HAL_RCC_OscConfig+0x292>
      __HAL_RCC_LSI_DISABLE();
 8001786:	4b15      	ldr	r3, [pc, #84]	@ (80017dc <HAL_RCC_OscConfig+0x280>)
 8001788:	2200      	movs	r2, #0
 800178a:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 800178e:	f7fe ffe9 	bl	8000764 <HAL_GetTick>
 8001792:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001794:	4b10      	ldr	r3, [pc, #64]	@ (80017d8 <HAL_RCC_OscConfig+0x27c>)
 8001796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001798:	f013 0f02 	tst.w	r3, #2
 800179c:	d0c7      	beq.n	800172e <HAL_RCC_OscConfig+0x1d2>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800179e:	f7fe ffe1 	bl	8000764 <HAL_GetTick>
 80017a2:	1b40      	subs	r0, r0, r5
 80017a4:	2802      	cmp	r0, #2
 80017a6:	d9f5      	bls.n	8001794 <HAL_RCC_OscConfig+0x238>
          return HAL_TIMEOUT;
 80017a8:	2003      	movs	r0, #3
 80017aa:	e0d2      	b.n	8001952 <HAL_RCC_OscConfig+0x3f6>
    FlagStatus       pwrclkchanged = RESET;
 80017ac:	2500      	movs	r5, #0
 80017ae:	e7d3      	b.n	8001758 <HAL_RCC_OscConfig+0x1fc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017b0:	4a0b      	ldr	r2, [pc, #44]	@ (80017e0 <HAL_RCC_OscConfig+0x284>)
 80017b2:	6813      	ldr	r3, [r2, #0]
 80017b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017b8:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80017ba:	f7fe ffd3 	bl	8000764 <HAL_GetTick>
 80017be:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017c0:	4b07      	ldr	r3, [pc, #28]	@ (80017e0 <HAL_RCC_OscConfig+0x284>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80017c8:	d1cb      	bne.n	8001762 <HAL_RCC_OscConfig+0x206>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017ca:	f7fe ffcb 	bl	8000764 <HAL_GetTick>
 80017ce:	1b80      	subs	r0, r0, r6
 80017d0:	2864      	cmp	r0, #100	@ 0x64
 80017d2:	d9f5      	bls.n	80017c0 <HAL_RCC_OscConfig+0x264>
          return HAL_TIMEOUT;
 80017d4:	2003      	movs	r0, #3
 80017d6:	e0bc      	b.n	8001952 <HAL_RCC_OscConfig+0x3f6>
 80017d8:	40021000 	.word	0x40021000
 80017dc:	42420000 	.word	0x42420000
 80017e0:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017e4:	4a5f      	ldr	r2, [pc, #380]	@ (8001964 <HAL_RCC_OscConfig+0x408>)
 80017e6:	6a13      	ldr	r3, [r2, #32]
 80017e8:	f043 0301 	orr.w	r3, r3, #1
 80017ec:	6213      	str	r3, [r2, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017ee:	68e3      	ldr	r3, [r4, #12]
 80017f0:	b333      	cbz	r3, 8001840 <HAL_RCC_OscConfig+0x2e4>
      tickstart = HAL_GetTick();
 80017f2:	f7fe ffb7 	bl	8000764 <HAL_GetTick>
 80017f6:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017f8:	4b5a      	ldr	r3, [pc, #360]	@ (8001964 <HAL_RCC_OscConfig+0x408>)
 80017fa:	6a1b      	ldr	r3, [r3, #32]
 80017fc:	f013 0f02 	tst.w	r3, #2
 8001800:	d12f      	bne.n	8001862 <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001802:	f7fe ffaf 	bl	8000764 <HAL_GetTick>
 8001806:	1b80      	subs	r0, r0, r6
 8001808:	f241 3388 	movw	r3, #5000	@ 0x1388
 800180c:	4298      	cmp	r0, r3
 800180e:	d9f3      	bls.n	80017f8 <HAL_RCC_OscConfig+0x29c>
          return HAL_TIMEOUT;
 8001810:	2003      	movs	r0, #3
 8001812:	e09e      	b.n	8001952 <HAL_RCC_OscConfig+0x3f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001814:	2b05      	cmp	r3, #5
 8001816:	d009      	beq.n	800182c <HAL_RCC_OscConfig+0x2d0>
 8001818:	4b52      	ldr	r3, [pc, #328]	@ (8001964 <HAL_RCC_OscConfig+0x408>)
 800181a:	6a1a      	ldr	r2, [r3, #32]
 800181c:	f022 0201 	bic.w	r2, r2, #1
 8001820:	621a      	str	r2, [r3, #32]
 8001822:	6a1a      	ldr	r2, [r3, #32]
 8001824:	f022 0204 	bic.w	r2, r2, #4
 8001828:	621a      	str	r2, [r3, #32]
 800182a:	e7e0      	b.n	80017ee <HAL_RCC_OscConfig+0x292>
 800182c:	4b4d      	ldr	r3, [pc, #308]	@ (8001964 <HAL_RCC_OscConfig+0x408>)
 800182e:	6a1a      	ldr	r2, [r3, #32]
 8001830:	f042 0204 	orr.w	r2, r2, #4
 8001834:	621a      	str	r2, [r3, #32]
 8001836:	6a1a      	ldr	r2, [r3, #32]
 8001838:	f042 0201 	orr.w	r2, r2, #1
 800183c:	621a      	str	r2, [r3, #32]
 800183e:	e7d6      	b.n	80017ee <HAL_RCC_OscConfig+0x292>
      tickstart = HAL_GetTick();
 8001840:	f7fe ff90 	bl	8000764 <HAL_GetTick>
 8001844:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001846:	4b47      	ldr	r3, [pc, #284]	@ (8001964 <HAL_RCC_OscConfig+0x408>)
 8001848:	6a1b      	ldr	r3, [r3, #32]
 800184a:	f013 0f02 	tst.w	r3, #2
 800184e:	d008      	beq.n	8001862 <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001850:	f7fe ff88 	bl	8000764 <HAL_GetTick>
 8001854:	1b80      	subs	r0, r0, r6
 8001856:	f241 3388 	movw	r3, #5000	@ 0x1388
 800185a:	4298      	cmp	r0, r3
 800185c:	d9f3      	bls.n	8001846 <HAL_RCC_OscConfig+0x2ea>
          return HAL_TIMEOUT;
 800185e:	2003      	movs	r0, #3
 8001860:	e077      	b.n	8001952 <HAL_RCC_OscConfig+0x3f6>
    if (pwrclkchanged == SET)
 8001862:	b9e5      	cbnz	r5, 800189e <HAL_RCC_OscConfig+0x342>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001864:	69e3      	ldr	r3, [r4, #28]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d072      	beq.n	8001950 <HAL_RCC_OscConfig+0x3f4>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800186a:	4a3e      	ldr	r2, [pc, #248]	@ (8001964 <HAL_RCC_OscConfig+0x408>)
 800186c:	6852      	ldr	r2, [r2, #4]
 800186e:	f002 020c 	and.w	r2, r2, #12
 8001872:	2a08      	cmp	r2, #8
 8001874:	d056      	beq.n	8001924 <HAL_RCC_OscConfig+0x3c8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001876:	2b02      	cmp	r3, #2
 8001878:	d017      	beq.n	80018aa <HAL_RCC_OscConfig+0x34e>
        __HAL_RCC_PLL_DISABLE();
 800187a:	4b3b      	ldr	r3, [pc, #236]	@ (8001968 <HAL_RCC_OscConfig+0x40c>)
 800187c:	2200      	movs	r2, #0
 800187e:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8001880:	f7fe ff70 	bl	8000764 <HAL_GetTick>
 8001884:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001886:	4b37      	ldr	r3, [pc, #220]	@ (8001964 <HAL_RCC_OscConfig+0x408>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800188e:	d047      	beq.n	8001920 <HAL_RCC_OscConfig+0x3c4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001890:	f7fe ff68 	bl	8000764 <HAL_GetTick>
 8001894:	1b00      	subs	r0, r0, r4
 8001896:	2802      	cmp	r0, #2
 8001898:	d9f5      	bls.n	8001886 <HAL_RCC_OscConfig+0x32a>
            return HAL_TIMEOUT;
 800189a:	2003      	movs	r0, #3
 800189c:	e059      	b.n	8001952 <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_PWR_CLK_DISABLE();
 800189e:	4a31      	ldr	r2, [pc, #196]	@ (8001964 <HAL_RCC_OscConfig+0x408>)
 80018a0:	69d3      	ldr	r3, [r2, #28]
 80018a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80018a6:	61d3      	str	r3, [r2, #28]
 80018a8:	e7dc      	b.n	8001864 <HAL_RCC_OscConfig+0x308>
        __HAL_RCC_PLL_DISABLE();
 80018aa:	4b2f      	ldr	r3, [pc, #188]	@ (8001968 <HAL_RCC_OscConfig+0x40c>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 80018b0:	f7fe ff58 	bl	8000764 <HAL_GetTick>
 80018b4:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018b6:	4b2b      	ldr	r3, [pc, #172]	@ (8001964 <HAL_RCC_OscConfig+0x408>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80018be:	d006      	beq.n	80018ce <HAL_RCC_OscConfig+0x372>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018c0:	f7fe ff50 	bl	8000764 <HAL_GetTick>
 80018c4:	1b40      	subs	r0, r0, r5
 80018c6:	2802      	cmp	r0, #2
 80018c8:	d9f5      	bls.n	80018b6 <HAL_RCC_OscConfig+0x35a>
            return HAL_TIMEOUT;
 80018ca:	2003      	movs	r0, #3
 80018cc:	e041      	b.n	8001952 <HAL_RCC_OscConfig+0x3f6>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80018ce:	6a23      	ldr	r3, [r4, #32]
 80018d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80018d4:	d01a      	beq.n	800190c <HAL_RCC_OscConfig+0x3b0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018d6:	4923      	ldr	r1, [pc, #140]	@ (8001964 <HAL_RCC_OscConfig+0x408>)
 80018d8:	684b      	ldr	r3, [r1, #4]
 80018da:	f423 1374 	bic.w	r3, r3, #3997696	@ 0x3d0000
 80018de:	6a22      	ldr	r2, [r4, #32]
 80018e0:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80018e2:	4302      	orrs	r2, r0
 80018e4:	4313      	orrs	r3, r2
 80018e6:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 80018e8:	4b1f      	ldr	r3, [pc, #124]	@ (8001968 <HAL_RCC_OscConfig+0x40c>)
 80018ea:	2201      	movs	r2, #1
 80018ec:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 80018ee:	f7fe ff39 	bl	8000764 <HAL_GetTick>
 80018f2:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018f4:	4b1b      	ldr	r3, [pc, #108]	@ (8001964 <HAL_RCC_OscConfig+0x408>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80018fc:	d10e      	bne.n	800191c <HAL_RCC_OscConfig+0x3c0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018fe:	f7fe ff31 	bl	8000764 <HAL_GetTick>
 8001902:	1b00      	subs	r0, r0, r4
 8001904:	2802      	cmp	r0, #2
 8001906:	d9f5      	bls.n	80018f4 <HAL_RCC_OscConfig+0x398>
            return HAL_TIMEOUT;
 8001908:	2003      	movs	r0, #3
 800190a:	e022      	b.n	8001952 <HAL_RCC_OscConfig+0x3f6>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800190c:	4a15      	ldr	r2, [pc, #84]	@ (8001964 <HAL_RCC_OscConfig+0x408>)
 800190e:	6853      	ldr	r3, [r2, #4]
 8001910:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8001914:	68a1      	ldr	r1, [r4, #8]
 8001916:	430b      	orrs	r3, r1
 8001918:	6053      	str	r3, [r2, #4]
 800191a:	e7dc      	b.n	80018d6 <HAL_RCC_OscConfig+0x37a>
  return HAL_OK;
 800191c:	2000      	movs	r0, #0
 800191e:	e018      	b.n	8001952 <HAL_RCC_OscConfig+0x3f6>
 8001920:	2000      	movs	r0, #0
 8001922:	e016      	b.n	8001952 <HAL_RCC_OscConfig+0x3f6>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001924:	2b01      	cmp	r3, #1
 8001926:	d016      	beq.n	8001956 <HAL_RCC_OscConfig+0x3fa>
        pll_config = RCC->CFGR;
 8001928:	4b0e      	ldr	r3, [pc, #56]	@ (8001964 <HAL_RCC_OscConfig+0x408>)
 800192a:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800192c:	f403 3180 	and.w	r1, r3, #65536	@ 0x10000
 8001930:	6a22      	ldr	r2, [r4, #32]
 8001932:	4291      	cmp	r1, r2
 8001934:	d111      	bne.n	800195a <HAL_RCC_OscConfig+0x3fe>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001936:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 800193a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800193c:	4293      	cmp	r3, r2
 800193e:	d10e      	bne.n	800195e <HAL_RCC_OscConfig+0x402>
  return HAL_OK;
 8001940:	2000      	movs	r0, #0
 8001942:	e006      	b.n	8001952 <HAL_RCC_OscConfig+0x3f6>
    return HAL_ERROR;
 8001944:	2001      	movs	r0, #1
}
 8001946:	4770      	bx	lr
        return HAL_ERROR;
 8001948:	2001      	movs	r0, #1
 800194a:	e002      	b.n	8001952 <HAL_RCC_OscConfig+0x3f6>
        return HAL_ERROR;
 800194c:	2001      	movs	r0, #1
 800194e:	e000      	b.n	8001952 <HAL_RCC_OscConfig+0x3f6>
  return HAL_OK;
 8001950:	2000      	movs	r0, #0
}
 8001952:	b002      	add	sp, #8
 8001954:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8001956:	2001      	movs	r0, #1
 8001958:	e7fb      	b.n	8001952 <HAL_RCC_OscConfig+0x3f6>
          return HAL_ERROR;
 800195a:	2001      	movs	r0, #1
 800195c:	e7f9      	b.n	8001952 <HAL_RCC_OscConfig+0x3f6>
 800195e:	2001      	movs	r0, #1
 8001960:	e7f7      	b.n	8001952 <HAL_RCC_OscConfig+0x3f6>
 8001962:	bf00      	nop
 8001964:	40021000 	.word	0x40021000
 8001968:	42420000 	.word	0x42420000

0800196c <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 800196c:	4b0f      	ldr	r3, [pc, #60]	@ (80019ac <HAL_RCC_GetSysClockFreq+0x40>)
 800196e:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001970:	f003 020c 	and.w	r2, r3, #12
 8001974:	2a08      	cmp	r2, #8
 8001976:	d001      	beq.n	800197c <HAL_RCC_GetSysClockFreq+0x10>
      sysclockfreq = HSE_VALUE;
 8001978:	480d      	ldr	r0, [pc, #52]	@ (80019b0 <HAL_RCC_GetSysClockFreq+0x44>)
}
 800197a:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800197c:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8001980:	490c      	ldr	r1, [pc, #48]	@ (80019b4 <HAL_RCC_GetSysClockFreq+0x48>)
 8001982:	5c88      	ldrb	r0, [r1, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001984:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8001988:	d00b      	beq.n	80019a2 <HAL_RCC_GetSysClockFreq+0x36>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800198a:	4b08      	ldr	r3, [pc, #32]	@ (80019ac <HAL_RCC_GetSysClockFreq+0x40>)
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8001992:	4a09      	ldr	r2, [pc, #36]	@ (80019b8 <HAL_RCC_GetSysClockFreq+0x4c>)
 8001994:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001996:	4a06      	ldr	r2, [pc, #24]	@ (80019b0 <HAL_RCC_GetSysClockFreq+0x44>)
 8001998:	fb02 f000 	mul.w	r0, r2, r0
 800199c:	fbb0 f0f3 	udiv	r0, r0, r3
 80019a0:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80019a2:	4b06      	ldr	r3, [pc, #24]	@ (80019bc <HAL_RCC_GetSysClockFreq+0x50>)
 80019a4:	fb03 f000 	mul.w	r0, r3, r0
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	40021000 	.word	0x40021000
 80019b0:	007a1200 	.word	0x007a1200
 80019b4:	08002df8 	.word	0x08002df8
 80019b8:	08002df4 	.word	0x08002df4
 80019bc:	003d0900 	.word	0x003d0900

080019c0 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80019c0:	2800      	cmp	r0, #0
 80019c2:	f000 80a0 	beq.w	8001b06 <HAL_RCC_ClockConfig+0x146>
{
 80019c6:	b570      	push	{r4, r5, r6, lr}
 80019c8:	460d      	mov	r5, r1
 80019ca:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019cc:	4b52      	ldr	r3, [pc, #328]	@ (8001b18 <HAL_RCC_ClockConfig+0x158>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f003 0307 	and.w	r3, r3, #7
 80019d4:	428b      	cmp	r3, r1
 80019d6:	d20b      	bcs.n	80019f0 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019d8:	4a4f      	ldr	r2, [pc, #316]	@ (8001b18 <HAL_RCC_ClockConfig+0x158>)
 80019da:	6813      	ldr	r3, [r2, #0]
 80019dc:	f023 0307 	bic.w	r3, r3, #7
 80019e0:	430b      	orrs	r3, r1
 80019e2:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019e4:	6813      	ldr	r3, [r2, #0]
 80019e6:	f003 0307 	and.w	r3, r3, #7
 80019ea:	428b      	cmp	r3, r1
 80019ec:	f040 808d 	bne.w	8001b0a <HAL_RCC_ClockConfig+0x14a>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019f0:	6823      	ldr	r3, [r4, #0]
 80019f2:	f013 0f02 	tst.w	r3, #2
 80019f6:	d017      	beq.n	8001a28 <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019f8:	f013 0f04 	tst.w	r3, #4
 80019fc:	d004      	beq.n	8001a08 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019fe:	4a47      	ldr	r2, [pc, #284]	@ (8001b1c <HAL_RCC_ClockConfig+0x15c>)
 8001a00:	6853      	ldr	r3, [r2, #4]
 8001a02:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001a06:	6053      	str	r3, [r2, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a08:	6823      	ldr	r3, [r4, #0]
 8001a0a:	f013 0f08 	tst.w	r3, #8
 8001a0e:	d004      	beq.n	8001a1a <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a10:	4a42      	ldr	r2, [pc, #264]	@ (8001b1c <HAL_RCC_ClockConfig+0x15c>)
 8001a12:	6853      	ldr	r3, [r2, #4]
 8001a14:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001a18:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a1a:	4a40      	ldr	r2, [pc, #256]	@ (8001b1c <HAL_RCC_ClockConfig+0x15c>)
 8001a1c:	6853      	ldr	r3, [r2, #4]
 8001a1e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001a22:	68a1      	ldr	r1, [r4, #8]
 8001a24:	430b      	orrs	r3, r1
 8001a26:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a28:	6823      	ldr	r3, [r4, #0]
 8001a2a:	f013 0f01 	tst.w	r3, #1
 8001a2e:	d031      	beq.n	8001a94 <HAL_RCC_ClockConfig+0xd4>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a30:	6863      	ldr	r3, [r4, #4]
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d020      	beq.n	8001a78 <HAL_RCC_ClockConfig+0xb8>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a36:	2b02      	cmp	r3, #2
 8001a38:	d025      	beq.n	8001a86 <HAL_RCC_ClockConfig+0xc6>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a3a:	4a38      	ldr	r2, [pc, #224]	@ (8001b1c <HAL_RCC_ClockConfig+0x15c>)
 8001a3c:	6812      	ldr	r2, [r2, #0]
 8001a3e:	f012 0f02 	tst.w	r2, #2
 8001a42:	d064      	beq.n	8001b0e <HAL_RCC_ClockConfig+0x14e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a44:	4935      	ldr	r1, [pc, #212]	@ (8001b1c <HAL_RCC_ClockConfig+0x15c>)
 8001a46:	684a      	ldr	r2, [r1, #4]
 8001a48:	f022 0203 	bic.w	r2, r2, #3
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8001a50:	f7fe fe88 	bl	8000764 <HAL_GetTick>
 8001a54:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a56:	4b31      	ldr	r3, [pc, #196]	@ (8001b1c <HAL_RCC_ClockConfig+0x15c>)
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	f003 030c 	and.w	r3, r3, #12
 8001a5e:	6862      	ldr	r2, [r4, #4]
 8001a60:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001a64:	d016      	beq.n	8001a94 <HAL_RCC_ClockConfig+0xd4>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a66:	f7fe fe7d 	bl	8000764 <HAL_GetTick>
 8001a6a:	1b80      	subs	r0, r0, r6
 8001a6c:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001a70:	4298      	cmp	r0, r3
 8001a72:	d9f0      	bls.n	8001a56 <HAL_RCC_ClockConfig+0x96>
        return HAL_TIMEOUT;
 8001a74:	2003      	movs	r0, #3
 8001a76:	e045      	b.n	8001b04 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a78:	4a28      	ldr	r2, [pc, #160]	@ (8001b1c <HAL_RCC_ClockConfig+0x15c>)
 8001a7a:	6812      	ldr	r2, [r2, #0]
 8001a7c:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8001a80:	d1e0      	bne.n	8001a44 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 8001a82:	2001      	movs	r0, #1
 8001a84:	e03e      	b.n	8001b04 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a86:	4a25      	ldr	r2, [pc, #148]	@ (8001b1c <HAL_RCC_ClockConfig+0x15c>)
 8001a88:	6812      	ldr	r2, [r2, #0]
 8001a8a:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 8001a8e:	d1d9      	bne.n	8001a44 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 8001a90:	2001      	movs	r0, #1
 8001a92:	e037      	b.n	8001b04 <HAL_RCC_ClockConfig+0x144>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a94:	4b20      	ldr	r3, [pc, #128]	@ (8001b18 <HAL_RCC_ClockConfig+0x158>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 0307 	and.w	r3, r3, #7
 8001a9c:	42ab      	cmp	r3, r5
 8001a9e:	d90a      	bls.n	8001ab6 <HAL_RCC_ClockConfig+0xf6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aa0:	4a1d      	ldr	r2, [pc, #116]	@ (8001b18 <HAL_RCC_ClockConfig+0x158>)
 8001aa2:	6813      	ldr	r3, [r2, #0]
 8001aa4:	f023 0307 	bic.w	r3, r3, #7
 8001aa8:	432b      	orrs	r3, r5
 8001aaa:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aac:	6813      	ldr	r3, [r2, #0]
 8001aae:	f003 0307 	and.w	r3, r3, #7
 8001ab2:	42ab      	cmp	r3, r5
 8001ab4:	d12d      	bne.n	8001b12 <HAL_RCC_ClockConfig+0x152>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ab6:	6823      	ldr	r3, [r4, #0]
 8001ab8:	f013 0f04 	tst.w	r3, #4
 8001abc:	d006      	beq.n	8001acc <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001abe:	4a17      	ldr	r2, [pc, #92]	@ (8001b1c <HAL_RCC_ClockConfig+0x15c>)
 8001ac0:	6853      	ldr	r3, [r2, #4]
 8001ac2:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001ac6:	68e1      	ldr	r1, [r4, #12]
 8001ac8:	430b      	orrs	r3, r1
 8001aca:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001acc:	6823      	ldr	r3, [r4, #0]
 8001ace:	f013 0f08 	tst.w	r3, #8
 8001ad2:	d007      	beq.n	8001ae4 <HAL_RCC_ClockConfig+0x124>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001ad4:	4a11      	ldr	r2, [pc, #68]	@ (8001b1c <HAL_RCC_ClockConfig+0x15c>)
 8001ad6:	6853      	ldr	r3, [r2, #4]
 8001ad8:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8001adc:	6921      	ldr	r1, [r4, #16]
 8001ade:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001ae2:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001ae4:	f7ff ff42 	bl	800196c <HAL_RCC_GetSysClockFreq>
 8001ae8:	4b0c      	ldr	r3, [pc, #48]	@ (8001b1c <HAL_RCC_ClockConfig+0x15c>)
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001af0:	4a0b      	ldr	r2, [pc, #44]	@ (8001b20 <HAL_RCC_ClockConfig+0x160>)
 8001af2:	5cd3      	ldrb	r3, [r2, r3]
 8001af4:	40d8      	lsrs	r0, r3
 8001af6:	4b0b      	ldr	r3, [pc, #44]	@ (8001b24 <HAL_RCC_ClockConfig+0x164>)
 8001af8:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8001afa:	4b0b      	ldr	r3, [pc, #44]	@ (8001b28 <HAL_RCC_ClockConfig+0x168>)
 8001afc:	6818      	ldr	r0, [r3, #0]
 8001afe:	f7fe fded 	bl	80006dc <HAL_InitTick>
  return HAL_OK;
 8001b02:	2000      	movs	r0, #0
}
 8001b04:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8001b06:	2001      	movs	r0, #1
}
 8001b08:	4770      	bx	lr
    return HAL_ERROR;
 8001b0a:	2001      	movs	r0, #1
 8001b0c:	e7fa      	b.n	8001b04 <HAL_RCC_ClockConfig+0x144>
        return HAL_ERROR;
 8001b0e:	2001      	movs	r0, #1
 8001b10:	e7f8      	b.n	8001b04 <HAL_RCC_ClockConfig+0x144>
    return HAL_ERROR;
 8001b12:	2001      	movs	r0, #1
 8001b14:	e7f6      	b.n	8001b04 <HAL_RCC_ClockConfig+0x144>
 8001b16:	bf00      	nop
 8001b18:	40022000 	.word	0x40022000
 8001b1c:	40021000 	.word	0x40021000
 8001b20:	08002de4 	.word	0x08002de4
 8001b24:	20000000 	.word	0x20000000
 8001b28:	20000008 	.word	0x20000008

08001b2c <HAL_RCC_GetHCLKFreq>:
}
 8001b2c:	4b01      	ldr	r3, [pc, #4]	@ (8001b34 <HAL_RCC_GetHCLKFreq+0x8>)
 8001b2e:	6818      	ldr	r0, [r3, #0]
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	20000000 	.word	0x20000000

08001b38 <HAL_RCC_GetPCLK1Freq>:
{
 8001b38:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b3a:	f7ff fff7 	bl	8001b2c <HAL_RCC_GetHCLKFreq>
 8001b3e:	4b04      	ldr	r3, [pc, #16]	@ (8001b50 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001b46:	4a03      	ldr	r2, [pc, #12]	@ (8001b54 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001b48:	5cd3      	ldrb	r3, [r2, r3]
}
 8001b4a:	40d8      	lsrs	r0, r3
 8001b4c:	bd08      	pop	{r3, pc}
 8001b4e:	bf00      	nop
 8001b50:	40021000 	.word	0x40021000
 8001b54:	08002ddc 	.word	0x08002ddc

08001b58 <HAL_RCC_GetPCLK2Freq>:
{
 8001b58:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001b5a:	f7ff ffe7 	bl	8001b2c <HAL_RCC_GetHCLKFreq>
 8001b5e:	4b04      	ldr	r3, [pc, #16]	@ (8001b70 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8001b66:	4a03      	ldr	r2, [pc, #12]	@ (8001b74 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001b68:	5cd3      	ldrb	r3, [r2, r3]
}
 8001b6a:	40d8      	lsrs	r0, r3
 8001b6c:	bd08      	pop	{r3, pc}
 8001b6e:	bf00      	nop
 8001b70:	40021000 	.word	0x40021000
 8001b74:	08002ddc 	.word	0x08002ddc

08001b78 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001b78:	b510      	push	{r4, lr}
 8001b7a:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001b7c:	6802      	ldr	r2, [r0, #0]
 8001b7e:	6913      	ldr	r3, [r2, #16]
 8001b80:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001b84:	68c1      	ldr	r1, [r0, #12]
 8001b86:	430b      	orrs	r3, r1
 8001b88:	6113      	str	r3, [r2, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001b8a:	6883      	ldr	r3, [r0, #8]
 8001b8c:	6902      	ldr	r2, [r0, #16]
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	6942      	ldr	r2, [r0, #20]
 8001b92:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 8001b94:	6801      	ldr	r1, [r0, #0]
 8001b96:	68cb      	ldr	r3, [r1, #12]
 8001b98:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8001b9c:	f023 030c 	bic.w	r3, r3, #12
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	60cb      	str	r3, [r1, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001ba4:	6802      	ldr	r2, [r0, #0]
 8001ba6:	6953      	ldr	r3, [r2, #20]
 8001ba8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001bac:	6981      	ldr	r1, [r0, #24]
 8001bae:	430b      	orrs	r3, r1
 8001bb0:	6153      	str	r3, [r2, #20]


  if(huart->Instance == USART1)
 8001bb2:	6802      	ldr	r2, [r0, #0]
 8001bb4:	4b13      	ldr	r3, [pc, #76]	@ (8001c04 <UART_SetConfig+0x8c>)
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	d020      	beq.n	8001bfc <UART_SetConfig+0x84>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001bba:	f7ff ffbd 	bl	8001b38 <HAL_RCC_GetPCLK1Freq>
 8001bbe:	4602      	mov	r2, r0
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001bc0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001bc4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001bc8:	6863      	ldr	r3, [r4, #4]
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	fbb2 f2f3 	udiv	r2, r2, r3
 8001bd0:	480d      	ldr	r0, [pc, #52]	@ (8001c08 <UART_SetConfig+0x90>)
 8001bd2:	fba0 3102 	umull	r3, r1, r0, r2
 8001bd6:	0949      	lsrs	r1, r1, #5
 8001bd8:	2364      	movs	r3, #100	@ 0x64
 8001bda:	fb03 2311 	mls	r3, r3, r1, r2
 8001bde:	011b      	lsls	r3, r3, #4
 8001be0:	3332      	adds	r3, #50	@ 0x32
 8001be2:	fba0 0303 	umull	r0, r3, r0, r3
 8001be6:	095b      	lsrs	r3, r3, #5
 8001be8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001bec:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8001bf0:	f003 030f 	and.w	r3, r3, #15
 8001bf4:	6821      	ldr	r1, [r4, #0]
 8001bf6:	4413      	add	r3, r2
 8001bf8:	608b      	str	r3, [r1, #8]
#endif /* USART_CR1_OVER8 */
}
 8001bfa:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK2Freq();
 8001bfc:	f7ff ffac 	bl	8001b58 <HAL_RCC_GetPCLK2Freq>
 8001c00:	4602      	mov	r2, r0
 8001c02:	e7dd      	b.n	8001bc0 <UART_SetConfig+0x48>
 8001c04:	40013800 	.word	0x40013800
 8001c08:	51eb851f 	.word	0x51eb851f

08001c0c <UART_WaitOnFlagUntilTimeout>:
{
 8001c0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001c10:	4605      	mov	r5, r0
 8001c12:	460f      	mov	r7, r1
 8001c14:	4616      	mov	r6, r2
 8001c16:	4699      	mov	r9, r3
 8001c18:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001c1c:	682b      	ldr	r3, [r5, #0]
 8001c1e:	681c      	ldr	r4, [r3, #0]
 8001c20:	ea37 0404 	bics.w	r4, r7, r4
 8001c24:	bf0c      	ite	eq
 8001c26:	2401      	moveq	r4, #1
 8001c28:	2400      	movne	r4, #0
 8001c2a:	42b4      	cmp	r4, r6
 8001c2c:	d12d      	bne.n	8001c8a <UART_WaitOnFlagUntilTimeout+0x7e>
    if (Timeout != HAL_MAX_DELAY)
 8001c2e:	f1b8 3fff 	cmp.w	r8, #4294967295
 8001c32:	d0f3      	beq.n	8001c1c <UART_WaitOnFlagUntilTimeout+0x10>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001c34:	f1b8 0f00 	cmp.w	r8, #0
 8001c38:	d005      	beq.n	8001c46 <UART_WaitOnFlagUntilTimeout+0x3a>
 8001c3a:	f7fe fd93 	bl	8000764 <HAL_GetTick>
 8001c3e:	eba0 0009 	sub.w	r0, r0, r9
 8001c42:	4540      	cmp	r0, r8
 8001c44:	d9ea      	bls.n	8001c1c <UART_WaitOnFlagUntilTimeout+0x10>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001c46:	682a      	ldr	r2, [r5, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c48:	f102 030c 	add.w	r3, r2, #12
 8001c4c:	e853 3f00 	ldrex	r3, [r3]
 8001c50:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c54:	320c      	adds	r2, #12
 8001c56:	e842 3100 	strex	r1, r3, [r2]
 8001c5a:	2900      	cmp	r1, #0
 8001c5c:	d1f3      	bne.n	8001c46 <UART_WaitOnFlagUntilTimeout+0x3a>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001c5e:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c60:	f102 0314 	add.w	r3, r2, #20
 8001c64:	e853 3f00 	ldrex	r3, [r3]
 8001c68:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c6c:	3214      	adds	r2, #20
 8001c6e:	e842 3100 	strex	r1, r3, [r2]
 8001c72:	2900      	cmp	r1, #0
 8001c74:	d1f3      	bne.n	8001c5e <UART_WaitOnFlagUntilTimeout+0x52>
        huart->gState  = HAL_UART_STATE_READY;
 8001c76:	2320      	movs	r3, #32
 8001c78:	f885 3041 	strb.w	r3, [r5, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8001c7c:	f885 3042 	strb.w	r3, [r5, #66]	@ 0x42
        __HAL_UNLOCK(huart);
 8001c80:	2300      	movs	r3, #0
 8001c82:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
        return HAL_TIMEOUT;
 8001c86:	2003      	movs	r0, #3
 8001c88:	e000      	b.n	8001c8c <UART_WaitOnFlagUntilTimeout+0x80>
  return HAL_OK;
 8001c8a:	2000      	movs	r0, #0
}
 8001c8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08001c90 <HAL_UART_Init>:
  if (huart == NULL)
 8001c90:	b360      	cbz	r0, 8001cec <HAL_UART_Init+0x5c>
{
 8001c92:	b510      	push	{r4, lr}
 8001c94:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8001c96:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8001c9a:	b313      	cbz	r3, 8001ce2 <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 8001c9c:	2324      	movs	r3, #36	@ 0x24
 8001c9e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 8001ca2:	6822      	ldr	r2, [r4, #0]
 8001ca4:	68d3      	ldr	r3, [r2, #12]
 8001ca6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8001caa:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001cac:	4620      	mov	r0, r4
 8001cae:	f7ff ff63 	bl	8001b78 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001cb2:	6822      	ldr	r2, [r4, #0]
 8001cb4:	6913      	ldr	r3, [r2, #16]
 8001cb6:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 8001cba:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001cbc:	6822      	ldr	r2, [r4, #0]
 8001cbe:	6953      	ldr	r3, [r2, #20]
 8001cc0:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 8001cc4:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8001cc6:	6822      	ldr	r2, [r4, #0]
 8001cc8:	68d3      	ldr	r3, [r2, #12]
 8001cca:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001cce:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cd0:	2000      	movs	r0, #0
 8001cd2:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001cd4:	2320      	movs	r3, #32
 8001cd6:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001cda:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001cde:	6360      	str	r0, [r4, #52]	@ 0x34
}
 8001ce0:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8001ce2:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 8001ce6:	f7fe fc33 	bl	8000550 <HAL_UART_MspInit>
 8001cea:	e7d7      	b.n	8001c9c <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8001cec:	2001      	movs	r0, #1
}
 8001cee:	4770      	bx	lr

08001cf0 <HAL_UART_Transmit>:
{
 8001cf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001cf4:	b082      	sub	sp, #8
 8001cf6:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8001cf8:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	2b20      	cmp	r3, #32
 8001d00:	d14b      	bne.n	8001d9a <HAL_UART_Transmit+0xaa>
 8001d02:	4604      	mov	r4, r0
 8001d04:	460d      	mov	r5, r1
 8001d06:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8001d08:	2900      	cmp	r1, #0
 8001d0a:	d04a      	beq.n	8001da2 <HAL_UART_Transmit+0xb2>
 8001d0c:	b90a      	cbnz	r2, 8001d12 <HAL_UART_Transmit+0x22>
      return  HAL_ERROR;
 8001d0e:	2001      	movs	r0, #1
 8001d10:	e044      	b.n	8001d9c <HAL_UART_Transmit+0xac>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d12:	2300      	movs	r3, #0
 8001d14:	6443      	str	r3, [r0, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001d16:	2321      	movs	r3, #33	@ 0x21
 8001d18:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    tickstart = HAL_GetTick();
 8001d1c:	f7fe fd22 	bl	8000764 <HAL_GetTick>
 8001d20:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8001d22:	f8a4 8024 	strh.w	r8, [r4, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001d26:	f8a4 8026 	strh.w	r8, [r4, #38]	@ 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d2a:	68a3      	ldr	r3, [r4, #8]
 8001d2c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001d30:	d002      	beq.n	8001d38 <HAL_UART_Transmit+0x48>
      pdata16bits = NULL;
 8001d32:	f04f 0800 	mov.w	r8, #0
 8001d36:	e00f      	b.n	8001d58 <HAL_UART_Transmit+0x68>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d38:	6923      	ldr	r3, [r4, #16]
 8001d3a:	b1fb      	cbz	r3, 8001d7c <HAL_UART_Transmit+0x8c>
      pdata16bits = NULL;
 8001d3c:	f04f 0800 	mov.w	r8, #0
 8001d40:	e00a      	b.n	8001d58 <HAL_UART_Transmit+0x68>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001d42:	f838 3b02 	ldrh.w	r3, [r8], #2
 8001d46:	6822      	ldr	r2, [r4, #0]
 8001d48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d4c:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8001d4e:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
 8001d50:	b292      	uxth	r2, r2
 8001d52:	3a01      	subs	r2, #1
 8001d54:	b292      	uxth	r2, r2
 8001d56:	84e2      	strh	r2, [r4, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001d58:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8001d5a:	b29b      	uxth	r3, r3
 8001d5c:	b18b      	cbz	r3, 8001d82 <HAL_UART_Transmit+0x92>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001d5e:	9600      	str	r6, [sp, #0]
 8001d60:	463b      	mov	r3, r7
 8001d62:	2200      	movs	r2, #0
 8001d64:	2180      	movs	r1, #128	@ 0x80
 8001d66:	4620      	mov	r0, r4
 8001d68:	f7ff ff50 	bl	8001c0c <UART_WaitOnFlagUntilTimeout>
 8001d6c:	b9d8      	cbnz	r0, 8001da6 <HAL_UART_Transmit+0xb6>
      if (pdata8bits == NULL)
 8001d6e:	2d00      	cmp	r5, #0
 8001d70:	d0e7      	beq.n	8001d42 <HAL_UART_Transmit+0x52>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001d72:	f815 2b01 	ldrb.w	r2, [r5], #1
 8001d76:	6823      	ldr	r3, [r4, #0]
 8001d78:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001d7a:	e7e8      	b.n	8001d4e <HAL_UART_Transmit+0x5e>
      pdata16bits = (const uint16_t *) pData;
 8001d7c:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8001d7e:	2500      	movs	r5, #0
 8001d80:	e7ea      	b.n	8001d58 <HAL_UART_Transmit+0x68>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001d82:	9600      	str	r6, [sp, #0]
 8001d84:	463b      	mov	r3, r7
 8001d86:	2200      	movs	r2, #0
 8001d88:	2140      	movs	r1, #64	@ 0x40
 8001d8a:	4620      	mov	r0, r4
 8001d8c:	f7ff ff3e 	bl	8001c0c <UART_WaitOnFlagUntilTimeout>
 8001d90:	b958      	cbnz	r0, 8001daa <HAL_UART_Transmit+0xba>
    huart->gState = HAL_UART_STATE_READY;
 8001d92:	2320      	movs	r3, #32
 8001d94:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    return HAL_OK;
 8001d98:	e000      	b.n	8001d9c <HAL_UART_Transmit+0xac>
    return HAL_BUSY;
 8001d9a:	2002      	movs	r0, #2
}
 8001d9c:	b002      	add	sp, #8
 8001d9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8001da2:	2001      	movs	r0, #1
 8001da4:	e7fa      	b.n	8001d9c <HAL_UART_Transmit+0xac>
        return HAL_TIMEOUT;
 8001da6:	2003      	movs	r0, #3
 8001da8:	e7f8      	b.n	8001d9c <HAL_UART_Transmit+0xac>
      return HAL_TIMEOUT;
 8001daa:	2003      	movs	r0, #3
 8001dac:	e7f6      	b.n	8001d9c <HAL_UART_Transmit+0xac>
	...

08001db0 <std>:
 8001db0:	2300      	movs	r3, #0
 8001db2:	b510      	push	{r4, lr}
 8001db4:	4604      	mov	r4, r0
 8001db6:	e9c0 3300 	strd	r3, r3, [r0]
 8001dba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001dbe:	6083      	str	r3, [r0, #8]
 8001dc0:	8181      	strh	r1, [r0, #12]
 8001dc2:	6643      	str	r3, [r0, #100]	@ 0x64
 8001dc4:	81c2      	strh	r2, [r0, #14]
 8001dc6:	6183      	str	r3, [r0, #24]
 8001dc8:	4619      	mov	r1, r3
 8001dca:	2208      	movs	r2, #8
 8001dcc:	305c      	adds	r0, #92	@ 0x5c
 8001dce:	f000 f9f9 	bl	80021c4 <memset>
 8001dd2:	4b0d      	ldr	r3, [pc, #52]	@ (8001e08 <std+0x58>)
 8001dd4:	6224      	str	r4, [r4, #32]
 8001dd6:	6263      	str	r3, [r4, #36]	@ 0x24
 8001dd8:	4b0c      	ldr	r3, [pc, #48]	@ (8001e0c <std+0x5c>)
 8001dda:	62a3      	str	r3, [r4, #40]	@ 0x28
 8001ddc:	4b0c      	ldr	r3, [pc, #48]	@ (8001e10 <std+0x60>)
 8001dde:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8001de0:	4b0c      	ldr	r3, [pc, #48]	@ (8001e14 <std+0x64>)
 8001de2:	6323      	str	r3, [r4, #48]	@ 0x30
 8001de4:	4b0c      	ldr	r3, [pc, #48]	@ (8001e18 <std+0x68>)
 8001de6:	429c      	cmp	r4, r3
 8001de8:	d006      	beq.n	8001df8 <std+0x48>
 8001dea:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8001dee:	4294      	cmp	r4, r2
 8001df0:	d002      	beq.n	8001df8 <std+0x48>
 8001df2:	33d0      	adds	r3, #208	@ 0xd0
 8001df4:	429c      	cmp	r4, r3
 8001df6:	d105      	bne.n	8001e04 <std+0x54>
 8001df8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8001dfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001e00:	f000 ba58 	b.w	80022b4 <__retarget_lock_init_recursive>
 8001e04:	bd10      	pop	{r4, pc}
 8001e06:	bf00      	nop
 8001e08:	08002015 	.word	0x08002015
 8001e0c:	08002037 	.word	0x08002037
 8001e10:	0800206f 	.word	0x0800206f
 8001e14:	08002093 	.word	0x08002093
 8001e18:	20000148 	.word	0x20000148

08001e1c <stdio_exit_handler>:
 8001e1c:	4a02      	ldr	r2, [pc, #8]	@ (8001e28 <stdio_exit_handler+0xc>)
 8001e1e:	4903      	ldr	r1, [pc, #12]	@ (8001e2c <stdio_exit_handler+0x10>)
 8001e20:	4803      	ldr	r0, [pc, #12]	@ (8001e30 <stdio_exit_handler+0x14>)
 8001e22:	f000 b869 	b.w	8001ef8 <_fwalk_sglue>
 8001e26:	bf00      	nop
 8001e28:	2000000c 	.word	0x2000000c
 8001e2c:	08002b4d 	.word	0x08002b4d
 8001e30:	2000001c 	.word	0x2000001c

08001e34 <cleanup_stdio>:
 8001e34:	6841      	ldr	r1, [r0, #4]
 8001e36:	4b0c      	ldr	r3, [pc, #48]	@ (8001e68 <cleanup_stdio+0x34>)
 8001e38:	b510      	push	{r4, lr}
 8001e3a:	4299      	cmp	r1, r3
 8001e3c:	4604      	mov	r4, r0
 8001e3e:	d001      	beq.n	8001e44 <cleanup_stdio+0x10>
 8001e40:	f000 fe84 	bl	8002b4c <_fflush_r>
 8001e44:	68a1      	ldr	r1, [r4, #8]
 8001e46:	4b09      	ldr	r3, [pc, #36]	@ (8001e6c <cleanup_stdio+0x38>)
 8001e48:	4299      	cmp	r1, r3
 8001e4a:	d002      	beq.n	8001e52 <cleanup_stdio+0x1e>
 8001e4c:	4620      	mov	r0, r4
 8001e4e:	f000 fe7d 	bl	8002b4c <_fflush_r>
 8001e52:	68e1      	ldr	r1, [r4, #12]
 8001e54:	4b06      	ldr	r3, [pc, #24]	@ (8001e70 <cleanup_stdio+0x3c>)
 8001e56:	4299      	cmp	r1, r3
 8001e58:	d004      	beq.n	8001e64 <cleanup_stdio+0x30>
 8001e5a:	4620      	mov	r0, r4
 8001e5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001e60:	f000 be74 	b.w	8002b4c <_fflush_r>
 8001e64:	bd10      	pop	{r4, pc}
 8001e66:	bf00      	nop
 8001e68:	20000148 	.word	0x20000148
 8001e6c:	200001b0 	.word	0x200001b0
 8001e70:	20000218 	.word	0x20000218

08001e74 <global_stdio_init.part.0>:
 8001e74:	b510      	push	{r4, lr}
 8001e76:	4b0b      	ldr	r3, [pc, #44]	@ (8001ea4 <global_stdio_init.part.0+0x30>)
 8001e78:	4c0b      	ldr	r4, [pc, #44]	@ (8001ea8 <global_stdio_init.part.0+0x34>)
 8001e7a:	4a0c      	ldr	r2, [pc, #48]	@ (8001eac <global_stdio_init.part.0+0x38>)
 8001e7c:	4620      	mov	r0, r4
 8001e7e:	601a      	str	r2, [r3, #0]
 8001e80:	2104      	movs	r1, #4
 8001e82:	2200      	movs	r2, #0
 8001e84:	f7ff ff94 	bl	8001db0 <std>
 8001e88:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	2109      	movs	r1, #9
 8001e90:	f7ff ff8e 	bl	8001db0 <std>
 8001e94:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8001e98:	2202      	movs	r2, #2
 8001e9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001e9e:	2112      	movs	r1, #18
 8001ea0:	f7ff bf86 	b.w	8001db0 <std>
 8001ea4:	20000280 	.word	0x20000280
 8001ea8:	20000148 	.word	0x20000148
 8001eac:	08001e1d 	.word	0x08001e1d

08001eb0 <__sfp_lock_acquire>:
 8001eb0:	4801      	ldr	r0, [pc, #4]	@ (8001eb8 <__sfp_lock_acquire+0x8>)
 8001eb2:	f000 ba00 	b.w	80022b6 <__retarget_lock_acquire_recursive>
 8001eb6:	bf00      	nop
 8001eb8:	20000289 	.word	0x20000289

08001ebc <__sfp_lock_release>:
 8001ebc:	4801      	ldr	r0, [pc, #4]	@ (8001ec4 <__sfp_lock_release+0x8>)
 8001ebe:	f000 b9fb 	b.w	80022b8 <__retarget_lock_release_recursive>
 8001ec2:	bf00      	nop
 8001ec4:	20000289 	.word	0x20000289

08001ec8 <__sinit>:
 8001ec8:	b510      	push	{r4, lr}
 8001eca:	4604      	mov	r4, r0
 8001ecc:	f7ff fff0 	bl	8001eb0 <__sfp_lock_acquire>
 8001ed0:	6a23      	ldr	r3, [r4, #32]
 8001ed2:	b11b      	cbz	r3, 8001edc <__sinit+0x14>
 8001ed4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001ed8:	f7ff bff0 	b.w	8001ebc <__sfp_lock_release>
 8001edc:	4b04      	ldr	r3, [pc, #16]	@ (8001ef0 <__sinit+0x28>)
 8001ede:	6223      	str	r3, [r4, #32]
 8001ee0:	4b04      	ldr	r3, [pc, #16]	@ (8001ef4 <__sinit+0x2c>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d1f5      	bne.n	8001ed4 <__sinit+0xc>
 8001ee8:	f7ff ffc4 	bl	8001e74 <global_stdio_init.part.0>
 8001eec:	e7f2      	b.n	8001ed4 <__sinit+0xc>
 8001eee:	bf00      	nop
 8001ef0:	08001e35 	.word	0x08001e35
 8001ef4:	20000280 	.word	0x20000280

08001ef8 <_fwalk_sglue>:
 8001ef8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001efc:	4607      	mov	r7, r0
 8001efe:	4688      	mov	r8, r1
 8001f00:	4614      	mov	r4, r2
 8001f02:	2600      	movs	r6, #0
 8001f04:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001f08:	f1b9 0901 	subs.w	r9, r9, #1
 8001f0c:	d505      	bpl.n	8001f1a <_fwalk_sglue+0x22>
 8001f0e:	6824      	ldr	r4, [r4, #0]
 8001f10:	2c00      	cmp	r4, #0
 8001f12:	d1f7      	bne.n	8001f04 <_fwalk_sglue+0xc>
 8001f14:	4630      	mov	r0, r6
 8001f16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001f1a:	89ab      	ldrh	r3, [r5, #12]
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d907      	bls.n	8001f30 <_fwalk_sglue+0x38>
 8001f20:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001f24:	3301      	adds	r3, #1
 8001f26:	d003      	beq.n	8001f30 <_fwalk_sglue+0x38>
 8001f28:	4629      	mov	r1, r5
 8001f2a:	4638      	mov	r0, r7
 8001f2c:	47c0      	blx	r8
 8001f2e:	4306      	orrs	r6, r0
 8001f30:	3568      	adds	r5, #104	@ 0x68
 8001f32:	e7e9      	b.n	8001f08 <_fwalk_sglue+0x10>

08001f34 <iprintf>:
 8001f34:	b40f      	push	{r0, r1, r2, r3}
 8001f36:	b507      	push	{r0, r1, r2, lr}
 8001f38:	4906      	ldr	r1, [pc, #24]	@ (8001f54 <iprintf+0x20>)
 8001f3a:	ab04      	add	r3, sp, #16
 8001f3c:	6808      	ldr	r0, [r1, #0]
 8001f3e:	f853 2b04 	ldr.w	r2, [r3], #4
 8001f42:	6881      	ldr	r1, [r0, #8]
 8001f44:	9301      	str	r3, [sp, #4]
 8001f46:	f000 fad7 	bl	80024f8 <_vfiprintf_r>
 8001f4a:	b003      	add	sp, #12
 8001f4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8001f50:	b004      	add	sp, #16
 8001f52:	4770      	bx	lr
 8001f54:	20000018 	.word	0x20000018

08001f58 <_puts_r>:
 8001f58:	6a03      	ldr	r3, [r0, #32]
 8001f5a:	b570      	push	{r4, r5, r6, lr}
 8001f5c:	4605      	mov	r5, r0
 8001f5e:	460e      	mov	r6, r1
 8001f60:	6884      	ldr	r4, [r0, #8]
 8001f62:	b90b      	cbnz	r3, 8001f68 <_puts_r+0x10>
 8001f64:	f7ff ffb0 	bl	8001ec8 <__sinit>
 8001f68:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001f6a:	07db      	lsls	r3, r3, #31
 8001f6c:	d405      	bmi.n	8001f7a <_puts_r+0x22>
 8001f6e:	89a3      	ldrh	r3, [r4, #12]
 8001f70:	0598      	lsls	r0, r3, #22
 8001f72:	d402      	bmi.n	8001f7a <_puts_r+0x22>
 8001f74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001f76:	f000 f99e 	bl	80022b6 <__retarget_lock_acquire_recursive>
 8001f7a:	89a3      	ldrh	r3, [r4, #12]
 8001f7c:	0719      	lsls	r1, r3, #28
 8001f7e:	d502      	bpl.n	8001f86 <_puts_r+0x2e>
 8001f80:	6923      	ldr	r3, [r4, #16]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d135      	bne.n	8001ff2 <_puts_r+0x9a>
 8001f86:	4621      	mov	r1, r4
 8001f88:	4628      	mov	r0, r5
 8001f8a:	f000 f8c5 	bl	8002118 <__swsetup_r>
 8001f8e:	b380      	cbz	r0, 8001ff2 <_puts_r+0x9a>
 8001f90:	f04f 35ff 	mov.w	r5, #4294967295
 8001f94:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001f96:	07da      	lsls	r2, r3, #31
 8001f98:	d405      	bmi.n	8001fa6 <_puts_r+0x4e>
 8001f9a:	89a3      	ldrh	r3, [r4, #12]
 8001f9c:	059b      	lsls	r3, r3, #22
 8001f9e:	d402      	bmi.n	8001fa6 <_puts_r+0x4e>
 8001fa0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001fa2:	f000 f989 	bl	80022b8 <__retarget_lock_release_recursive>
 8001fa6:	4628      	mov	r0, r5
 8001fa8:	bd70      	pop	{r4, r5, r6, pc}
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	da04      	bge.n	8001fb8 <_puts_r+0x60>
 8001fae:	69a2      	ldr	r2, [r4, #24]
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	dc17      	bgt.n	8001fe4 <_puts_r+0x8c>
 8001fb4:	290a      	cmp	r1, #10
 8001fb6:	d015      	beq.n	8001fe4 <_puts_r+0x8c>
 8001fb8:	6823      	ldr	r3, [r4, #0]
 8001fba:	1c5a      	adds	r2, r3, #1
 8001fbc:	6022      	str	r2, [r4, #0]
 8001fbe:	7019      	strb	r1, [r3, #0]
 8001fc0:	68a3      	ldr	r3, [r4, #8]
 8001fc2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001fc6:	3b01      	subs	r3, #1
 8001fc8:	60a3      	str	r3, [r4, #8]
 8001fca:	2900      	cmp	r1, #0
 8001fcc:	d1ed      	bne.n	8001faa <_puts_r+0x52>
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	da11      	bge.n	8001ff6 <_puts_r+0x9e>
 8001fd2:	4622      	mov	r2, r4
 8001fd4:	210a      	movs	r1, #10
 8001fd6:	4628      	mov	r0, r5
 8001fd8:	f000 f85f 	bl	800209a <__swbuf_r>
 8001fdc:	3001      	adds	r0, #1
 8001fde:	d0d7      	beq.n	8001f90 <_puts_r+0x38>
 8001fe0:	250a      	movs	r5, #10
 8001fe2:	e7d7      	b.n	8001f94 <_puts_r+0x3c>
 8001fe4:	4622      	mov	r2, r4
 8001fe6:	4628      	mov	r0, r5
 8001fe8:	f000 f857 	bl	800209a <__swbuf_r>
 8001fec:	3001      	adds	r0, #1
 8001fee:	d1e7      	bne.n	8001fc0 <_puts_r+0x68>
 8001ff0:	e7ce      	b.n	8001f90 <_puts_r+0x38>
 8001ff2:	3e01      	subs	r6, #1
 8001ff4:	e7e4      	b.n	8001fc0 <_puts_r+0x68>
 8001ff6:	6823      	ldr	r3, [r4, #0]
 8001ff8:	1c5a      	adds	r2, r3, #1
 8001ffa:	6022      	str	r2, [r4, #0]
 8001ffc:	220a      	movs	r2, #10
 8001ffe:	701a      	strb	r2, [r3, #0]
 8002000:	e7ee      	b.n	8001fe0 <_puts_r+0x88>
	...

08002004 <puts>:
 8002004:	4b02      	ldr	r3, [pc, #8]	@ (8002010 <puts+0xc>)
 8002006:	4601      	mov	r1, r0
 8002008:	6818      	ldr	r0, [r3, #0]
 800200a:	f7ff bfa5 	b.w	8001f58 <_puts_r>
 800200e:	bf00      	nop
 8002010:	20000018 	.word	0x20000018

08002014 <__sread>:
 8002014:	b510      	push	{r4, lr}
 8002016:	460c      	mov	r4, r1
 8002018:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800201c:	f000 f8fc 	bl	8002218 <_read_r>
 8002020:	2800      	cmp	r0, #0
 8002022:	bfab      	itete	ge
 8002024:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002026:	89a3      	ldrhlt	r3, [r4, #12]
 8002028:	181b      	addge	r3, r3, r0
 800202a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800202e:	bfac      	ite	ge
 8002030:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002032:	81a3      	strhlt	r3, [r4, #12]
 8002034:	bd10      	pop	{r4, pc}

08002036 <__swrite>:
 8002036:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800203a:	461f      	mov	r7, r3
 800203c:	898b      	ldrh	r3, [r1, #12]
 800203e:	4605      	mov	r5, r0
 8002040:	05db      	lsls	r3, r3, #23
 8002042:	460c      	mov	r4, r1
 8002044:	4616      	mov	r6, r2
 8002046:	d505      	bpl.n	8002054 <__swrite+0x1e>
 8002048:	2302      	movs	r3, #2
 800204a:	2200      	movs	r2, #0
 800204c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002050:	f000 f8d0 	bl	80021f4 <_lseek_r>
 8002054:	89a3      	ldrh	r3, [r4, #12]
 8002056:	4632      	mov	r2, r6
 8002058:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800205c:	81a3      	strh	r3, [r4, #12]
 800205e:	4628      	mov	r0, r5
 8002060:	463b      	mov	r3, r7
 8002062:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002066:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800206a:	f000 b8e7 	b.w	800223c <_write_r>

0800206e <__sseek>:
 800206e:	b510      	push	{r4, lr}
 8002070:	460c      	mov	r4, r1
 8002072:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002076:	f000 f8bd 	bl	80021f4 <_lseek_r>
 800207a:	1c43      	adds	r3, r0, #1
 800207c:	89a3      	ldrh	r3, [r4, #12]
 800207e:	bf15      	itete	ne
 8002080:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002082:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002086:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800208a:	81a3      	strheq	r3, [r4, #12]
 800208c:	bf18      	it	ne
 800208e:	81a3      	strhne	r3, [r4, #12]
 8002090:	bd10      	pop	{r4, pc}

08002092 <__sclose>:
 8002092:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002096:	f000 b89d 	b.w	80021d4 <_close_r>

0800209a <__swbuf_r>:
 800209a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800209c:	460e      	mov	r6, r1
 800209e:	4614      	mov	r4, r2
 80020a0:	4605      	mov	r5, r0
 80020a2:	b118      	cbz	r0, 80020ac <__swbuf_r+0x12>
 80020a4:	6a03      	ldr	r3, [r0, #32]
 80020a6:	b90b      	cbnz	r3, 80020ac <__swbuf_r+0x12>
 80020a8:	f7ff ff0e 	bl	8001ec8 <__sinit>
 80020ac:	69a3      	ldr	r3, [r4, #24]
 80020ae:	60a3      	str	r3, [r4, #8]
 80020b0:	89a3      	ldrh	r3, [r4, #12]
 80020b2:	071a      	lsls	r2, r3, #28
 80020b4:	d501      	bpl.n	80020ba <__swbuf_r+0x20>
 80020b6:	6923      	ldr	r3, [r4, #16]
 80020b8:	b943      	cbnz	r3, 80020cc <__swbuf_r+0x32>
 80020ba:	4621      	mov	r1, r4
 80020bc:	4628      	mov	r0, r5
 80020be:	f000 f82b 	bl	8002118 <__swsetup_r>
 80020c2:	b118      	cbz	r0, 80020cc <__swbuf_r+0x32>
 80020c4:	f04f 37ff 	mov.w	r7, #4294967295
 80020c8:	4638      	mov	r0, r7
 80020ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80020cc:	6823      	ldr	r3, [r4, #0]
 80020ce:	6922      	ldr	r2, [r4, #16]
 80020d0:	b2f6      	uxtb	r6, r6
 80020d2:	1a98      	subs	r0, r3, r2
 80020d4:	6963      	ldr	r3, [r4, #20]
 80020d6:	4637      	mov	r7, r6
 80020d8:	4283      	cmp	r3, r0
 80020da:	dc05      	bgt.n	80020e8 <__swbuf_r+0x4e>
 80020dc:	4621      	mov	r1, r4
 80020de:	4628      	mov	r0, r5
 80020e0:	f000 fd34 	bl	8002b4c <_fflush_r>
 80020e4:	2800      	cmp	r0, #0
 80020e6:	d1ed      	bne.n	80020c4 <__swbuf_r+0x2a>
 80020e8:	68a3      	ldr	r3, [r4, #8]
 80020ea:	3b01      	subs	r3, #1
 80020ec:	60a3      	str	r3, [r4, #8]
 80020ee:	6823      	ldr	r3, [r4, #0]
 80020f0:	1c5a      	adds	r2, r3, #1
 80020f2:	6022      	str	r2, [r4, #0]
 80020f4:	701e      	strb	r6, [r3, #0]
 80020f6:	6962      	ldr	r2, [r4, #20]
 80020f8:	1c43      	adds	r3, r0, #1
 80020fa:	429a      	cmp	r2, r3
 80020fc:	d004      	beq.n	8002108 <__swbuf_r+0x6e>
 80020fe:	89a3      	ldrh	r3, [r4, #12]
 8002100:	07db      	lsls	r3, r3, #31
 8002102:	d5e1      	bpl.n	80020c8 <__swbuf_r+0x2e>
 8002104:	2e0a      	cmp	r6, #10
 8002106:	d1df      	bne.n	80020c8 <__swbuf_r+0x2e>
 8002108:	4621      	mov	r1, r4
 800210a:	4628      	mov	r0, r5
 800210c:	f000 fd1e 	bl	8002b4c <_fflush_r>
 8002110:	2800      	cmp	r0, #0
 8002112:	d0d9      	beq.n	80020c8 <__swbuf_r+0x2e>
 8002114:	e7d6      	b.n	80020c4 <__swbuf_r+0x2a>
	...

08002118 <__swsetup_r>:
 8002118:	b538      	push	{r3, r4, r5, lr}
 800211a:	4b29      	ldr	r3, [pc, #164]	@ (80021c0 <__swsetup_r+0xa8>)
 800211c:	4605      	mov	r5, r0
 800211e:	6818      	ldr	r0, [r3, #0]
 8002120:	460c      	mov	r4, r1
 8002122:	b118      	cbz	r0, 800212c <__swsetup_r+0x14>
 8002124:	6a03      	ldr	r3, [r0, #32]
 8002126:	b90b      	cbnz	r3, 800212c <__swsetup_r+0x14>
 8002128:	f7ff fece 	bl	8001ec8 <__sinit>
 800212c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002130:	0719      	lsls	r1, r3, #28
 8002132:	d422      	bmi.n	800217a <__swsetup_r+0x62>
 8002134:	06da      	lsls	r2, r3, #27
 8002136:	d407      	bmi.n	8002148 <__swsetup_r+0x30>
 8002138:	2209      	movs	r2, #9
 800213a:	602a      	str	r2, [r5, #0]
 800213c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002140:	f04f 30ff 	mov.w	r0, #4294967295
 8002144:	81a3      	strh	r3, [r4, #12]
 8002146:	e033      	b.n	80021b0 <__swsetup_r+0x98>
 8002148:	0758      	lsls	r0, r3, #29
 800214a:	d512      	bpl.n	8002172 <__swsetup_r+0x5a>
 800214c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800214e:	b141      	cbz	r1, 8002162 <__swsetup_r+0x4a>
 8002150:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002154:	4299      	cmp	r1, r3
 8002156:	d002      	beq.n	800215e <__swsetup_r+0x46>
 8002158:	4628      	mov	r0, r5
 800215a:	f000 f8af 	bl	80022bc <_free_r>
 800215e:	2300      	movs	r3, #0
 8002160:	6363      	str	r3, [r4, #52]	@ 0x34
 8002162:	89a3      	ldrh	r3, [r4, #12]
 8002164:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8002168:	81a3      	strh	r3, [r4, #12]
 800216a:	2300      	movs	r3, #0
 800216c:	6063      	str	r3, [r4, #4]
 800216e:	6923      	ldr	r3, [r4, #16]
 8002170:	6023      	str	r3, [r4, #0]
 8002172:	89a3      	ldrh	r3, [r4, #12]
 8002174:	f043 0308 	orr.w	r3, r3, #8
 8002178:	81a3      	strh	r3, [r4, #12]
 800217a:	6923      	ldr	r3, [r4, #16]
 800217c:	b94b      	cbnz	r3, 8002192 <__swsetup_r+0x7a>
 800217e:	89a3      	ldrh	r3, [r4, #12]
 8002180:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8002184:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002188:	d003      	beq.n	8002192 <__swsetup_r+0x7a>
 800218a:	4621      	mov	r1, r4
 800218c:	4628      	mov	r0, r5
 800218e:	f000 fd2a 	bl	8002be6 <__smakebuf_r>
 8002192:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002196:	f013 0201 	ands.w	r2, r3, #1
 800219a:	d00a      	beq.n	80021b2 <__swsetup_r+0x9a>
 800219c:	2200      	movs	r2, #0
 800219e:	60a2      	str	r2, [r4, #8]
 80021a0:	6962      	ldr	r2, [r4, #20]
 80021a2:	4252      	negs	r2, r2
 80021a4:	61a2      	str	r2, [r4, #24]
 80021a6:	6922      	ldr	r2, [r4, #16]
 80021a8:	b942      	cbnz	r2, 80021bc <__swsetup_r+0xa4>
 80021aa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80021ae:	d1c5      	bne.n	800213c <__swsetup_r+0x24>
 80021b0:	bd38      	pop	{r3, r4, r5, pc}
 80021b2:	0799      	lsls	r1, r3, #30
 80021b4:	bf58      	it	pl
 80021b6:	6962      	ldrpl	r2, [r4, #20]
 80021b8:	60a2      	str	r2, [r4, #8]
 80021ba:	e7f4      	b.n	80021a6 <__swsetup_r+0x8e>
 80021bc:	2000      	movs	r0, #0
 80021be:	e7f7      	b.n	80021b0 <__swsetup_r+0x98>
 80021c0:	20000018 	.word	0x20000018

080021c4 <memset>:
 80021c4:	4603      	mov	r3, r0
 80021c6:	4402      	add	r2, r0
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d100      	bne.n	80021ce <memset+0xa>
 80021cc:	4770      	bx	lr
 80021ce:	f803 1b01 	strb.w	r1, [r3], #1
 80021d2:	e7f9      	b.n	80021c8 <memset+0x4>

080021d4 <_close_r>:
 80021d4:	b538      	push	{r3, r4, r5, lr}
 80021d6:	2300      	movs	r3, #0
 80021d8:	4d05      	ldr	r5, [pc, #20]	@ (80021f0 <_close_r+0x1c>)
 80021da:	4604      	mov	r4, r0
 80021dc:	4608      	mov	r0, r1
 80021de:	602b      	str	r3, [r5, #0]
 80021e0:	f7fe fa24 	bl	800062c <_close>
 80021e4:	1c43      	adds	r3, r0, #1
 80021e6:	d102      	bne.n	80021ee <_close_r+0x1a>
 80021e8:	682b      	ldr	r3, [r5, #0]
 80021ea:	b103      	cbz	r3, 80021ee <_close_r+0x1a>
 80021ec:	6023      	str	r3, [r4, #0]
 80021ee:	bd38      	pop	{r3, r4, r5, pc}
 80021f0:	20000284 	.word	0x20000284

080021f4 <_lseek_r>:
 80021f4:	b538      	push	{r3, r4, r5, lr}
 80021f6:	4604      	mov	r4, r0
 80021f8:	4608      	mov	r0, r1
 80021fa:	4611      	mov	r1, r2
 80021fc:	2200      	movs	r2, #0
 80021fe:	4d05      	ldr	r5, [pc, #20]	@ (8002214 <_lseek_r+0x20>)
 8002200:	602a      	str	r2, [r5, #0]
 8002202:	461a      	mov	r2, r3
 8002204:	f7fe fa1c 	bl	8000640 <_lseek>
 8002208:	1c43      	adds	r3, r0, #1
 800220a:	d102      	bne.n	8002212 <_lseek_r+0x1e>
 800220c:	682b      	ldr	r3, [r5, #0]
 800220e:	b103      	cbz	r3, 8002212 <_lseek_r+0x1e>
 8002210:	6023      	str	r3, [r4, #0]
 8002212:	bd38      	pop	{r3, r4, r5, pc}
 8002214:	20000284 	.word	0x20000284

08002218 <_read_r>:
 8002218:	b538      	push	{r3, r4, r5, lr}
 800221a:	4604      	mov	r4, r0
 800221c:	4608      	mov	r0, r1
 800221e:	4611      	mov	r1, r2
 8002220:	2200      	movs	r2, #0
 8002222:	4d05      	ldr	r5, [pc, #20]	@ (8002238 <_read_r+0x20>)
 8002224:	602a      	str	r2, [r5, #0]
 8002226:	461a      	mov	r2, r3
 8002228:	f7fe f9e2 	bl	80005f0 <_read>
 800222c:	1c43      	adds	r3, r0, #1
 800222e:	d102      	bne.n	8002236 <_read_r+0x1e>
 8002230:	682b      	ldr	r3, [r5, #0]
 8002232:	b103      	cbz	r3, 8002236 <_read_r+0x1e>
 8002234:	6023      	str	r3, [r4, #0]
 8002236:	bd38      	pop	{r3, r4, r5, pc}
 8002238:	20000284 	.word	0x20000284

0800223c <_write_r>:
 800223c:	b538      	push	{r3, r4, r5, lr}
 800223e:	4604      	mov	r4, r0
 8002240:	4608      	mov	r0, r1
 8002242:	4611      	mov	r1, r2
 8002244:	2200      	movs	r2, #0
 8002246:	4d05      	ldr	r5, [pc, #20]	@ (800225c <_write_r+0x20>)
 8002248:	602a      	str	r2, [r5, #0]
 800224a:	461a      	mov	r2, r3
 800224c:	f7fe f9e0 	bl	8000610 <_write>
 8002250:	1c43      	adds	r3, r0, #1
 8002252:	d102      	bne.n	800225a <_write_r+0x1e>
 8002254:	682b      	ldr	r3, [r5, #0]
 8002256:	b103      	cbz	r3, 800225a <_write_r+0x1e>
 8002258:	6023      	str	r3, [r4, #0]
 800225a:	bd38      	pop	{r3, r4, r5, pc}
 800225c:	20000284 	.word	0x20000284

08002260 <__errno>:
 8002260:	4b01      	ldr	r3, [pc, #4]	@ (8002268 <__errno+0x8>)
 8002262:	6818      	ldr	r0, [r3, #0]
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop
 8002268:	20000018 	.word	0x20000018

0800226c <__libc_init_array>:
 800226c:	b570      	push	{r4, r5, r6, lr}
 800226e:	2600      	movs	r6, #0
 8002270:	4d0c      	ldr	r5, [pc, #48]	@ (80022a4 <__libc_init_array+0x38>)
 8002272:	4c0d      	ldr	r4, [pc, #52]	@ (80022a8 <__libc_init_array+0x3c>)
 8002274:	1b64      	subs	r4, r4, r5
 8002276:	10a4      	asrs	r4, r4, #2
 8002278:	42a6      	cmp	r6, r4
 800227a:	d109      	bne.n	8002290 <__libc_init_array+0x24>
 800227c:	f000 fd30 	bl	8002ce0 <_init>
 8002280:	2600      	movs	r6, #0
 8002282:	4d0a      	ldr	r5, [pc, #40]	@ (80022ac <__libc_init_array+0x40>)
 8002284:	4c0a      	ldr	r4, [pc, #40]	@ (80022b0 <__libc_init_array+0x44>)
 8002286:	1b64      	subs	r4, r4, r5
 8002288:	10a4      	asrs	r4, r4, #2
 800228a:	42a6      	cmp	r6, r4
 800228c:	d105      	bne.n	800229a <__libc_init_array+0x2e>
 800228e:	bd70      	pop	{r4, r5, r6, pc}
 8002290:	f855 3b04 	ldr.w	r3, [r5], #4
 8002294:	4798      	blx	r3
 8002296:	3601      	adds	r6, #1
 8002298:	e7ee      	b.n	8002278 <__libc_init_array+0xc>
 800229a:	f855 3b04 	ldr.w	r3, [r5], #4
 800229e:	4798      	blx	r3
 80022a0:	3601      	adds	r6, #1
 80022a2:	e7f2      	b.n	800228a <__libc_init_array+0x1e>
 80022a4:	08002e3c 	.word	0x08002e3c
 80022a8:	08002e3c 	.word	0x08002e3c
 80022ac:	08002e3c 	.word	0x08002e3c
 80022b0:	08002e40 	.word	0x08002e40

080022b4 <__retarget_lock_init_recursive>:
 80022b4:	4770      	bx	lr

080022b6 <__retarget_lock_acquire_recursive>:
 80022b6:	4770      	bx	lr

080022b8 <__retarget_lock_release_recursive>:
 80022b8:	4770      	bx	lr
	...

080022bc <_free_r>:
 80022bc:	b538      	push	{r3, r4, r5, lr}
 80022be:	4605      	mov	r5, r0
 80022c0:	2900      	cmp	r1, #0
 80022c2:	d040      	beq.n	8002346 <_free_r+0x8a>
 80022c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80022c8:	1f0c      	subs	r4, r1, #4
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	bfb8      	it	lt
 80022ce:	18e4      	addlt	r4, r4, r3
 80022d0:	f000 f8de 	bl	8002490 <__malloc_lock>
 80022d4:	4a1c      	ldr	r2, [pc, #112]	@ (8002348 <_free_r+0x8c>)
 80022d6:	6813      	ldr	r3, [r2, #0]
 80022d8:	b933      	cbnz	r3, 80022e8 <_free_r+0x2c>
 80022da:	6063      	str	r3, [r4, #4]
 80022dc:	6014      	str	r4, [r2, #0]
 80022de:	4628      	mov	r0, r5
 80022e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80022e4:	f000 b8da 	b.w	800249c <__malloc_unlock>
 80022e8:	42a3      	cmp	r3, r4
 80022ea:	d908      	bls.n	80022fe <_free_r+0x42>
 80022ec:	6820      	ldr	r0, [r4, #0]
 80022ee:	1821      	adds	r1, r4, r0
 80022f0:	428b      	cmp	r3, r1
 80022f2:	bf01      	itttt	eq
 80022f4:	6819      	ldreq	r1, [r3, #0]
 80022f6:	685b      	ldreq	r3, [r3, #4]
 80022f8:	1809      	addeq	r1, r1, r0
 80022fa:	6021      	streq	r1, [r4, #0]
 80022fc:	e7ed      	b.n	80022da <_free_r+0x1e>
 80022fe:	461a      	mov	r2, r3
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	b10b      	cbz	r3, 8002308 <_free_r+0x4c>
 8002304:	42a3      	cmp	r3, r4
 8002306:	d9fa      	bls.n	80022fe <_free_r+0x42>
 8002308:	6811      	ldr	r1, [r2, #0]
 800230a:	1850      	adds	r0, r2, r1
 800230c:	42a0      	cmp	r0, r4
 800230e:	d10b      	bne.n	8002328 <_free_r+0x6c>
 8002310:	6820      	ldr	r0, [r4, #0]
 8002312:	4401      	add	r1, r0
 8002314:	1850      	adds	r0, r2, r1
 8002316:	4283      	cmp	r3, r0
 8002318:	6011      	str	r1, [r2, #0]
 800231a:	d1e0      	bne.n	80022de <_free_r+0x22>
 800231c:	6818      	ldr	r0, [r3, #0]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	4408      	add	r0, r1
 8002322:	6010      	str	r0, [r2, #0]
 8002324:	6053      	str	r3, [r2, #4]
 8002326:	e7da      	b.n	80022de <_free_r+0x22>
 8002328:	d902      	bls.n	8002330 <_free_r+0x74>
 800232a:	230c      	movs	r3, #12
 800232c:	602b      	str	r3, [r5, #0]
 800232e:	e7d6      	b.n	80022de <_free_r+0x22>
 8002330:	6820      	ldr	r0, [r4, #0]
 8002332:	1821      	adds	r1, r4, r0
 8002334:	428b      	cmp	r3, r1
 8002336:	bf01      	itttt	eq
 8002338:	6819      	ldreq	r1, [r3, #0]
 800233a:	685b      	ldreq	r3, [r3, #4]
 800233c:	1809      	addeq	r1, r1, r0
 800233e:	6021      	streq	r1, [r4, #0]
 8002340:	6063      	str	r3, [r4, #4]
 8002342:	6054      	str	r4, [r2, #4]
 8002344:	e7cb      	b.n	80022de <_free_r+0x22>
 8002346:	bd38      	pop	{r3, r4, r5, pc}
 8002348:	20000290 	.word	0x20000290

0800234c <sbrk_aligned>:
 800234c:	b570      	push	{r4, r5, r6, lr}
 800234e:	4e0f      	ldr	r6, [pc, #60]	@ (800238c <sbrk_aligned+0x40>)
 8002350:	460c      	mov	r4, r1
 8002352:	6831      	ldr	r1, [r6, #0]
 8002354:	4605      	mov	r5, r0
 8002356:	b911      	cbnz	r1, 800235e <sbrk_aligned+0x12>
 8002358:	f000 fca4 	bl	8002ca4 <_sbrk_r>
 800235c:	6030      	str	r0, [r6, #0]
 800235e:	4621      	mov	r1, r4
 8002360:	4628      	mov	r0, r5
 8002362:	f000 fc9f 	bl	8002ca4 <_sbrk_r>
 8002366:	1c43      	adds	r3, r0, #1
 8002368:	d103      	bne.n	8002372 <sbrk_aligned+0x26>
 800236a:	f04f 34ff 	mov.w	r4, #4294967295
 800236e:	4620      	mov	r0, r4
 8002370:	bd70      	pop	{r4, r5, r6, pc}
 8002372:	1cc4      	adds	r4, r0, #3
 8002374:	f024 0403 	bic.w	r4, r4, #3
 8002378:	42a0      	cmp	r0, r4
 800237a:	d0f8      	beq.n	800236e <sbrk_aligned+0x22>
 800237c:	1a21      	subs	r1, r4, r0
 800237e:	4628      	mov	r0, r5
 8002380:	f000 fc90 	bl	8002ca4 <_sbrk_r>
 8002384:	3001      	adds	r0, #1
 8002386:	d1f2      	bne.n	800236e <sbrk_aligned+0x22>
 8002388:	e7ef      	b.n	800236a <sbrk_aligned+0x1e>
 800238a:	bf00      	nop
 800238c:	2000028c 	.word	0x2000028c

08002390 <_malloc_r>:
 8002390:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002394:	1ccd      	adds	r5, r1, #3
 8002396:	f025 0503 	bic.w	r5, r5, #3
 800239a:	3508      	adds	r5, #8
 800239c:	2d0c      	cmp	r5, #12
 800239e:	bf38      	it	cc
 80023a0:	250c      	movcc	r5, #12
 80023a2:	2d00      	cmp	r5, #0
 80023a4:	4606      	mov	r6, r0
 80023a6:	db01      	blt.n	80023ac <_malloc_r+0x1c>
 80023a8:	42a9      	cmp	r1, r5
 80023aa:	d904      	bls.n	80023b6 <_malloc_r+0x26>
 80023ac:	230c      	movs	r3, #12
 80023ae:	6033      	str	r3, [r6, #0]
 80023b0:	2000      	movs	r0, #0
 80023b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80023b6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800248c <_malloc_r+0xfc>
 80023ba:	f000 f869 	bl	8002490 <__malloc_lock>
 80023be:	f8d8 3000 	ldr.w	r3, [r8]
 80023c2:	461c      	mov	r4, r3
 80023c4:	bb44      	cbnz	r4, 8002418 <_malloc_r+0x88>
 80023c6:	4629      	mov	r1, r5
 80023c8:	4630      	mov	r0, r6
 80023ca:	f7ff ffbf 	bl	800234c <sbrk_aligned>
 80023ce:	1c43      	adds	r3, r0, #1
 80023d0:	4604      	mov	r4, r0
 80023d2:	d158      	bne.n	8002486 <_malloc_r+0xf6>
 80023d4:	f8d8 4000 	ldr.w	r4, [r8]
 80023d8:	4627      	mov	r7, r4
 80023da:	2f00      	cmp	r7, #0
 80023dc:	d143      	bne.n	8002466 <_malloc_r+0xd6>
 80023de:	2c00      	cmp	r4, #0
 80023e0:	d04b      	beq.n	800247a <_malloc_r+0xea>
 80023e2:	6823      	ldr	r3, [r4, #0]
 80023e4:	4639      	mov	r1, r7
 80023e6:	4630      	mov	r0, r6
 80023e8:	eb04 0903 	add.w	r9, r4, r3
 80023ec:	f000 fc5a 	bl	8002ca4 <_sbrk_r>
 80023f0:	4581      	cmp	r9, r0
 80023f2:	d142      	bne.n	800247a <_malloc_r+0xea>
 80023f4:	6821      	ldr	r1, [r4, #0]
 80023f6:	4630      	mov	r0, r6
 80023f8:	1a6d      	subs	r5, r5, r1
 80023fa:	4629      	mov	r1, r5
 80023fc:	f7ff ffa6 	bl	800234c <sbrk_aligned>
 8002400:	3001      	adds	r0, #1
 8002402:	d03a      	beq.n	800247a <_malloc_r+0xea>
 8002404:	6823      	ldr	r3, [r4, #0]
 8002406:	442b      	add	r3, r5
 8002408:	6023      	str	r3, [r4, #0]
 800240a:	f8d8 3000 	ldr.w	r3, [r8]
 800240e:	685a      	ldr	r2, [r3, #4]
 8002410:	bb62      	cbnz	r2, 800246c <_malloc_r+0xdc>
 8002412:	f8c8 7000 	str.w	r7, [r8]
 8002416:	e00f      	b.n	8002438 <_malloc_r+0xa8>
 8002418:	6822      	ldr	r2, [r4, #0]
 800241a:	1b52      	subs	r2, r2, r5
 800241c:	d420      	bmi.n	8002460 <_malloc_r+0xd0>
 800241e:	2a0b      	cmp	r2, #11
 8002420:	d917      	bls.n	8002452 <_malloc_r+0xc2>
 8002422:	1961      	adds	r1, r4, r5
 8002424:	42a3      	cmp	r3, r4
 8002426:	6025      	str	r5, [r4, #0]
 8002428:	bf18      	it	ne
 800242a:	6059      	strne	r1, [r3, #4]
 800242c:	6863      	ldr	r3, [r4, #4]
 800242e:	bf08      	it	eq
 8002430:	f8c8 1000 	streq.w	r1, [r8]
 8002434:	5162      	str	r2, [r4, r5]
 8002436:	604b      	str	r3, [r1, #4]
 8002438:	4630      	mov	r0, r6
 800243a:	f000 f82f 	bl	800249c <__malloc_unlock>
 800243e:	f104 000b 	add.w	r0, r4, #11
 8002442:	1d23      	adds	r3, r4, #4
 8002444:	f020 0007 	bic.w	r0, r0, #7
 8002448:	1ac2      	subs	r2, r0, r3
 800244a:	bf1c      	itt	ne
 800244c:	1a1b      	subne	r3, r3, r0
 800244e:	50a3      	strne	r3, [r4, r2]
 8002450:	e7af      	b.n	80023b2 <_malloc_r+0x22>
 8002452:	6862      	ldr	r2, [r4, #4]
 8002454:	42a3      	cmp	r3, r4
 8002456:	bf0c      	ite	eq
 8002458:	f8c8 2000 	streq.w	r2, [r8]
 800245c:	605a      	strne	r2, [r3, #4]
 800245e:	e7eb      	b.n	8002438 <_malloc_r+0xa8>
 8002460:	4623      	mov	r3, r4
 8002462:	6864      	ldr	r4, [r4, #4]
 8002464:	e7ae      	b.n	80023c4 <_malloc_r+0x34>
 8002466:	463c      	mov	r4, r7
 8002468:	687f      	ldr	r7, [r7, #4]
 800246a:	e7b6      	b.n	80023da <_malloc_r+0x4a>
 800246c:	461a      	mov	r2, r3
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	42a3      	cmp	r3, r4
 8002472:	d1fb      	bne.n	800246c <_malloc_r+0xdc>
 8002474:	2300      	movs	r3, #0
 8002476:	6053      	str	r3, [r2, #4]
 8002478:	e7de      	b.n	8002438 <_malloc_r+0xa8>
 800247a:	230c      	movs	r3, #12
 800247c:	4630      	mov	r0, r6
 800247e:	6033      	str	r3, [r6, #0]
 8002480:	f000 f80c 	bl	800249c <__malloc_unlock>
 8002484:	e794      	b.n	80023b0 <_malloc_r+0x20>
 8002486:	6005      	str	r5, [r0, #0]
 8002488:	e7d6      	b.n	8002438 <_malloc_r+0xa8>
 800248a:	bf00      	nop
 800248c:	20000290 	.word	0x20000290

08002490 <__malloc_lock>:
 8002490:	4801      	ldr	r0, [pc, #4]	@ (8002498 <__malloc_lock+0x8>)
 8002492:	f7ff bf10 	b.w	80022b6 <__retarget_lock_acquire_recursive>
 8002496:	bf00      	nop
 8002498:	20000288 	.word	0x20000288

0800249c <__malloc_unlock>:
 800249c:	4801      	ldr	r0, [pc, #4]	@ (80024a4 <__malloc_unlock+0x8>)
 800249e:	f7ff bf0b 	b.w	80022b8 <__retarget_lock_release_recursive>
 80024a2:	bf00      	nop
 80024a4:	20000288 	.word	0x20000288

080024a8 <__sfputc_r>:
 80024a8:	6893      	ldr	r3, [r2, #8]
 80024aa:	b410      	push	{r4}
 80024ac:	3b01      	subs	r3, #1
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	6093      	str	r3, [r2, #8]
 80024b2:	da07      	bge.n	80024c4 <__sfputc_r+0x1c>
 80024b4:	6994      	ldr	r4, [r2, #24]
 80024b6:	42a3      	cmp	r3, r4
 80024b8:	db01      	blt.n	80024be <__sfputc_r+0x16>
 80024ba:	290a      	cmp	r1, #10
 80024bc:	d102      	bne.n	80024c4 <__sfputc_r+0x1c>
 80024be:	bc10      	pop	{r4}
 80024c0:	f7ff bdeb 	b.w	800209a <__swbuf_r>
 80024c4:	6813      	ldr	r3, [r2, #0]
 80024c6:	1c58      	adds	r0, r3, #1
 80024c8:	6010      	str	r0, [r2, #0]
 80024ca:	7019      	strb	r1, [r3, #0]
 80024cc:	4608      	mov	r0, r1
 80024ce:	bc10      	pop	{r4}
 80024d0:	4770      	bx	lr

080024d2 <__sfputs_r>:
 80024d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024d4:	4606      	mov	r6, r0
 80024d6:	460f      	mov	r7, r1
 80024d8:	4614      	mov	r4, r2
 80024da:	18d5      	adds	r5, r2, r3
 80024dc:	42ac      	cmp	r4, r5
 80024de:	d101      	bne.n	80024e4 <__sfputs_r+0x12>
 80024e0:	2000      	movs	r0, #0
 80024e2:	e007      	b.n	80024f4 <__sfputs_r+0x22>
 80024e4:	463a      	mov	r2, r7
 80024e6:	4630      	mov	r0, r6
 80024e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80024ec:	f7ff ffdc 	bl	80024a8 <__sfputc_r>
 80024f0:	1c43      	adds	r3, r0, #1
 80024f2:	d1f3      	bne.n	80024dc <__sfputs_r+0xa>
 80024f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080024f8 <_vfiprintf_r>:
 80024f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80024fc:	460d      	mov	r5, r1
 80024fe:	4614      	mov	r4, r2
 8002500:	4698      	mov	r8, r3
 8002502:	4606      	mov	r6, r0
 8002504:	b09d      	sub	sp, #116	@ 0x74
 8002506:	b118      	cbz	r0, 8002510 <_vfiprintf_r+0x18>
 8002508:	6a03      	ldr	r3, [r0, #32]
 800250a:	b90b      	cbnz	r3, 8002510 <_vfiprintf_r+0x18>
 800250c:	f7ff fcdc 	bl	8001ec8 <__sinit>
 8002510:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002512:	07d9      	lsls	r1, r3, #31
 8002514:	d405      	bmi.n	8002522 <_vfiprintf_r+0x2a>
 8002516:	89ab      	ldrh	r3, [r5, #12]
 8002518:	059a      	lsls	r2, r3, #22
 800251a:	d402      	bmi.n	8002522 <_vfiprintf_r+0x2a>
 800251c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800251e:	f7ff feca 	bl	80022b6 <__retarget_lock_acquire_recursive>
 8002522:	89ab      	ldrh	r3, [r5, #12]
 8002524:	071b      	lsls	r3, r3, #28
 8002526:	d501      	bpl.n	800252c <_vfiprintf_r+0x34>
 8002528:	692b      	ldr	r3, [r5, #16]
 800252a:	b99b      	cbnz	r3, 8002554 <_vfiprintf_r+0x5c>
 800252c:	4629      	mov	r1, r5
 800252e:	4630      	mov	r0, r6
 8002530:	f7ff fdf2 	bl	8002118 <__swsetup_r>
 8002534:	b170      	cbz	r0, 8002554 <_vfiprintf_r+0x5c>
 8002536:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002538:	07dc      	lsls	r4, r3, #31
 800253a:	d504      	bpl.n	8002546 <_vfiprintf_r+0x4e>
 800253c:	f04f 30ff 	mov.w	r0, #4294967295
 8002540:	b01d      	add	sp, #116	@ 0x74
 8002542:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002546:	89ab      	ldrh	r3, [r5, #12]
 8002548:	0598      	lsls	r0, r3, #22
 800254a:	d4f7      	bmi.n	800253c <_vfiprintf_r+0x44>
 800254c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800254e:	f7ff feb3 	bl	80022b8 <__retarget_lock_release_recursive>
 8002552:	e7f3      	b.n	800253c <_vfiprintf_r+0x44>
 8002554:	2300      	movs	r3, #0
 8002556:	9309      	str	r3, [sp, #36]	@ 0x24
 8002558:	2320      	movs	r3, #32
 800255a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800255e:	2330      	movs	r3, #48	@ 0x30
 8002560:	f04f 0901 	mov.w	r9, #1
 8002564:	f8cd 800c 	str.w	r8, [sp, #12]
 8002568:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8002714 <_vfiprintf_r+0x21c>
 800256c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002570:	4623      	mov	r3, r4
 8002572:	469a      	mov	sl, r3
 8002574:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002578:	b10a      	cbz	r2, 800257e <_vfiprintf_r+0x86>
 800257a:	2a25      	cmp	r2, #37	@ 0x25
 800257c:	d1f9      	bne.n	8002572 <_vfiprintf_r+0x7a>
 800257e:	ebba 0b04 	subs.w	fp, sl, r4
 8002582:	d00b      	beq.n	800259c <_vfiprintf_r+0xa4>
 8002584:	465b      	mov	r3, fp
 8002586:	4622      	mov	r2, r4
 8002588:	4629      	mov	r1, r5
 800258a:	4630      	mov	r0, r6
 800258c:	f7ff ffa1 	bl	80024d2 <__sfputs_r>
 8002590:	3001      	adds	r0, #1
 8002592:	f000 80a7 	beq.w	80026e4 <_vfiprintf_r+0x1ec>
 8002596:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002598:	445a      	add	r2, fp
 800259a:	9209      	str	r2, [sp, #36]	@ 0x24
 800259c:	f89a 3000 	ldrb.w	r3, [sl]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	f000 809f 	beq.w	80026e4 <_vfiprintf_r+0x1ec>
 80025a6:	2300      	movs	r3, #0
 80025a8:	f04f 32ff 	mov.w	r2, #4294967295
 80025ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80025b0:	f10a 0a01 	add.w	sl, sl, #1
 80025b4:	9304      	str	r3, [sp, #16]
 80025b6:	9307      	str	r3, [sp, #28]
 80025b8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80025bc:	931a      	str	r3, [sp, #104]	@ 0x68
 80025be:	4654      	mov	r4, sl
 80025c0:	2205      	movs	r2, #5
 80025c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80025c6:	4853      	ldr	r0, [pc, #332]	@ (8002714 <_vfiprintf_r+0x21c>)
 80025c8:	f000 fb7c 	bl	8002cc4 <memchr>
 80025cc:	9a04      	ldr	r2, [sp, #16]
 80025ce:	b9d8      	cbnz	r0, 8002608 <_vfiprintf_r+0x110>
 80025d0:	06d1      	lsls	r1, r2, #27
 80025d2:	bf44      	itt	mi
 80025d4:	2320      	movmi	r3, #32
 80025d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80025da:	0713      	lsls	r3, r2, #28
 80025dc:	bf44      	itt	mi
 80025de:	232b      	movmi	r3, #43	@ 0x2b
 80025e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80025e4:	f89a 3000 	ldrb.w	r3, [sl]
 80025e8:	2b2a      	cmp	r3, #42	@ 0x2a
 80025ea:	d015      	beq.n	8002618 <_vfiprintf_r+0x120>
 80025ec:	4654      	mov	r4, sl
 80025ee:	2000      	movs	r0, #0
 80025f0:	f04f 0c0a 	mov.w	ip, #10
 80025f4:	9a07      	ldr	r2, [sp, #28]
 80025f6:	4621      	mov	r1, r4
 80025f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80025fc:	3b30      	subs	r3, #48	@ 0x30
 80025fe:	2b09      	cmp	r3, #9
 8002600:	d94b      	bls.n	800269a <_vfiprintf_r+0x1a2>
 8002602:	b1b0      	cbz	r0, 8002632 <_vfiprintf_r+0x13a>
 8002604:	9207      	str	r2, [sp, #28]
 8002606:	e014      	b.n	8002632 <_vfiprintf_r+0x13a>
 8002608:	eba0 0308 	sub.w	r3, r0, r8
 800260c:	fa09 f303 	lsl.w	r3, r9, r3
 8002610:	4313      	orrs	r3, r2
 8002612:	46a2      	mov	sl, r4
 8002614:	9304      	str	r3, [sp, #16]
 8002616:	e7d2      	b.n	80025be <_vfiprintf_r+0xc6>
 8002618:	9b03      	ldr	r3, [sp, #12]
 800261a:	1d19      	adds	r1, r3, #4
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	9103      	str	r1, [sp, #12]
 8002620:	2b00      	cmp	r3, #0
 8002622:	bfbb      	ittet	lt
 8002624:	425b      	neglt	r3, r3
 8002626:	f042 0202 	orrlt.w	r2, r2, #2
 800262a:	9307      	strge	r3, [sp, #28]
 800262c:	9307      	strlt	r3, [sp, #28]
 800262e:	bfb8      	it	lt
 8002630:	9204      	strlt	r2, [sp, #16]
 8002632:	7823      	ldrb	r3, [r4, #0]
 8002634:	2b2e      	cmp	r3, #46	@ 0x2e
 8002636:	d10a      	bne.n	800264e <_vfiprintf_r+0x156>
 8002638:	7863      	ldrb	r3, [r4, #1]
 800263a:	2b2a      	cmp	r3, #42	@ 0x2a
 800263c:	d132      	bne.n	80026a4 <_vfiprintf_r+0x1ac>
 800263e:	9b03      	ldr	r3, [sp, #12]
 8002640:	3402      	adds	r4, #2
 8002642:	1d1a      	adds	r2, r3, #4
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	9203      	str	r2, [sp, #12]
 8002648:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800264c:	9305      	str	r3, [sp, #20]
 800264e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8002718 <_vfiprintf_r+0x220>
 8002652:	2203      	movs	r2, #3
 8002654:	4650      	mov	r0, sl
 8002656:	7821      	ldrb	r1, [r4, #0]
 8002658:	f000 fb34 	bl	8002cc4 <memchr>
 800265c:	b138      	cbz	r0, 800266e <_vfiprintf_r+0x176>
 800265e:	2240      	movs	r2, #64	@ 0x40
 8002660:	9b04      	ldr	r3, [sp, #16]
 8002662:	eba0 000a 	sub.w	r0, r0, sl
 8002666:	4082      	lsls	r2, r0
 8002668:	4313      	orrs	r3, r2
 800266a:	3401      	adds	r4, #1
 800266c:	9304      	str	r3, [sp, #16]
 800266e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002672:	2206      	movs	r2, #6
 8002674:	4829      	ldr	r0, [pc, #164]	@ (800271c <_vfiprintf_r+0x224>)
 8002676:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800267a:	f000 fb23 	bl	8002cc4 <memchr>
 800267e:	2800      	cmp	r0, #0
 8002680:	d03f      	beq.n	8002702 <_vfiprintf_r+0x20a>
 8002682:	4b27      	ldr	r3, [pc, #156]	@ (8002720 <_vfiprintf_r+0x228>)
 8002684:	bb1b      	cbnz	r3, 80026ce <_vfiprintf_r+0x1d6>
 8002686:	9b03      	ldr	r3, [sp, #12]
 8002688:	3307      	adds	r3, #7
 800268a:	f023 0307 	bic.w	r3, r3, #7
 800268e:	3308      	adds	r3, #8
 8002690:	9303      	str	r3, [sp, #12]
 8002692:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002694:	443b      	add	r3, r7
 8002696:	9309      	str	r3, [sp, #36]	@ 0x24
 8002698:	e76a      	b.n	8002570 <_vfiprintf_r+0x78>
 800269a:	460c      	mov	r4, r1
 800269c:	2001      	movs	r0, #1
 800269e:	fb0c 3202 	mla	r2, ip, r2, r3
 80026a2:	e7a8      	b.n	80025f6 <_vfiprintf_r+0xfe>
 80026a4:	2300      	movs	r3, #0
 80026a6:	f04f 0c0a 	mov.w	ip, #10
 80026aa:	4619      	mov	r1, r3
 80026ac:	3401      	adds	r4, #1
 80026ae:	9305      	str	r3, [sp, #20]
 80026b0:	4620      	mov	r0, r4
 80026b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80026b6:	3a30      	subs	r2, #48	@ 0x30
 80026b8:	2a09      	cmp	r2, #9
 80026ba:	d903      	bls.n	80026c4 <_vfiprintf_r+0x1cc>
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d0c6      	beq.n	800264e <_vfiprintf_r+0x156>
 80026c0:	9105      	str	r1, [sp, #20]
 80026c2:	e7c4      	b.n	800264e <_vfiprintf_r+0x156>
 80026c4:	4604      	mov	r4, r0
 80026c6:	2301      	movs	r3, #1
 80026c8:	fb0c 2101 	mla	r1, ip, r1, r2
 80026cc:	e7f0      	b.n	80026b0 <_vfiprintf_r+0x1b8>
 80026ce:	ab03      	add	r3, sp, #12
 80026d0:	9300      	str	r3, [sp, #0]
 80026d2:	462a      	mov	r2, r5
 80026d4:	4630      	mov	r0, r6
 80026d6:	4b13      	ldr	r3, [pc, #76]	@ (8002724 <_vfiprintf_r+0x22c>)
 80026d8:	a904      	add	r1, sp, #16
 80026da:	f3af 8000 	nop.w
 80026de:	4607      	mov	r7, r0
 80026e0:	1c78      	adds	r0, r7, #1
 80026e2:	d1d6      	bne.n	8002692 <_vfiprintf_r+0x19a>
 80026e4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80026e6:	07d9      	lsls	r1, r3, #31
 80026e8:	d405      	bmi.n	80026f6 <_vfiprintf_r+0x1fe>
 80026ea:	89ab      	ldrh	r3, [r5, #12]
 80026ec:	059a      	lsls	r2, r3, #22
 80026ee:	d402      	bmi.n	80026f6 <_vfiprintf_r+0x1fe>
 80026f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80026f2:	f7ff fde1 	bl	80022b8 <__retarget_lock_release_recursive>
 80026f6:	89ab      	ldrh	r3, [r5, #12]
 80026f8:	065b      	lsls	r3, r3, #25
 80026fa:	f53f af1f 	bmi.w	800253c <_vfiprintf_r+0x44>
 80026fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002700:	e71e      	b.n	8002540 <_vfiprintf_r+0x48>
 8002702:	ab03      	add	r3, sp, #12
 8002704:	9300      	str	r3, [sp, #0]
 8002706:	462a      	mov	r2, r5
 8002708:	4630      	mov	r0, r6
 800270a:	4b06      	ldr	r3, [pc, #24]	@ (8002724 <_vfiprintf_r+0x22c>)
 800270c:	a904      	add	r1, sp, #16
 800270e:	f000 f87d 	bl	800280c <_printf_i>
 8002712:	e7e4      	b.n	80026de <_vfiprintf_r+0x1e6>
 8002714:	08002e08 	.word	0x08002e08
 8002718:	08002e0e 	.word	0x08002e0e
 800271c:	08002e12 	.word	0x08002e12
 8002720:	00000000 	.word	0x00000000
 8002724:	080024d3 	.word	0x080024d3

08002728 <_printf_common>:
 8002728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800272c:	4616      	mov	r6, r2
 800272e:	4698      	mov	r8, r3
 8002730:	688a      	ldr	r2, [r1, #8]
 8002732:	690b      	ldr	r3, [r1, #16]
 8002734:	4607      	mov	r7, r0
 8002736:	4293      	cmp	r3, r2
 8002738:	bfb8      	it	lt
 800273a:	4613      	movlt	r3, r2
 800273c:	6033      	str	r3, [r6, #0]
 800273e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002742:	460c      	mov	r4, r1
 8002744:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002748:	b10a      	cbz	r2, 800274e <_printf_common+0x26>
 800274a:	3301      	adds	r3, #1
 800274c:	6033      	str	r3, [r6, #0]
 800274e:	6823      	ldr	r3, [r4, #0]
 8002750:	0699      	lsls	r1, r3, #26
 8002752:	bf42      	ittt	mi
 8002754:	6833      	ldrmi	r3, [r6, #0]
 8002756:	3302      	addmi	r3, #2
 8002758:	6033      	strmi	r3, [r6, #0]
 800275a:	6825      	ldr	r5, [r4, #0]
 800275c:	f015 0506 	ands.w	r5, r5, #6
 8002760:	d106      	bne.n	8002770 <_printf_common+0x48>
 8002762:	f104 0a19 	add.w	sl, r4, #25
 8002766:	68e3      	ldr	r3, [r4, #12]
 8002768:	6832      	ldr	r2, [r6, #0]
 800276a:	1a9b      	subs	r3, r3, r2
 800276c:	42ab      	cmp	r3, r5
 800276e:	dc2b      	bgt.n	80027c8 <_printf_common+0xa0>
 8002770:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002774:	6822      	ldr	r2, [r4, #0]
 8002776:	3b00      	subs	r3, #0
 8002778:	bf18      	it	ne
 800277a:	2301      	movne	r3, #1
 800277c:	0692      	lsls	r2, r2, #26
 800277e:	d430      	bmi.n	80027e2 <_printf_common+0xba>
 8002780:	4641      	mov	r1, r8
 8002782:	4638      	mov	r0, r7
 8002784:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002788:	47c8      	blx	r9
 800278a:	3001      	adds	r0, #1
 800278c:	d023      	beq.n	80027d6 <_printf_common+0xae>
 800278e:	6823      	ldr	r3, [r4, #0]
 8002790:	6922      	ldr	r2, [r4, #16]
 8002792:	f003 0306 	and.w	r3, r3, #6
 8002796:	2b04      	cmp	r3, #4
 8002798:	bf14      	ite	ne
 800279a:	2500      	movne	r5, #0
 800279c:	6833      	ldreq	r3, [r6, #0]
 800279e:	f04f 0600 	mov.w	r6, #0
 80027a2:	bf08      	it	eq
 80027a4:	68e5      	ldreq	r5, [r4, #12]
 80027a6:	f104 041a 	add.w	r4, r4, #26
 80027aa:	bf08      	it	eq
 80027ac:	1aed      	subeq	r5, r5, r3
 80027ae:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80027b2:	bf08      	it	eq
 80027b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80027b8:	4293      	cmp	r3, r2
 80027ba:	bfc4      	itt	gt
 80027bc:	1a9b      	subgt	r3, r3, r2
 80027be:	18ed      	addgt	r5, r5, r3
 80027c0:	42b5      	cmp	r5, r6
 80027c2:	d11a      	bne.n	80027fa <_printf_common+0xd2>
 80027c4:	2000      	movs	r0, #0
 80027c6:	e008      	b.n	80027da <_printf_common+0xb2>
 80027c8:	2301      	movs	r3, #1
 80027ca:	4652      	mov	r2, sl
 80027cc:	4641      	mov	r1, r8
 80027ce:	4638      	mov	r0, r7
 80027d0:	47c8      	blx	r9
 80027d2:	3001      	adds	r0, #1
 80027d4:	d103      	bne.n	80027de <_printf_common+0xb6>
 80027d6:	f04f 30ff 	mov.w	r0, #4294967295
 80027da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80027de:	3501      	adds	r5, #1
 80027e0:	e7c1      	b.n	8002766 <_printf_common+0x3e>
 80027e2:	2030      	movs	r0, #48	@ 0x30
 80027e4:	18e1      	adds	r1, r4, r3
 80027e6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80027ea:	1c5a      	adds	r2, r3, #1
 80027ec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80027f0:	4422      	add	r2, r4
 80027f2:	3302      	adds	r3, #2
 80027f4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80027f8:	e7c2      	b.n	8002780 <_printf_common+0x58>
 80027fa:	2301      	movs	r3, #1
 80027fc:	4622      	mov	r2, r4
 80027fe:	4641      	mov	r1, r8
 8002800:	4638      	mov	r0, r7
 8002802:	47c8      	blx	r9
 8002804:	3001      	adds	r0, #1
 8002806:	d0e6      	beq.n	80027d6 <_printf_common+0xae>
 8002808:	3601      	adds	r6, #1
 800280a:	e7d9      	b.n	80027c0 <_printf_common+0x98>

0800280c <_printf_i>:
 800280c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002810:	7e0f      	ldrb	r7, [r1, #24]
 8002812:	4691      	mov	r9, r2
 8002814:	2f78      	cmp	r7, #120	@ 0x78
 8002816:	4680      	mov	r8, r0
 8002818:	460c      	mov	r4, r1
 800281a:	469a      	mov	sl, r3
 800281c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800281e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002822:	d807      	bhi.n	8002834 <_printf_i+0x28>
 8002824:	2f62      	cmp	r7, #98	@ 0x62
 8002826:	d80a      	bhi.n	800283e <_printf_i+0x32>
 8002828:	2f00      	cmp	r7, #0
 800282a:	f000 80d3 	beq.w	80029d4 <_printf_i+0x1c8>
 800282e:	2f58      	cmp	r7, #88	@ 0x58
 8002830:	f000 80ba 	beq.w	80029a8 <_printf_i+0x19c>
 8002834:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002838:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800283c:	e03a      	b.n	80028b4 <_printf_i+0xa8>
 800283e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002842:	2b15      	cmp	r3, #21
 8002844:	d8f6      	bhi.n	8002834 <_printf_i+0x28>
 8002846:	a101      	add	r1, pc, #4	@ (adr r1, 800284c <_printf_i+0x40>)
 8002848:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800284c:	080028a5 	.word	0x080028a5
 8002850:	080028b9 	.word	0x080028b9
 8002854:	08002835 	.word	0x08002835
 8002858:	08002835 	.word	0x08002835
 800285c:	08002835 	.word	0x08002835
 8002860:	08002835 	.word	0x08002835
 8002864:	080028b9 	.word	0x080028b9
 8002868:	08002835 	.word	0x08002835
 800286c:	08002835 	.word	0x08002835
 8002870:	08002835 	.word	0x08002835
 8002874:	08002835 	.word	0x08002835
 8002878:	080029bb 	.word	0x080029bb
 800287c:	080028e3 	.word	0x080028e3
 8002880:	08002975 	.word	0x08002975
 8002884:	08002835 	.word	0x08002835
 8002888:	08002835 	.word	0x08002835
 800288c:	080029dd 	.word	0x080029dd
 8002890:	08002835 	.word	0x08002835
 8002894:	080028e3 	.word	0x080028e3
 8002898:	08002835 	.word	0x08002835
 800289c:	08002835 	.word	0x08002835
 80028a0:	0800297d 	.word	0x0800297d
 80028a4:	6833      	ldr	r3, [r6, #0]
 80028a6:	1d1a      	adds	r2, r3, #4
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	6032      	str	r2, [r6, #0]
 80028ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80028b0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80028b4:	2301      	movs	r3, #1
 80028b6:	e09e      	b.n	80029f6 <_printf_i+0x1ea>
 80028b8:	6833      	ldr	r3, [r6, #0]
 80028ba:	6820      	ldr	r0, [r4, #0]
 80028bc:	1d19      	adds	r1, r3, #4
 80028be:	6031      	str	r1, [r6, #0]
 80028c0:	0606      	lsls	r6, r0, #24
 80028c2:	d501      	bpl.n	80028c8 <_printf_i+0xbc>
 80028c4:	681d      	ldr	r5, [r3, #0]
 80028c6:	e003      	b.n	80028d0 <_printf_i+0xc4>
 80028c8:	0645      	lsls	r5, r0, #25
 80028ca:	d5fb      	bpl.n	80028c4 <_printf_i+0xb8>
 80028cc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80028d0:	2d00      	cmp	r5, #0
 80028d2:	da03      	bge.n	80028dc <_printf_i+0xd0>
 80028d4:	232d      	movs	r3, #45	@ 0x2d
 80028d6:	426d      	negs	r5, r5
 80028d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80028dc:	230a      	movs	r3, #10
 80028de:	4859      	ldr	r0, [pc, #356]	@ (8002a44 <_printf_i+0x238>)
 80028e0:	e011      	b.n	8002906 <_printf_i+0xfa>
 80028e2:	6821      	ldr	r1, [r4, #0]
 80028e4:	6833      	ldr	r3, [r6, #0]
 80028e6:	0608      	lsls	r0, r1, #24
 80028e8:	f853 5b04 	ldr.w	r5, [r3], #4
 80028ec:	d402      	bmi.n	80028f4 <_printf_i+0xe8>
 80028ee:	0649      	lsls	r1, r1, #25
 80028f0:	bf48      	it	mi
 80028f2:	b2ad      	uxthmi	r5, r5
 80028f4:	2f6f      	cmp	r7, #111	@ 0x6f
 80028f6:	6033      	str	r3, [r6, #0]
 80028f8:	bf14      	ite	ne
 80028fa:	230a      	movne	r3, #10
 80028fc:	2308      	moveq	r3, #8
 80028fe:	4851      	ldr	r0, [pc, #324]	@ (8002a44 <_printf_i+0x238>)
 8002900:	2100      	movs	r1, #0
 8002902:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002906:	6866      	ldr	r6, [r4, #4]
 8002908:	2e00      	cmp	r6, #0
 800290a:	bfa8      	it	ge
 800290c:	6821      	ldrge	r1, [r4, #0]
 800290e:	60a6      	str	r6, [r4, #8]
 8002910:	bfa4      	itt	ge
 8002912:	f021 0104 	bicge.w	r1, r1, #4
 8002916:	6021      	strge	r1, [r4, #0]
 8002918:	b90d      	cbnz	r5, 800291e <_printf_i+0x112>
 800291a:	2e00      	cmp	r6, #0
 800291c:	d04b      	beq.n	80029b6 <_printf_i+0x1aa>
 800291e:	4616      	mov	r6, r2
 8002920:	fbb5 f1f3 	udiv	r1, r5, r3
 8002924:	fb03 5711 	mls	r7, r3, r1, r5
 8002928:	5dc7      	ldrb	r7, [r0, r7]
 800292a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800292e:	462f      	mov	r7, r5
 8002930:	42bb      	cmp	r3, r7
 8002932:	460d      	mov	r5, r1
 8002934:	d9f4      	bls.n	8002920 <_printf_i+0x114>
 8002936:	2b08      	cmp	r3, #8
 8002938:	d10b      	bne.n	8002952 <_printf_i+0x146>
 800293a:	6823      	ldr	r3, [r4, #0]
 800293c:	07df      	lsls	r7, r3, #31
 800293e:	d508      	bpl.n	8002952 <_printf_i+0x146>
 8002940:	6923      	ldr	r3, [r4, #16]
 8002942:	6861      	ldr	r1, [r4, #4]
 8002944:	4299      	cmp	r1, r3
 8002946:	bfde      	ittt	le
 8002948:	2330      	movle	r3, #48	@ 0x30
 800294a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800294e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002952:	1b92      	subs	r2, r2, r6
 8002954:	6122      	str	r2, [r4, #16]
 8002956:	464b      	mov	r3, r9
 8002958:	4621      	mov	r1, r4
 800295a:	4640      	mov	r0, r8
 800295c:	f8cd a000 	str.w	sl, [sp]
 8002960:	aa03      	add	r2, sp, #12
 8002962:	f7ff fee1 	bl	8002728 <_printf_common>
 8002966:	3001      	adds	r0, #1
 8002968:	d14a      	bne.n	8002a00 <_printf_i+0x1f4>
 800296a:	f04f 30ff 	mov.w	r0, #4294967295
 800296e:	b004      	add	sp, #16
 8002970:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002974:	6823      	ldr	r3, [r4, #0]
 8002976:	f043 0320 	orr.w	r3, r3, #32
 800297a:	6023      	str	r3, [r4, #0]
 800297c:	2778      	movs	r7, #120	@ 0x78
 800297e:	4832      	ldr	r0, [pc, #200]	@ (8002a48 <_printf_i+0x23c>)
 8002980:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002984:	6823      	ldr	r3, [r4, #0]
 8002986:	6831      	ldr	r1, [r6, #0]
 8002988:	061f      	lsls	r7, r3, #24
 800298a:	f851 5b04 	ldr.w	r5, [r1], #4
 800298e:	d402      	bmi.n	8002996 <_printf_i+0x18a>
 8002990:	065f      	lsls	r7, r3, #25
 8002992:	bf48      	it	mi
 8002994:	b2ad      	uxthmi	r5, r5
 8002996:	6031      	str	r1, [r6, #0]
 8002998:	07d9      	lsls	r1, r3, #31
 800299a:	bf44      	itt	mi
 800299c:	f043 0320 	orrmi.w	r3, r3, #32
 80029a0:	6023      	strmi	r3, [r4, #0]
 80029a2:	b11d      	cbz	r5, 80029ac <_printf_i+0x1a0>
 80029a4:	2310      	movs	r3, #16
 80029a6:	e7ab      	b.n	8002900 <_printf_i+0xf4>
 80029a8:	4826      	ldr	r0, [pc, #152]	@ (8002a44 <_printf_i+0x238>)
 80029aa:	e7e9      	b.n	8002980 <_printf_i+0x174>
 80029ac:	6823      	ldr	r3, [r4, #0]
 80029ae:	f023 0320 	bic.w	r3, r3, #32
 80029b2:	6023      	str	r3, [r4, #0]
 80029b4:	e7f6      	b.n	80029a4 <_printf_i+0x198>
 80029b6:	4616      	mov	r6, r2
 80029b8:	e7bd      	b.n	8002936 <_printf_i+0x12a>
 80029ba:	6833      	ldr	r3, [r6, #0]
 80029bc:	6825      	ldr	r5, [r4, #0]
 80029be:	1d18      	adds	r0, r3, #4
 80029c0:	6961      	ldr	r1, [r4, #20]
 80029c2:	6030      	str	r0, [r6, #0]
 80029c4:	062e      	lsls	r6, r5, #24
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	d501      	bpl.n	80029ce <_printf_i+0x1c2>
 80029ca:	6019      	str	r1, [r3, #0]
 80029cc:	e002      	b.n	80029d4 <_printf_i+0x1c8>
 80029ce:	0668      	lsls	r0, r5, #25
 80029d0:	d5fb      	bpl.n	80029ca <_printf_i+0x1be>
 80029d2:	8019      	strh	r1, [r3, #0]
 80029d4:	2300      	movs	r3, #0
 80029d6:	4616      	mov	r6, r2
 80029d8:	6123      	str	r3, [r4, #16]
 80029da:	e7bc      	b.n	8002956 <_printf_i+0x14a>
 80029dc:	6833      	ldr	r3, [r6, #0]
 80029de:	2100      	movs	r1, #0
 80029e0:	1d1a      	adds	r2, r3, #4
 80029e2:	6032      	str	r2, [r6, #0]
 80029e4:	681e      	ldr	r6, [r3, #0]
 80029e6:	6862      	ldr	r2, [r4, #4]
 80029e8:	4630      	mov	r0, r6
 80029ea:	f000 f96b 	bl	8002cc4 <memchr>
 80029ee:	b108      	cbz	r0, 80029f4 <_printf_i+0x1e8>
 80029f0:	1b80      	subs	r0, r0, r6
 80029f2:	6060      	str	r0, [r4, #4]
 80029f4:	6863      	ldr	r3, [r4, #4]
 80029f6:	6123      	str	r3, [r4, #16]
 80029f8:	2300      	movs	r3, #0
 80029fa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80029fe:	e7aa      	b.n	8002956 <_printf_i+0x14a>
 8002a00:	4632      	mov	r2, r6
 8002a02:	4649      	mov	r1, r9
 8002a04:	4640      	mov	r0, r8
 8002a06:	6923      	ldr	r3, [r4, #16]
 8002a08:	47d0      	blx	sl
 8002a0a:	3001      	adds	r0, #1
 8002a0c:	d0ad      	beq.n	800296a <_printf_i+0x15e>
 8002a0e:	6823      	ldr	r3, [r4, #0]
 8002a10:	079b      	lsls	r3, r3, #30
 8002a12:	d413      	bmi.n	8002a3c <_printf_i+0x230>
 8002a14:	68e0      	ldr	r0, [r4, #12]
 8002a16:	9b03      	ldr	r3, [sp, #12]
 8002a18:	4298      	cmp	r0, r3
 8002a1a:	bfb8      	it	lt
 8002a1c:	4618      	movlt	r0, r3
 8002a1e:	e7a6      	b.n	800296e <_printf_i+0x162>
 8002a20:	2301      	movs	r3, #1
 8002a22:	4632      	mov	r2, r6
 8002a24:	4649      	mov	r1, r9
 8002a26:	4640      	mov	r0, r8
 8002a28:	47d0      	blx	sl
 8002a2a:	3001      	adds	r0, #1
 8002a2c:	d09d      	beq.n	800296a <_printf_i+0x15e>
 8002a2e:	3501      	adds	r5, #1
 8002a30:	68e3      	ldr	r3, [r4, #12]
 8002a32:	9903      	ldr	r1, [sp, #12]
 8002a34:	1a5b      	subs	r3, r3, r1
 8002a36:	42ab      	cmp	r3, r5
 8002a38:	dcf2      	bgt.n	8002a20 <_printf_i+0x214>
 8002a3a:	e7eb      	b.n	8002a14 <_printf_i+0x208>
 8002a3c:	2500      	movs	r5, #0
 8002a3e:	f104 0619 	add.w	r6, r4, #25
 8002a42:	e7f5      	b.n	8002a30 <_printf_i+0x224>
 8002a44:	08002e19 	.word	0x08002e19
 8002a48:	08002e2a 	.word	0x08002e2a

08002a4c <__sflush_r>:
 8002a4c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a52:	0716      	lsls	r6, r2, #28
 8002a54:	4605      	mov	r5, r0
 8002a56:	460c      	mov	r4, r1
 8002a58:	d454      	bmi.n	8002b04 <__sflush_r+0xb8>
 8002a5a:	684b      	ldr	r3, [r1, #4]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	dc02      	bgt.n	8002a66 <__sflush_r+0x1a>
 8002a60:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	dd48      	ble.n	8002af8 <__sflush_r+0xac>
 8002a66:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002a68:	2e00      	cmp	r6, #0
 8002a6a:	d045      	beq.n	8002af8 <__sflush_r+0xac>
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8002a72:	682f      	ldr	r7, [r5, #0]
 8002a74:	6a21      	ldr	r1, [r4, #32]
 8002a76:	602b      	str	r3, [r5, #0]
 8002a78:	d030      	beq.n	8002adc <__sflush_r+0x90>
 8002a7a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002a7c:	89a3      	ldrh	r3, [r4, #12]
 8002a7e:	0759      	lsls	r1, r3, #29
 8002a80:	d505      	bpl.n	8002a8e <__sflush_r+0x42>
 8002a82:	6863      	ldr	r3, [r4, #4]
 8002a84:	1ad2      	subs	r2, r2, r3
 8002a86:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002a88:	b10b      	cbz	r3, 8002a8e <__sflush_r+0x42>
 8002a8a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002a8c:	1ad2      	subs	r2, r2, r3
 8002a8e:	2300      	movs	r3, #0
 8002a90:	4628      	mov	r0, r5
 8002a92:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002a94:	6a21      	ldr	r1, [r4, #32]
 8002a96:	47b0      	blx	r6
 8002a98:	1c43      	adds	r3, r0, #1
 8002a9a:	89a3      	ldrh	r3, [r4, #12]
 8002a9c:	d106      	bne.n	8002aac <__sflush_r+0x60>
 8002a9e:	6829      	ldr	r1, [r5, #0]
 8002aa0:	291d      	cmp	r1, #29
 8002aa2:	d82b      	bhi.n	8002afc <__sflush_r+0xb0>
 8002aa4:	4a28      	ldr	r2, [pc, #160]	@ (8002b48 <__sflush_r+0xfc>)
 8002aa6:	410a      	asrs	r2, r1
 8002aa8:	07d6      	lsls	r6, r2, #31
 8002aaa:	d427      	bmi.n	8002afc <__sflush_r+0xb0>
 8002aac:	2200      	movs	r2, #0
 8002aae:	6062      	str	r2, [r4, #4]
 8002ab0:	6922      	ldr	r2, [r4, #16]
 8002ab2:	04d9      	lsls	r1, r3, #19
 8002ab4:	6022      	str	r2, [r4, #0]
 8002ab6:	d504      	bpl.n	8002ac2 <__sflush_r+0x76>
 8002ab8:	1c42      	adds	r2, r0, #1
 8002aba:	d101      	bne.n	8002ac0 <__sflush_r+0x74>
 8002abc:	682b      	ldr	r3, [r5, #0]
 8002abe:	b903      	cbnz	r3, 8002ac2 <__sflush_r+0x76>
 8002ac0:	6560      	str	r0, [r4, #84]	@ 0x54
 8002ac2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002ac4:	602f      	str	r7, [r5, #0]
 8002ac6:	b1b9      	cbz	r1, 8002af8 <__sflush_r+0xac>
 8002ac8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002acc:	4299      	cmp	r1, r3
 8002ace:	d002      	beq.n	8002ad6 <__sflush_r+0x8a>
 8002ad0:	4628      	mov	r0, r5
 8002ad2:	f7ff fbf3 	bl	80022bc <_free_r>
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	6363      	str	r3, [r4, #52]	@ 0x34
 8002ada:	e00d      	b.n	8002af8 <__sflush_r+0xac>
 8002adc:	2301      	movs	r3, #1
 8002ade:	4628      	mov	r0, r5
 8002ae0:	47b0      	blx	r6
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	1c50      	adds	r0, r2, #1
 8002ae6:	d1c9      	bne.n	8002a7c <__sflush_r+0x30>
 8002ae8:	682b      	ldr	r3, [r5, #0]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d0c6      	beq.n	8002a7c <__sflush_r+0x30>
 8002aee:	2b1d      	cmp	r3, #29
 8002af0:	d001      	beq.n	8002af6 <__sflush_r+0xaa>
 8002af2:	2b16      	cmp	r3, #22
 8002af4:	d11d      	bne.n	8002b32 <__sflush_r+0xe6>
 8002af6:	602f      	str	r7, [r5, #0]
 8002af8:	2000      	movs	r0, #0
 8002afa:	e021      	b.n	8002b40 <__sflush_r+0xf4>
 8002afc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002b00:	b21b      	sxth	r3, r3
 8002b02:	e01a      	b.n	8002b3a <__sflush_r+0xee>
 8002b04:	690f      	ldr	r7, [r1, #16]
 8002b06:	2f00      	cmp	r7, #0
 8002b08:	d0f6      	beq.n	8002af8 <__sflush_r+0xac>
 8002b0a:	0793      	lsls	r3, r2, #30
 8002b0c:	bf18      	it	ne
 8002b0e:	2300      	movne	r3, #0
 8002b10:	680e      	ldr	r6, [r1, #0]
 8002b12:	bf08      	it	eq
 8002b14:	694b      	ldreq	r3, [r1, #20]
 8002b16:	1bf6      	subs	r6, r6, r7
 8002b18:	600f      	str	r7, [r1, #0]
 8002b1a:	608b      	str	r3, [r1, #8]
 8002b1c:	2e00      	cmp	r6, #0
 8002b1e:	ddeb      	ble.n	8002af8 <__sflush_r+0xac>
 8002b20:	4633      	mov	r3, r6
 8002b22:	463a      	mov	r2, r7
 8002b24:	4628      	mov	r0, r5
 8002b26:	6a21      	ldr	r1, [r4, #32]
 8002b28:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8002b2c:	47e0      	blx	ip
 8002b2e:	2800      	cmp	r0, #0
 8002b30:	dc07      	bgt.n	8002b42 <__sflush_r+0xf6>
 8002b32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002b36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002b3a:	f04f 30ff 	mov.w	r0, #4294967295
 8002b3e:	81a3      	strh	r3, [r4, #12]
 8002b40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002b42:	4407      	add	r7, r0
 8002b44:	1a36      	subs	r6, r6, r0
 8002b46:	e7e9      	b.n	8002b1c <__sflush_r+0xd0>
 8002b48:	dfbffffe 	.word	0xdfbffffe

08002b4c <_fflush_r>:
 8002b4c:	b538      	push	{r3, r4, r5, lr}
 8002b4e:	690b      	ldr	r3, [r1, #16]
 8002b50:	4605      	mov	r5, r0
 8002b52:	460c      	mov	r4, r1
 8002b54:	b913      	cbnz	r3, 8002b5c <_fflush_r+0x10>
 8002b56:	2500      	movs	r5, #0
 8002b58:	4628      	mov	r0, r5
 8002b5a:	bd38      	pop	{r3, r4, r5, pc}
 8002b5c:	b118      	cbz	r0, 8002b66 <_fflush_r+0x1a>
 8002b5e:	6a03      	ldr	r3, [r0, #32]
 8002b60:	b90b      	cbnz	r3, 8002b66 <_fflush_r+0x1a>
 8002b62:	f7ff f9b1 	bl	8001ec8 <__sinit>
 8002b66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d0f3      	beq.n	8002b56 <_fflush_r+0xa>
 8002b6e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002b70:	07d0      	lsls	r0, r2, #31
 8002b72:	d404      	bmi.n	8002b7e <_fflush_r+0x32>
 8002b74:	0599      	lsls	r1, r3, #22
 8002b76:	d402      	bmi.n	8002b7e <_fflush_r+0x32>
 8002b78:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002b7a:	f7ff fb9c 	bl	80022b6 <__retarget_lock_acquire_recursive>
 8002b7e:	4628      	mov	r0, r5
 8002b80:	4621      	mov	r1, r4
 8002b82:	f7ff ff63 	bl	8002a4c <__sflush_r>
 8002b86:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002b88:	4605      	mov	r5, r0
 8002b8a:	07da      	lsls	r2, r3, #31
 8002b8c:	d4e4      	bmi.n	8002b58 <_fflush_r+0xc>
 8002b8e:	89a3      	ldrh	r3, [r4, #12]
 8002b90:	059b      	lsls	r3, r3, #22
 8002b92:	d4e1      	bmi.n	8002b58 <_fflush_r+0xc>
 8002b94:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002b96:	f7ff fb8f 	bl	80022b8 <__retarget_lock_release_recursive>
 8002b9a:	e7dd      	b.n	8002b58 <_fflush_r+0xc>

08002b9c <__swhatbuf_r>:
 8002b9c:	b570      	push	{r4, r5, r6, lr}
 8002b9e:	460c      	mov	r4, r1
 8002ba0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ba4:	4615      	mov	r5, r2
 8002ba6:	2900      	cmp	r1, #0
 8002ba8:	461e      	mov	r6, r3
 8002baa:	b096      	sub	sp, #88	@ 0x58
 8002bac:	da0c      	bge.n	8002bc8 <__swhatbuf_r+0x2c>
 8002bae:	89a3      	ldrh	r3, [r4, #12]
 8002bb0:	2100      	movs	r1, #0
 8002bb2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002bb6:	bf14      	ite	ne
 8002bb8:	2340      	movne	r3, #64	@ 0x40
 8002bba:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8002bbe:	2000      	movs	r0, #0
 8002bc0:	6031      	str	r1, [r6, #0]
 8002bc2:	602b      	str	r3, [r5, #0]
 8002bc4:	b016      	add	sp, #88	@ 0x58
 8002bc6:	bd70      	pop	{r4, r5, r6, pc}
 8002bc8:	466a      	mov	r2, sp
 8002bca:	f000 f849 	bl	8002c60 <_fstat_r>
 8002bce:	2800      	cmp	r0, #0
 8002bd0:	dbed      	blt.n	8002bae <__swhatbuf_r+0x12>
 8002bd2:	9901      	ldr	r1, [sp, #4]
 8002bd4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8002bd8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8002bdc:	4259      	negs	r1, r3
 8002bde:	4159      	adcs	r1, r3
 8002be0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002be4:	e7eb      	b.n	8002bbe <__swhatbuf_r+0x22>

08002be6 <__smakebuf_r>:
 8002be6:	898b      	ldrh	r3, [r1, #12]
 8002be8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002bea:	079d      	lsls	r5, r3, #30
 8002bec:	4606      	mov	r6, r0
 8002bee:	460c      	mov	r4, r1
 8002bf0:	d507      	bpl.n	8002c02 <__smakebuf_r+0x1c>
 8002bf2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8002bf6:	6023      	str	r3, [r4, #0]
 8002bf8:	6123      	str	r3, [r4, #16]
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	6163      	str	r3, [r4, #20]
 8002bfe:	b003      	add	sp, #12
 8002c00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c02:	466a      	mov	r2, sp
 8002c04:	ab01      	add	r3, sp, #4
 8002c06:	f7ff ffc9 	bl	8002b9c <__swhatbuf_r>
 8002c0a:	9f00      	ldr	r7, [sp, #0]
 8002c0c:	4605      	mov	r5, r0
 8002c0e:	4639      	mov	r1, r7
 8002c10:	4630      	mov	r0, r6
 8002c12:	f7ff fbbd 	bl	8002390 <_malloc_r>
 8002c16:	b948      	cbnz	r0, 8002c2c <__smakebuf_r+0x46>
 8002c18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002c1c:	059a      	lsls	r2, r3, #22
 8002c1e:	d4ee      	bmi.n	8002bfe <__smakebuf_r+0x18>
 8002c20:	f023 0303 	bic.w	r3, r3, #3
 8002c24:	f043 0302 	orr.w	r3, r3, #2
 8002c28:	81a3      	strh	r3, [r4, #12]
 8002c2a:	e7e2      	b.n	8002bf2 <__smakebuf_r+0xc>
 8002c2c:	89a3      	ldrh	r3, [r4, #12]
 8002c2e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8002c32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002c36:	81a3      	strh	r3, [r4, #12]
 8002c38:	9b01      	ldr	r3, [sp, #4]
 8002c3a:	6020      	str	r0, [r4, #0]
 8002c3c:	b15b      	cbz	r3, 8002c56 <__smakebuf_r+0x70>
 8002c3e:	4630      	mov	r0, r6
 8002c40:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002c44:	f000 f81e 	bl	8002c84 <_isatty_r>
 8002c48:	b128      	cbz	r0, 8002c56 <__smakebuf_r+0x70>
 8002c4a:	89a3      	ldrh	r3, [r4, #12]
 8002c4c:	f023 0303 	bic.w	r3, r3, #3
 8002c50:	f043 0301 	orr.w	r3, r3, #1
 8002c54:	81a3      	strh	r3, [r4, #12]
 8002c56:	89a3      	ldrh	r3, [r4, #12]
 8002c58:	431d      	orrs	r5, r3
 8002c5a:	81a5      	strh	r5, [r4, #12]
 8002c5c:	e7cf      	b.n	8002bfe <__smakebuf_r+0x18>
	...

08002c60 <_fstat_r>:
 8002c60:	b538      	push	{r3, r4, r5, lr}
 8002c62:	2300      	movs	r3, #0
 8002c64:	4d06      	ldr	r5, [pc, #24]	@ (8002c80 <_fstat_r+0x20>)
 8002c66:	4604      	mov	r4, r0
 8002c68:	4608      	mov	r0, r1
 8002c6a:	4611      	mov	r1, r2
 8002c6c:	602b      	str	r3, [r5, #0]
 8002c6e:	f7fd fce0 	bl	8000632 <_fstat>
 8002c72:	1c43      	adds	r3, r0, #1
 8002c74:	d102      	bne.n	8002c7c <_fstat_r+0x1c>
 8002c76:	682b      	ldr	r3, [r5, #0]
 8002c78:	b103      	cbz	r3, 8002c7c <_fstat_r+0x1c>
 8002c7a:	6023      	str	r3, [r4, #0]
 8002c7c:	bd38      	pop	{r3, r4, r5, pc}
 8002c7e:	bf00      	nop
 8002c80:	20000284 	.word	0x20000284

08002c84 <_isatty_r>:
 8002c84:	b538      	push	{r3, r4, r5, lr}
 8002c86:	2300      	movs	r3, #0
 8002c88:	4d05      	ldr	r5, [pc, #20]	@ (8002ca0 <_isatty_r+0x1c>)
 8002c8a:	4604      	mov	r4, r0
 8002c8c:	4608      	mov	r0, r1
 8002c8e:	602b      	str	r3, [r5, #0]
 8002c90:	f7fd fcd4 	bl	800063c <_isatty>
 8002c94:	1c43      	adds	r3, r0, #1
 8002c96:	d102      	bne.n	8002c9e <_isatty_r+0x1a>
 8002c98:	682b      	ldr	r3, [r5, #0]
 8002c9a:	b103      	cbz	r3, 8002c9e <_isatty_r+0x1a>
 8002c9c:	6023      	str	r3, [r4, #0]
 8002c9e:	bd38      	pop	{r3, r4, r5, pc}
 8002ca0:	20000284 	.word	0x20000284

08002ca4 <_sbrk_r>:
 8002ca4:	b538      	push	{r3, r4, r5, lr}
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	4d05      	ldr	r5, [pc, #20]	@ (8002cc0 <_sbrk_r+0x1c>)
 8002caa:	4604      	mov	r4, r0
 8002cac:	4608      	mov	r0, r1
 8002cae:	602b      	str	r3, [r5, #0]
 8002cb0:	f7fd fcc8 	bl	8000644 <_sbrk>
 8002cb4:	1c43      	adds	r3, r0, #1
 8002cb6:	d102      	bne.n	8002cbe <_sbrk_r+0x1a>
 8002cb8:	682b      	ldr	r3, [r5, #0]
 8002cba:	b103      	cbz	r3, 8002cbe <_sbrk_r+0x1a>
 8002cbc:	6023      	str	r3, [r4, #0]
 8002cbe:	bd38      	pop	{r3, r4, r5, pc}
 8002cc0:	20000284 	.word	0x20000284

08002cc4 <memchr>:
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	b510      	push	{r4, lr}
 8002cc8:	b2c9      	uxtb	r1, r1
 8002cca:	4402      	add	r2, r0
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	4618      	mov	r0, r3
 8002cd0:	d101      	bne.n	8002cd6 <memchr+0x12>
 8002cd2:	2000      	movs	r0, #0
 8002cd4:	e003      	b.n	8002cde <memchr+0x1a>
 8002cd6:	7804      	ldrb	r4, [r0, #0]
 8002cd8:	3301      	adds	r3, #1
 8002cda:	428c      	cmp	r4, r1
 8002cdc:	d1f6      	bne.n	8002ccc <memchr+0x8>
 8002cde:	bd10      	pop	{r4, pc}

08002ce0 <_init>:
 8002ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ce2:	bf00      	nop
 8002ce4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ce6:	bc08      	pop	{r3}
 8002ce8:	469e      	mov	lr, r3
 8002cea:	4770      	bx	lr

08002cec <_fini>:
 8002cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cee:	bf00      	nop
 8002cf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cf2:	bc08      	pop	{r3}
 8002cf4:	469e      	mov	lr, r3
 8002cf6:	4770      	bx	lr
